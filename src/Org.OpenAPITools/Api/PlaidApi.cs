/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlaidApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve real-time balance data
        /// </summary>
        /// <remarks>
        /// The &#x60;/accounts/balance/get&#x60; endpoint returns the real-time balance for each of an Item&#39;s accounts. While other endpoints may return a balance object, only &#x60;/accounts/balance/get&#x60; forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, &#x60;balance&#x60; itself is not a product that can be used to initialize Link.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountsBalanceGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountsGetResponse</returns>
        AccountsGetResponse AccountsBalanceGet(AccountsBalanceGetRequest accountsBalanceGetRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieve real-time balance data
        /// </summary>
        /// <remarks>
        /// The &#x60;/accounts/balance/get&#x60; endpoint returns the real-time balance for each of an Item&#39;s accounts. While other endpoints may return a balance object, only &#x60;/accounts/balance/get&#x60; forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, &#x60;balance&#x60; itself is not a product that can be used to initialize Link.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountsBalanceGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountsGetResponse</returns>
        ApiResponse<AccountsGetResponse> AccountsBalanceGetWithHttpInfo(AccountsBalanceGetRequest accountsBalanceGetRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieve accounts
        /// </summary>
        /// <remarks>
        /// The &#x60;/accounts/get&#x60; endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance.  This endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [&#x60;NEW_ACCOUNTS_AVAILABLE&#x60;](https://plaid.com/docs/api/webhooks/#item-new_accounts_available) webhook and then use Link&#39;s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use &#x60;/accounts/balance/get&#x60; instead. Note that some information is nullable.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountsGetResponse</returns>
        AccountsGetResponse AccountsGet(AccountsGetRequest accountsGetRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieve accounts
        /// </summary>
        /// <remarks>
        /// The &#x60;/accounts/get&#x60; endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance.  This endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [&#x60;NEW_ACCOUNTS_AVAILABLE&#x60;](https://plaid.com/docs/api/webhooks/#item-new_accounts_available) webhook and then use Link&#39;s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use &#x60;/accounts/balance/get&#x60; instead. Note that some information is nullable.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountsGetResponse</returns>
        ApiResponse<AccountsGetResponse> AccountsGetWithHttpInfo(AccountsGetRequest accountsGetRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieve information about a Plaid application
        /// </summary>
        /// <remarks>
        /// Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationGetResponse</returns>
        ApplicationGetResponse ApplicationGet(ApplicationGetRequest applicationGetRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieve information about a Plaid application
        /// </summary>
        /// <remarks>
        /// Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationGetResponse</returns>
        ApiResponse<ApplicationGetResponse> ApplicationGetWithHttpInfo(ApplicationGetRequest applicationGetRequest, int operationIndex = 0);
        /// <summary>
        /// Create Asset Report Audit Copy
        /// </summary>
        /// <remarks>
        /// Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the &#x60;/asset_report/audit_copy/create&#x60; endpoint to create an &#x60;audit_copy_token&#x60; and then pass that token to the third party who needs access. Each third party has its own &#x60;auditor_id&#x60;, for example &#x60;fannie_mae&#x60;. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportAuditCopyCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssetReportAuditCopyCreateResponse</returns>
        AssetReportAuditCopyCreateResponse AssetReportAuditCopyCreate(AssetReportAuditCopyCreateRequest assetReportAuditCopyCreateRequest, int operationIndex = 0);

        /// <summary>
        /// Create Asset Report Audit Copy
        /// </summary>
        /// <remarks>
        /// Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the &#x60;/asset_report/audit_copy/create&#x60; endpoint to create an &#x60;audit_copy_token&#x60; and then pass that token to the third party who needs access. Each third party has its own &#x60;auditor_id&#x60;, for example &#x60;fannie_mae&#x60;. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportAuditCopyCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssetReportAuditCopyCreateResponse</returns>
        ApiResponse<AssetReportAuditCopyCreateResponse> AssetReportAuditCopyCreateWithHttpInfo(AssetReportAuditCopyCreateRequest assetReportAuditCopyCreateRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieve an Asset Report Audit Copy
        /// </summary>
        /// <remarks>
        /// &#x60;/asset_report/audit_copy/get&#x60; allows auditors to get a copy of an Asset Report that was previously shared via the &#x60;/asset_report/audit_copy/create&#x60; endpoint.  The caller of &#x60;/asset_report/audit_copy/create&#x60; must provide the &#x60;audit_copy_token&#x60; to the auditor.  This token can then be used to call &#x60;/asset_report/audit_copy/create&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportAuditCopyGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssetReportGetResponse</returns>
        AssetReportGetResponse AssetReportAuditCopyGet(AssetReportAuditCopyGetRequest assetReportAuditCopyGetRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieve an Asset Report Audit Copy
        /// </summary>
        /// <remarks>
        /// &#x60;/asset_report/audit_copy/get&#x60; allows auditors to get a copy of an Asset Report that was previously shared via the &#x60;/asset_report/audit_copy/create&#x60; endpoint.  The caller of &#x60;/asset_report/audit_copy/create&#x60; must provide the &#x60;audit_copy_token&#x60; to the auditor.  This token can then be used to call &#x60;/asset_report/audit_copy/create&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportAuditCopyGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssetReportGetResponse</returns>
        ApiResponse<AssetReportGetResponse> AssetReportAuditCopyGetWithHttpInfo(AssetReportAuditCopyGetRequest assetReportAuditCopyGetRequest, int operationIndex = 0);
        /// <summary>
        /// Remove Asset Report Audit Copy
        /// </summary>
        /// <remarks>
        /// The &#x60;/asset_report/audit_copy/remove&#x60; endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the &#x60;audit_copy_token&#x60; associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportAuditCopyRemoveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssetReportAuditCopyRemoveResponse</returns>
        AssetReportAuditCopyRemoveResponse AssetReportAuditCopyRemove(AssetReportAuditCopyRemoveRequest assetReportAuditCopyRemoveRequest, int operationIndex = 0);

        /// <summary>
        /// Remove Asset Report Audit Copy
        /// </summary>
        /// <remarks>
        /// The &#x60;/asset_report/audit_copy/remove&#x60; endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the &#x60;audit_copy_token&#x60; associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportAuditCopyRemoveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssetReportAuditCopyRemoveResponse</returns>
        ApiResponse<AssetReportAuditCopyRemoveResponse> AssetReportAuditCopyRemoveWithHttpInfo(AssetReportAuditCopyRemoveRequest assetReportAuditCopyRemoveRequest, int operationIndex = 0);
        /// <summary>
        /// Create an Asset Report
        /// </summary>
        /// <remarks>
        /// The &#x60;/asset_report/create&#x60; endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the &#x60;asset_report_token&#x60; return value to the &#x60;/asset_report/get&#x60; or &#x60;/asset_report/pdf/get&#x60; endpoints.  The Asset Report takes some time to be created and is not available immediately after calling &#x60;/asset_report/create&#x60;. When the Asset Report is ready to be retrieved using &#x60;/asset_report/get&#x60; or &#x60;/asset_report/pdf/get&#x60;, Plaid will fire a &#x60;PRODUCT_READY&#x60; webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/webhooks/#assets-webhooks).  The &#x60;/asset_report/create&#x60; endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the &#x60;/asset_report/refresh&#x60; endpoint.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssetReportCreateResponse</returns>
        AssetReportCreateResponse AssetReportCreate(AssetReportCreateRequest assetReportCreateRequest, int operationIndex = 0);

        /// <summary>
        /// Create an Asset Report
        /// </summary>
        /// <remarks>
        /// The &#x60;/asset_report/create&#x60; endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the &#x60;asset_report_token&#x60; return value to the &#x60;/asset_report/get&#x60; or &#x60;/asset_report/pdf/get&#x60; endpoints.  The Asset Report takes some time to be created and is not available immediately after calling &#x60;/asset_report/create&#x60;. When the Asset Report is ready to be retrieved using &#x60;/asset_report/get&#x60; or &#x60;/asset_report/pdf/get&#x60;, Plaid will fire a &#x60;PRODUCT_READY&#x60; webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/webhooks/#assets-webhooks).  The &#x60;/asset_report/create&#x60; endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the &#x60;/asset_report/refresh&#x60; endpoint.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssetReportCreateResponse</returns>
        ApiResponse<AssetReportCreateResponse> AssetReportCreateWithHttpInfo(AssetReportCreateRequest assetReportCreateRequest, int operationIndex = 0);
        /// <summary>
        /// Filter Asset Report
        /// </summary>
        /// <remarks>
        /// By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the &#x60;/accounts/get&#x60; endpoint. To narrow an Asset Report to only a subset of accounts, use the &#x60;/asset_report/filter&#x60; endpoint.  To exclude certain Accounts from an Asset Report, first use the &#x60;/asset_report/create&#x60; endpoint to create the report, then send the &#x60;asset_report_token&#x60; along with a list of &#x60;account_ids&#x60; to exclude to the &#x60;/asset_report/filter&#x60; endpoint, to create a new Asset Report which contains only a subset of the original Asset Report&#39;s data.  Because Asset Reports are immutable, calling &#x60;/asset_report/filter&#x60; does not alter the original Asset Report in any way; rather, &#x60;/asset_report/filter&#x60; creates a new Asset Report with a new token and id. Asset Reports created via &#x60;/asset_report/filter&#x60; do not contain new Asset data, and are not billed.  Plaid will fire a [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/webhooks) webhook once generation of the filtered Asset Report has completed.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportFilterRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssetReportFilterResponse</returns>
        AssetReportFilterResponse AssetReportFilter(AssetReportFilterRequest assetReportFilterRequest, int operationIndex = 0);

        /// <summary>
        /// Filter Asset Report
        /// </summary>
        /// <remarks>
        /// By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the &#x60;/accounts/get&#x60; endpoint. To narrow an Asset Report to only a subset of accounts, use the &#x60;/asset_report/filter&#x60; endpoint.  To exclude certain Accounts from an Asset Report, first use the &#x60;/asset_report/create&#x60; endpoint to create the report, then send the &#x60;asset_report_token&#x60; along with a list of &#x60;account_ids&#x60; to exclude to the &#x60;/asset_report/filter&#x60; endpoint, to create a new Asset Report which contains only a subset of the original Asset Report&#39;s data.  Because Asset Reports are immutable, calling &#x60;/asset_report/filter&#x60; does not alter the original Asset Report in any way; rather, &#x60;/asset_report/filter&#x60; creates a new Asset Report with a new token and id. Asset Reports created via &#x60;/asset_report/filter&#x60; do not contain new Asset data, and are not billed.  Plaid will fire a [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/webhooks) webhook once generation of the filtered Asset Report has completed.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportFilterRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssetReportFilterResponse</returns>
        ApiResponse<AssetReportFilterResponse> AssetReportFilterWithHttpInfo(AssetReportFilterRequest assetReportFilterRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieve an Asset Report
        /// </summary>
        /// <remarks>
        /// The &#x60;/asset_report/get&#x60; endpoint retrieves the Asset Report in JSON format. Before calling &#x60;/asset_report/get&#x60;, you must first create the Asset Report using &#x60;/asset_report/create&#x60; (or filter an Asset Report using &#x60;/asset_report/filter&#x60;) and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.  To retrieve an Asset Report with Insights, call the &#x60;/asset_report/get&#x60; endpoint with &#x60;include_insights&#x60; set to &#x60;true&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssetReportGetResponse</returns>
        AssetReportGetResponse AssetReportGet(AssetReportGetRequest assetReportGetRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieve an Asset Report
        /// </summary>
        /// <remarks>
        /// The &#x60;/asset_report/get&#x60; endpoint retrieves the Asset Report in JSON format. Before calling &#x60;/asset_report/get&#x60;, you must first create the Asset Report using &#x60;/asset_report/create&#x60; (or filter an Asset Report using &#x60;/asset_report/filter&#x60;) and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.  To retrieve an Asset Report with Insights, call the &#x60;/asset_report/get&#x60; endpoint with &#x60;include_insights&#x60; set to &#x60;true&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssetReportGetResponse</returns>
        ApiResponse<AssetReportGetResponse> AssetReportGetWithHttpInfo(AssetReportGetRequest assetReportGetRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieve a PDF Asset Report
        /// </summary>
        /// <remarks>
        /// The &#x60;/asset_report/pdf/get&#x60; endpoint retrieves the Asset Report in PDF format. Before calling &#x60;/asset_report/pdf/get&#x60;, you must first create the Asset Report using &#x60;/asset_report/create&#x60; (or filter an Asset Report using &#x60;/asset_report/filter&#x60;) and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  The response to &#x60;/asset_report/pdf/get&#x60; is the PDF binary data. The &#x60;request_id&#x60;  is returned in the &#x60;Plaid-Request-ID&#x60; header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportPDFGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream AssetReportPdfGet(AssetReportPDFGetRequest assetReportPDFGetRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieve a PDF Asset Report
        /// </summary>
        /// <remarks>
        /// The &#x60;/asset_report/pdf/get&#x60; endpoint retrieves the Asset Report in PDF format. Before calling &#x60;/asset_report/pdf/get&#x60;, you must first create the Asset Report using &#x60;/asset_report/create&#x60; (or filter an Asset Report using &#x60;/asset_report/filter&#x60;) and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  The response to &#x60;/asset_report/pdf/get&#x60; is the PDF binary data. The &#x60;request_id&#x60;  is returned in the &#x60;Plaid-Request-ID&#x60; header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportPDFGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> AssetReportPdfGetWithHttpInfo(AssetReportPDFGetRequest assetReportPDFGetRequest, int operationIndex = 0);
        /// <summary>
        /// Refresh an Asset Report
        /// </summary>
        /// <remarks>
        /// An Asset Report is an immutable snapshot of a user&#39;s assets. In order to \&quot;refresh\&quot; an Asset Report you created previously, you can use the &#x60;/asset_report/refresh&#x60; endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to &#x60;/asset_report/filter&#x60;. By default, the new Asset Report will also use the same parameters you submitted with your original &#x60;/asset_report/create&#x60; request, but the original &#x60;days_requested&#x60; value and the values of any parameters in the &#x60;options&#x60; object can be overridden with new values. To change these arguments, simply supply new values for them in your request to &#x60;/asset_report/refresh&#x60;. Submit an empty string (\&quot;\&quot;) for any previously-populated fields you would like set as empty.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportRefreshRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssetReportRefreshResponse</returns>
        AssetReportRefreshResponse AssetReportRefresh(AssetReportRefreshRequest assetReportRefreshRequest, int operationIndex = 0);

        /// <summary>
        /// Refresh an Asset Report
        /// </summary>
        /// <remarks>
        /// An Asset Report is an immutable snapshot of a user&#39;s assets. In order to \&quot;refresh\&quot; an Asset Report you created previously, you can use the &#x60;/asset_report/refresh&#x60; endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to &#x60;/asset_report/filter&#x60;. By default, the new Asset Report will also use the same parameters you submitted with your original &#x60;/asset_report/create&#x60; request, but the original &#x60;days_requested&#x60; value and the values of any parameters in the &#x60;options&#x60; object can be overridden with new values. To change these arguments, simply supply new values for them in your request to &#x60;/asset_report/refresh&#x60;. Submit an empty string (\&quot;\&quot;) for any previously-populated fields you would like set as empty.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportRefreshRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssetReportRefreshResponse</returns>
        ApiResponse<AssetReportRefreshResponse> AssetReportRefreshWithHttpInfo(AssetReportRefreshRequest assetReportRefreshRequest, int operationIndex = 0);
        /// <summary>
        /// Delete an Asset Report
        /// </summary>
        /// <remarks>
        /// The &#x60;/item/remove&#x60; endpoint allows you to invalidate an &#x60;access_token&#x60;, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The &#x60;/asset_report/remove&#x60; endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its &#x60;asset_report_token&#x60;, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any &#x60;audit_copy_tokens&#x60; associated with the Asset Report.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportRemoveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssetReportRemoveResponse</returns>
        AssetReportRemoveResponse AssetReportRemove(AssetReportRemoveRequest assetReportRemoveRequest, int operationIndex = 0);

        /// <summary>
        /// Delete an Asset Report
        /// </summary>
        /// <remarks>
        /// The &#x60;/item/remove&#x60; endpoint allows you to invalidate an &#x60;access_token&#x60;, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The &#x60;/asset_report/remove&#x60; endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its &#x60;asset_report_token&#x60;, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any &#x60;audit_copy_tokens&#x60; associated with the Asset Report.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportRemoveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssetReportRemoveResponse</returns>
        ApiResponse<AssetReportRemoveResponse> AssetReportRemoveWithHttpInfo(AssetReportRemoveRequest assetReportRemoveRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieve auth data
        /// </summary>
        /// <remarks>
        /// The &#x60;/auth/get&#x60; endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item&#39;s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if &#x60;auth&#x60; was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Also note that &#x60;/auth/get&#x60; will not return data for any new accounts opened after the Item was created. To obtain data for new accounts, create a new Item.  Versioning note: In API version 2017-03-08, the schema of the &#x60;numbers&#x60; object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AuthGetResponse</returns>
        AuthGetResponse AuthGet(AuthGetRequest authGetRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieve auth data
        /// </summary>
        /// <remarks>
        /// The &#x60;/auth/get&#x60; endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item&#39;s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if &#x60;auth&#x60; was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Also note that &#x60;/auth/get&#x60; will not return data for any new accounts opened after the Item was created. To obtain data for new accounts, create a new Item.  Versioning note: In API version 2017-03-08, the schema of the &#x60;numbers&#x60; object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AuthGetResponse</returns>
        ApiResponse<AuthGetResponse> AuthGetWithHttpInfo(AuthGetRequest authGetRequest, int operationIndex = 0);
        /// <summary>
        /// Get balance of your Bank Transfer account
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/bank_transfer/balance/get&#x60; endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferBalanceGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransferBalanceGetResponse</returns>
        BankTransferBalanceGetResponse BankTransferBalanceGet(BankTransferBalanceGetRequest bankTransferBalanceGetRequest, int operationIndex = 0);

        /// <summary>
        /// Get balance of your Bank Transfer account
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/bank_transfer/balance/get&#x60; endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferBalanceGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransferBalanceGetResponse</returns>
        ApiResponse<BankTransferBalanceGetResponse> BankTransferBalanceGetWithHttpInfo(BankTransferBalanceGetRequest bankTransferBalanceGetRequest, int operationIndex = 0);
        /// <summary>
        /// Cancel a bank transfer
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/bank_transfer/cancel&#x60; endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the &#x60;cancellable&#x60; property returned by &#x60;/bank_transfer/get&#x60; is &#x60;true&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferCancelRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransferCancelResponse</returns>
        BankTransferCancelResponse BankTransferCancel(BankTransferCancelRequest bankTransferCancelRequest, int operationIndex = 0);

        /// <summary>
        /// Cancel a bank transfer
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/bank_transfer/cancel&#x60; endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the &#x60;cancellable&#x60; property returned by &#x60;/bank_transfer/get&#x60; is &#x60;true&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferCancelRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransferCancelResponse</returns>
        ApiResponse<BankTransferCancelResponse> BankTransferCancelWithHttpInfo(BankTransferCancelRequest bankTransferCancelRequest, int operationIndex = 0);
        /// <summary>
        /// Create a bank transfer
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/bank_transfer/create&#x60; endpoint to initiate a new bank transfer.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransferCreateResponse</returns>
        BankTransferCreateResponse BankTransferCreate(BankTransferCreateRequest bankTransferCreateRequest, int operationIndex = 0);

        /// <summary>
        /// Create a bank transfer
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/bank_transfer/create&#x60; endpoint to initiate a new bank transfer.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransferCreateResponse</returns>
        ApiResponse<BankTransferCreateResponse> BankTransferCreateWithHttpInfo(BankTransferCreateRequest bankTransferCreateRequest, int operationIndex = 0);
        /// <summary>
        /// List bank transfer events
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/bank_transfer/event/list&#x60; endpoint to get a list of bank transfer events based on specified filter criteria.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferEventListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransferEventListResponse</returns>
        BankTransferEventListResponse BankTransferEventList(BankTransferEventListRequest bankTransferEventListRequest, int operationIndex = 0);

        /// <summary>
        /// List bank transfer events
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/bank_transfer/event/list&#x60; endpoint to get a list of bank transfer events based on specified filter criteria.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferEventListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransferEventListResponse</returns>
        ApiResponse<BankTransferEventListResponse> BankTransferEventListWithHttpInfo(BankTransferEventListRequest bankTransferEventListRequest, int operationIndex = 0);
        /// <summary>
        /// Sync bank transfer events
        /// </summary>
        /// <remarks>
        /// &#x60;/bank_transfer/event/sync&#x60; allows you to request up to the next 25 bank transfer events that happened after a specific &#x60;event_id&#x60;. Use the &#x60;/bank_transfer/event/sync&#x60; endpoint to guarantee you have seen all bank transfer events.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferEventSyncRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransferEventSyncResponse</returns>
        BankTransferEventSyncResponse BankTransferEventSync(BankTransferEventSyncRequest bankTransferEventSyncRequest, int operationIndex = 0);

        /// <summary>
        /// Sync bank transfer events
        /// </summary>
        /// <remarks>
        /// &#x60;/bank_transfer/event/sync&#x60; allows you to request up to the next 25 bank transfer events that happened after a specific &#x60;event_id&#x60;. Use the &#x60;/bank_transfer/event/sync&#x60; endpoint to guarantee you have seen all bank transfer events.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferEventSyncRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransferEventSyncResponse</returns>
        ApiResponse<BankTransferEventSyncResponse> BankTransferEventSyncWithHttpInfo(BankTransferEventSyncRequest bankTransferEventSyncRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieve a bank transfer
        /// </summary>
        /// <remarks>
        /// The &#x60;/bank_transfer/get&#x60; fetches information about the bank transfer corresponding to the given &#x60;bank_transfer_id&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransferGetResponse</returns>
        BankTransferGetResponse BankTransferGet(BankTransferGetRequest bankTransferGetRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieve a bank transfer
        /// </summary>
        /// <remarks>
        /// The &#x60;/bank_transfer/get&#x60; fetches information about the bank transfer corresponding to the given &#x60;bank_transfer_id&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransferGetResponse</returns>
        ApiResponse<BankTransferGetResponse> BankTransferGetWithHttpInfo(BankTransferGetRequest bankTransferGetRequest, int operationIndex = 0);
        /// <summary>
        /// List bank transfers
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/bank_transfer/list&#x60; endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired bank transfers. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransferListResponse</returns>
        BankTransferListResponse BankTransferList(BankTransferListRequest bankTransferListRequest, int operationIndex = 0);

        /// <summary>
        /// List bank transfers
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/bank_transfer/list&#x60; endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired bank transfers. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransferListResponse</returns>
        ApiResponse<BankTransferListResponse> BankTransferListWithHttpInfo(BankTransferListRequest bankTransferListRequest, int operationIndex = 0);
        /// <summary>
        /// Migrate account into Bank Transfers
        /// </summary>
        /// <remarks>
        /// As an alternative to adding Items via Link, you can also use the &#x60;/bank_transfer/migrate_account&#x60; endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as &#x60;/accounts/balance/get&#x60;, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to &#x60;/bank_transfer/migrate_account&#x60; is not enabled by default; to obtain access, contact your Plaid Account Manager.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferMigrateAccountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransferMigrateAccountResponse</returns>
        BankTransferMigrateAccountResponse BankTransferMigrateAccount(BankTransferMigrateAccountRequest bankTransferMigrateAccountRequest, int operationIndex = 0);

        /// <summary>
        /// Migrate account into Bank Transfers
        /// </summary>
        /// <remarks>
        /// As an alternative to adding Items via Link, you can also use the &#x60;/bank_transfer/migrate_account&#x60; endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as &#x60;/accounts/balance/get&#x60;, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to &#x60;/bank_transfer/migrate_account&#x60; is not enabled by default; to obtain access, contact your Plaid Account Manager.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferMigrateAccountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransferMigrateAccountResponse</returns>
        ApiResponse<BankTransferMigrateAccountResponse> BankTransferMigrateAccountWithHttpInfo(BankTransferMigrateAccountRequest bankTransferMigrateAccountRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieve a sweep
        /// </summary>
        /// <remarks>
        /// The &#x60;/bank_transfer/sweep/get&#x60; endpoint fetches information about the sweep corresponding to the given &#x60;sweep_id&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferSweepGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransferSweepGetResponse</returns>
        BankTransferSweepGetResponse BankTransferSweepGet(BankTransferSweepGetRequest bankTransferSweepGetRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieve a sweep
        /// </summary>
        /// <remarks>
        /// The &#x60;/bank_transfer/sweep/get&#x60; endpoint fetches information about the sweep corresponding to the given &#x60;sweep_id&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferSweepGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransferSweepGetResponse</returns>
        ApiResponse<BankTransferSweepGetResponse> BankTransferSweepGetWithHttpInfo(BankTransferSweepGetRequest bankTransferSweepGetRequest, int operationIndex = 0);
        /// <summary>
        /// List sweeps
        /// </summary>
        /// <remarks>
        /// The &#x60;/bank_transfer/sweep/list&#x60; endpoint fetches information about the sweeps matching the given filters.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferSweepListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransferSweepListResponse</returns>
        BankTransferSweepListResponse BankTransferSweepList(BankTransferSweepListRequest bankTransferSweepListRequest, int operationIndex = 0);

        /// <summary>
        /// List sweeps
        /// </summary>
        /// <remarks>
        /// The &#x60;/bank_transfer/sweep/list&#x60; endpoint fetches information about the sweeps matching the given filters.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferSweepListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransferSweepListResponse</returns>
        ApiResponse<BankTransferSweepListResponse> BankTransferSweepListWithHttpInfo(BankTransferSweepListRequest bankTransferSweepListRequest, int operationIndex = 0);
        /// <summary>
        /// Get Categories
        /// </summary>
        /// <remarks>
        /// Send a request to the &#x60;/categories/get&#x60; endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoriesGetResponse</returns>
        CategoriesGetResponse CategoriesGet(Object body, int operationIndex = 0);

        /// <summary>
        /// Get Categories
        /// </summary>
        /// <remarks>
        /// Send a request to the &#x60;/categories/get&#x60; endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoriesGetResponse</returns>
        ApiResponse<CategoriesGetResponse> CategoriesGetWithHttpInfo(Object body, int operationIndex = 0);
        /// <summary>
        /// Create payment token
        /// </summary>
        /// <remarks>
        /// The &#x60;/payment_initiation/payment/token/create&#x60; endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, &#x60;link_token&#x60;-based flow. The recommended flow is to provide the &#x60;payment_id&#x60; to &#x60;/link/token/create&#x60;, which returns a &#x60;link_token&#x60; used to initialize Link.  The &#x60;/payment_initiation/payment/token/create&#x60; is used to create a &#x60;payment_token&#x60;, which can then be used in Link initialization to enter a payment initiation flow. You can only use a &#x60;payment_token&#x60; once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentInitiationPaymentTokenCreateResponse</returns>
        [Obsolete]
        PaymentInitiationPaymentTokenCreateResponse CreatePaymentToken(PaymentInitiationPaymentTokenCreateRequest paymentInitiationPaymentTokenCreateRequest, int operationIndex = 0);

        /// <summary>
        /// Create payment token
        /// </summary>
        /// <remarks>
        /// The &#x60;/payment_initiation/payment/token/create&#x60; endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, &#x60;link_token&#x60;-based flow. The recommended flow is to provide the &#x60;payment_id&#x60; to &#x60;/link/token/create&#x60;, which returns a &#x60;link_token&#x60; used to initialize Link.  The &#x60;/payment_initiation/payment/token/create&#x60; is used to create a &#x60;payment_token&#x60;, which can then be used in Link initialization to enter a payment initiation flow. You can only use a &#x60;payment_token&#x60; once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentInitiationPaymentTokenCreateResponse</returns>
        [Obsolete]
        ApiResponse<PaymentInitiationPaymentTokenCreateResponse> CreatePaymentTokenWithHttpInfo(PaymentInitiationPaymentTokenCreateRequest paymentInitiationPaymentTokenCreateRequest, int operationIndex = 0);
        /// <summary>
        /// Create a deposit switch without using Plaid Exchange
        /// </summary>
        /// <remarks>
        /// This endpoint provides an alternative to &#x60;/deposit_switch/create&#x60; for customers who have not yet fully integrated with Plaid Exchange. Like &#x60;/deposit_switch/create&#x60;, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositSwitchAltCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DepositSwitchAltCreateResponse</returns>
        DepositSwitchAltCreateResponse DepositSwitchAltCreate(DepositSwitchAltCreateRequest depositSwitchAltCreateRequest, int operationIndex = 0);

        /// <summary>
        /// Create a deposit switch without using Plaid Exchange
        /// </summary>
        /// <remarks>
        /// This endpoint provides an alternative to &#x60;/deposit_switch/create&#x60; for customers who have not yet fully integrated with Plaid Exchange. Like &#x60;/deposit_switch/create&#x60;, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositSwitchAltCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DepositSwitchAltCreateResponse</returns>
        ApiResponse<DepositSwitchAltCreateResponse> DepositSwitchAltCreateWithHttpInfo(DepositSwitchAltCreateRequest depositSwitchAltCreateRequest, int operationIndex = 0);
        /// <summary>
        /// Create a deposit switch
        /// </summary>
        /// <remarks>
        /// This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositSwitchCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DepositSwitchCreateResponse</returns>
        DepositSwitchCreateResponse DepositSwitchCreate(DepositSwitchCreateRequest depositSwitchCreateRequest, int operationIndex = 0);

        /// <summary>
        /// Create a deposit switch
        /// </summary>
        /// <remarks>
        /// This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositSwitchCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DepositSwitchCreateResponse</returns>
        ApiResponse<DepositSwitchCreateResponse> DepositSwitchCreateWithHttpInfo(DepositSwitchCreateRequest depositSwitchCreateRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieve a deposit switch
        /// </summary>
        /// <remarks>
        /// This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user&#39;s direct deposit allocation preferences.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositSwitchGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DepositSwitchGetResponse</returns>
        DepositSwitchGetResponse DepositSwitchGet(DepositSwitchGetRequest depositSwitchGetRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieve a deposit switch
        /// </summary>
        /// <remarks>
        /// This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user&#39;s direct deposit allocation preferences.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositSwitchGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DepositSwitchGetResponse</returns>
        ApiResponse<DepositSwitchGetResponse> DepositSwitchGetWithHttpInfo(DepositSwitchGetRequest depositSwitchGetRequest, int operationIndex = 0);
        /// <summary>
        /// Create a deposit switch token
        /// </summary>
        /// <remarks>
        /// In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositSwitchTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DepositSwitchTokenCreateResponse</returns>
        DepositSwitchTokenCreateResponse DepositSwitchTokenCreate(DepositSwitchTokenCreateRequest depositSwitchTokenCreateRequest, int operationIndex = 0);

        /// <summary>
        /// Create a deposit switch token
        /// </summary>
        /// <remarks>
        /// In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositSwitchTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DepositSwitchTokenCreateResponse</returns>
        ApiResponse<DepositSwitchTokenCreateResponse> DepositSwitchTokenCreateWithHttpInfo(DepositSwitchTokenCreateRequest depositSwitchTokenCreateRequest, int operationIndex = 0);
        /// <summary>
        /// Search employer database
        /// </summary>
        /// <remarks>
        /// &#x60;/employers/search&#x60; allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user&#39;s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employersSearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmployersSearchResponse</returns>
        EmployersSearchResponse EmployersSearch(EmployersSearchRequest employersSearchRequest, int operationIndex = 0);

        /// <summary>
        /// Search employer database
        /// </summary>
        /// <remarks>
        /// &#x60;/employers/search&#x60; allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user&#39;s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employersSearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmployersSearchResponse</returns>
        ApiResponse<EmployersSearchResponse> EmployersSearchWithHttpInfo(EmployersSearchRequest employersSearchRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieve a summary of an individual&#39;s employment information
        /// </summary>
        /// <remarks>
        /// &#x60;/employment/verification/get&#x60; returns a list of employments through a user payroll that was verified by an end user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentVerificationGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmploymentVerificationGetResponse</returns>
        EmploymentVerificationGetResponse EmploymentVerificationGet(EmploymentVerificationGetRequest employmentVerificationGetRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieve a summary of an individual&#39;s employment information
        /// </summary>
        /// <remarks>
        /// &#x60;/employment/verification/get&#x60; returns a list of employments through a user payroll that was verified by an end user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentVerificationGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmploymentVerificationGetResponse</returns>
        ApiResponse<EmploymentVerificationGetResponse> EmploymentVerificationGetWithHttpInfo(EmploymentVerificationGetRequest employmentVerificationGetRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieve identity data
        /// </summary>
        /// <remarks>
        /// The &#x60;/identity/get&#x60; endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  Note: This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IdentityGetResponse</returns>
        IdentityGetResponse IdentityGet(IdentityGetRequest identityGetRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieve identity data
        /// </summary>
        /// <remarks>
        /// The &#x60;/identity/get&#x60; endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  Note: This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IdentityGetResponse</returns>
        ApiResponse<IdentityGetResponse> IdentityGetWithHttpInfo(IdentityGetRequest identityGetRequest, int operationIndex = 0);
        /// <summary>
        /// (Deprecated) Create an income verification instance
        /// </summary>
        /// <remarks>
        /// &#x60;/income/verification/create&#x60; begins the income verification process by returning an &#x60;income_verification_id&#x60;. You can then provide the &#x60;income_verification_id&#x60; to &#x60;/link/token/create&#x60; under the &#x60;income_verification&#x60; parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an &#x60;INCOME&#x60; webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IncomeVerificationCreateResponse</returns>
        [Obsolete]
        IncomeVerificationCreateResponse IncomeVerificationCreate(IncomeVerificationCreateRequest incomeVerificationCreateRequest, int operationIndex = 0);

        /// <summary>
        /// (Deprecated) Create an income verification instance
        /// </summary>
        /// <remarks>
        /// &#x60;/income/verification/create&#x60; begins the income verification process by returning an &#x60;income_verification_id&#x60;. You can then provide the &#x60;income_verification_id&#x60; to &#x60;/link/token/create&#x60; under the &#x60;income_verification&#x60; parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an &#x60;INCOME&#x60; webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IncomeVerificationCreateResponse</returns>
        [Obsolete]
        ApiResponse<IncomeVerificationCreateResponse> IncomeVerificationCreateWithHttpInfo(IncomeVerificationCreateRequest incomeVerificationCreateRequest, int operationIndex = 0);
        /// <summary>
        /// Download the original documents used for income verification
        /// </summary>
        /// <remarks>
        /// &#x60;/income/verification/documents/download&#x60; provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to &#x60;/income/verification/documents/download&#x60; is a ZIP file in binary data. If a &#x60;document_id&#x60; is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The &#x60;request_id&#x60; is returned in the &#x60;Plaid-Request-ID&#x60; header.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationDocumentsDownloadRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream IncomeVerificationDocumentsDownload(IncomeVerificationDocumentsDownloadRequest incomeVerificationDocumentsDownloadRequest, int operationIndex = 0);

        /// <summary>
        /// Download the original documents used for income verification
        /// </summary>
        /// <remarks>
        /// &#x60;/income/verification/documents/download&#x60; provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to &#x60;/income/verification/documents/download&#x60; is a ZIP file in binary data. If a &#x60;document_id&#x60; is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The &#x60;request_id&#x60; is returned in the &#x60;Plaid-Request-ID&#x60; header.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationDocumentsDownloadRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> IncomeVerificationDocumentsDownloadWithHttpInfo(IncomeVerificationDocumentsDownloadRequest incomeVerificationDocumentsDownloadRequest, int operationIndex = 0);
        /// <summary>
        /// (Deprecated) Retrieve information from a single paystub used for income verification
        /// </summary>
        /// <remarks>
        /// /income/verification/paystub/get returns information from a single paystub used for income verification
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationPaystubGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IncomeVerificationPaystubGetResponse</returns>
        [Obsolete]
        IncomeVerificationPaystubGetResponse IncomeVerificationPaystubGet(IncomeVerificationPaystubGetRequest incomeVerificationPaystubGetRequest, int operationIndex = 0);

        /// <summary>
        /// (Deprecated) Retrieve information from a single paystub used for income verification
        /// </summary>
        /// <remarks>
        /// /income/verification/paystub/get returns information from a single paystub used for income verification
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationPaystubGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IncomeVerificationPaystubGetResponse</returns>
        [Obsolete]
        ApiResponse<IncomeVerificationPaystubGetResponse> IncomeVerificationPaystubGetWithHttpInfo(IncomeVerificationPaystubGetRequest incomeVerificationPaystubGetRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieve information from the paystubs used for income verification
        /// </summary>
        /// <remarks>
        /// &#x60;/income/verification/paystubs/get&#x60; returns the information collected from the paystubs that were used to verify an end user&#39;s income. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationPaystubsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IncomeVerificationPaystubsGetResponse</returns>
        IncomeVerificationPaystubsGetResponse IncomeVerificationPaystubsGet(IncomeVerificationPaystubsGetRequest incomeVerificationPaystubsGetRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieve information from the paystubs used for income verification
        /// </summary>
        /// <remarks>
        /// &#x60;/income/verification/paystubs/get&#x60; returns the information collected from the paystubs that were used to verify an end user&#39;s income. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationPaystubsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IncomeVerificationPaystubsGetResponse</returns>
        ApiResponse<IncomeVerificationPaystubsGetResponse> IncomeVerificationPaystubsGetWithHttpInfo(IncomeVerificationPaystubsGetRequest incomeVerificationPaystubsGetRequest, int operationIndex = 0);
        /// <summary>
        /// Check digital income verification eligibility and optimize conversion
        /// </summary>
        /// <remarks>
        /// &#x60;/income/verification/precheck&#x60; is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a &#x60;precheck_id&#x60; that can be provided to &#x60;/link/token/create&#x60;. If the user is eligible for digital verification, providing the &#x60;precheck_id&#x60; in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the &#x60;precheck_id&#x60; can still be provided to &#x60;/link/token/create&#x60; and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either &#x60;employer&#x60; or &#x60;transactions_access_tokens&#x60; data will increase the chance of receiving a useful result.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationPrecheckRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IncomeVerificationPrecheckResponse</returns>
        IncomeVerificationPrecheckResponse IncomeVerificationPrecheck(IncomeVerificationPrecheckRequest incomeVerificationPrecheckRequest, int operationIndex = 0);

        /// <summary>
        /// Check digital income verification eligibility and optimize conversion
        /// </summary>
        /// <remarks>
        /// &#x60;/income/verification/precheck&#x60; is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a &#x60;precheck_id&#x60; that can be provided to &#x60;/link/token/create&#x60;. If the user is eligible for digital verification, providing the &#x60;precheck_id&#x60; in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the &#x60;precheck_id&#x60; can still be provided to &#x60;/link/token/create&#x60; and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either &#x60;employer&#x60; or &#x60;transactions_access_tokens&#x60; data will increase the chance of receiving a useful result.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationPrecheckRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IncomeVerificationPrecheckResponse</returns>
        ApiResponse<IncomeVerificationPrecheckResponse> IncomeVerificationPrecheckWithHttpInfo(IncomeVerificationPrecheckRequest incomeVerificationPrecheckRequest, int operationIndex = 0);
        /// <summary>
        /// Refresh an income verification
        /// </summary>
        /// <remarks>
        /// &#x60;/income/verification/refresh&#x60; refreshes a given income verification.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationRefreshRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IncomeVerificationRefreshResponse</returns>
        IncomeVerificationRefreshResponse IncomeVerificationRefresh(IncomeVerificationRefreshRequest incomeVerificationRefreshRequest, int operationIndex = 0);

        /// <summary>
        /// Refresh an income verification
        /// </summary>
        /// <remarks>
        /// &#x60;/income/verification/refresh&#x60; refreshes a given income verification.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationRefreshRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IncomeVerificationRefreshResponse</returns>
        ApiResponse<IncomeVerificationRefreshResponse> IncomeVerificationRefreshWithHttpInfo(IncomeVerificationRefreshRequest incomeVerificationRefreshRequest, int operationIndex = 0);
        /// <summary>
        /// (Deprecated) Retrieve a summary of information derived from income verification
        /// </summary>
        /// <remarks>
        /// &#x60;/income/verification/summary/get&#x60; returns a verification summary for the income that was verified for an end user. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationSummaryGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IncomeVerificationSummaryGetResponse</returns>
        IncomeVerificationSummaryGetResponse IncomeVerificationSummaryGet(IncomeVerificationSummaryGetRequest incomeVerificationSummaryGetRequest, int operationIndex = 0);

        /// <summary>
        /// (Deprecated) Retrieve a summary of information derived from income verification
        /// </summary>
        /// <remarks>
        /// &#x60;/income/verification/summary/get&#x60; returns a verification summary for the income that was verified for an end user. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationSummaryGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IncomeVerificationSummaryGetResponse</returns>
        ApiResponse<IncomeVerificationSummaryGetResponse> IncomeVerificationSummaryGetWithHttpInfo(IncomeVerificationSummaryGetRequest incomeVerificationSummaryGetRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieve information from the tax documents used for income verification
        /// </summary>
        /// <remarks>
        /// &#x60;/income/verification/taxforms/get&#x60; returns the information collected from forms that were used to verify an end user&#39;s income. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IncomeVerificationTaxformsGetResponse</returns>
        IncomeVerificationTaxformsGetResponse IncomeVerificationTaxformsGet(Dictionary<string, Object> requestBody, int operationIndex = 0);

        /// <summary>
        /// Retrieve information from the tax documents used for income verification
        /// </summary>
        /// <remarks>
        /// &#x60;/income/verification/taxforms/get&#x60; returns the information collected from forms that were used to verify an end user&#39;s income. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IncomeVerificationTaxformsGetResponse</returns>
        ApiResponse<IncomeVerificationTaxformsGetResponse> IncomeVerificationTaxformsGetWithHttpInfo(Dictionary<string, Object> requestBody, int operationIndex = 0);
        /// <summary>
        /// Get details of all supported institutions
        /// </summary>
        /// <remarks>
        /// Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InstitutionsGetResponse</returns>
        InstitutionsGetResponse InstitutionsGet(InstitutionsGetRequest institutionsGetRequest, int operationIndex = 0);

        /// <summary>
        /// Get details of all supported institutions
        /// </summary>
        /// <remarks>
        /// Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InstitutionsGetResponse</returns>
        ApiResponse<InstitutionsGetResponse> InstitutionsGetWithHttpInfo(InstitutionsGetRequest institutionsGetRequest, int operationIndex = 0);
        /// <summary>
        /// Get details of an institution
        /// </summary>
        /// <remarks>
        /// Returns a JSON response containing details on a specified financial institution currently supported by Plaid.   Versioning note: API versions 2019-05-29 and earlier allow use of the &#x60;public_key&#x60; parameter instead of the &#x60;client_id&#x60; and &#x60;secret&#x60; to authenticate to this endpoint. The &#x60;public_key&#x60; has been deprecated; all customers are encouraged to use &#x60;client_id&#x60; and &#x60;secret&#x60; instead. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionsGetByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InstitutionsGetByIdResponse</returns>
        InstitutionsGetByIdResponse InstitutionsGetById(InstitutionsGetByIdRequest institutionsGetByIdRequest, int operationIndex = 0);

        /// <summary>
        /// Get details of an institution
        /// </summary>
        /// <remarks>
        /// Returns a JSON response containing details on a specified financial institution currently supported by Plaid.   Versioning note: API versions 2019-05-29 and earlier allow use of the &#x60;public_key&#x60; parameter instead of the &#x60;client_id&#x60; and &#x60;secret&#x60; to authenticate to this endpoint. The &#x60;public_key&#x60; has been deprecated; all customers are encouraged to use &#x60;client_id&#x60; and &#x60;secret&#x60; instead. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionsGetByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InstitutionsGetByIdResponse</returns>
        ApiResponse<InstitutionsGetByIdResponse> InstitutionsGetByIdWithHttpInfo(InstitutionsGetByIdRequest institutionsGetByIdRequest, int operationIndex = 0);
        /// <summary>
        /// Search institutions
        /// </summary>
        /// <remarks>
        /// Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the &#x60;public_key&#x60; parameter instead of the &#x60;client_id&#x60; and &#x60;secret&#x60; parameters to authenticate to this endpoint. The &#x60;public_key&#x60; parameter has since been deprecated; all customers are encouraged to use &#x60;client_id&#x60; and &#x60;secret&#x60; instead. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionsSearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InstitutionsSearchResponse</returns>
        InstitutionsSearchResponse InstitutionsSearch(InstitutionsSearchRequest institutionsSearchRequest, int operationIndex = 0);

        /// <summary>
        /// Search institutions
        /// </summary>
        /// <remarks>
        /// Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the &#x60;public_key&#x60; parameter instead of the &#x60;client_id&#x60; and &#x60;secret&#x60; parameters to authenticate to this endpoint. The &#x60;public_key&#x60; parameter has since been deprecated; all customers are encouraged to use &#x60;client_id&#x60; and &#x60;secret&#x60; instead. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionsSearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InstitutionsSearchResponse</returns>
        ApiResponse<InstitutionsSearchResponse> InstitutionsSearchWithHttpInfo(InstitutionsSearchRequest institutionsSearchRequest, int operationIndex = 0);
        /// <summary>
        /// Get Investment holdings
        /// </summary>
        /// <remarks>
        /// The &#x60;/investments/holdings/get&#x60; endpoint allows developers to receive user-authorized stock position data for &#x60;investment&#x60;-type accounts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investmentsHoldingsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InvestmentsHoldingsGetResponse</returns>
        InvestmentsHoldingsGetResponse InvestmentsHoldingsGet(InvestmentsHoldingsGetRequest investmentsHoldingsGetRequest, int operationIndex = 0);

        /// <summary>
        /// Get Investment holdings
        /// </summary>
        /// <remarks>
        /// The &#x60;/investments/holdings/get&#x60; endpoint allows developers to receive user-authorized stock position data for &#x60;investment&#x60;-type accounts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investmentsHoldingsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InvestmentsHoldingsGetResponse</returns>
        ApiResponse<InvestmentsHoldingsGetResponse> InvestmentsHoldingsGetWithHttpInfo(InvestmentsHoldingsGetRequest investmentsHoldingsGetRequest, int operationIndex = 0);
        /// <summary>
        /// Get investment transactions
        /// </summary>
        /// <remarks>
        /// The &#x60;/investments/transactions/get&#x60; endpoint allows developers to retrieve user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the &#x60;total_investment_transactions&#x60; response body field to fetch all available investment transactions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investmentsTransactionsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InvestmentsTransactionsGetResponse</returns>
        InvestmentsTransactionsGetResponse InvestmentsTransactionsGet(InvestmentsTransactionsGetRequest investmentsTransactionsGetRequest, int operationIndex = 0);

        /// <summary>
        /// Get investment transactions
        /// </summary>
        /// <remarks>
        /// The &#x60;/investments/transactions/get&#x60; endpoint allows developers to retrieve user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the &#x60;total_investment_transactions&#x60; response body field to fetch all available investment transactions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investmentsTransactionsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InvestmentsTransactionsGetResponse</returns>
        ApiResponse<InvestmentsTransactionsGetResponse> InvestmentsTransactionsGetWithHttpInfo(InvestmentsTransactionsGetRequest investmentsTransactionsGetRequest, int operationIndex = 0);
        /// <summary>
        /// Invalidate access_token
        /// </summary>
        /// <remarks>
        /// By default, the &#x60;access_token&#x60; associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the &#x60;/item/access_token/invalidate&#x60; endpoint to rotate the &#x60;access_token&#x60; associated with an Item. The endpoint returns a new &#x60;access_token&#x60; and immediately invalidates the previous &#x60;access_token&#x60;. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemAccessTokenInvalidateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ItemAccessTokenInvalidateResponse</returns>
        ItemAccessTokenInvalidateResponse ItemAccessTokenInvalidate(ItemAccessTokenInvalidateRequest itemAccessTokenInvalidateRequest, int operationIndex = 0);

        /// <summary>
        /// Invalidate access_token
        /// </summary>
        /// <remarks>
        /// By default, the &#x60;access_token&#x60; associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the &#x60;/item/access_token/invalidate&#x60; endpoint to rotate the &#x60;access_token&#x60; associated with an Item. The endpoint returns a new &#x60;access_token&#x60; and immediately invalidates the previous &#x60;access_token&#x60;. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemAccessTokenInvalidateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ItemAccessTokenInvalidateResponse</returns>
        ApiResponse<ItemAccessTokenInvalidateResponse> ItemAccessTokenInvalidateWithHttpInfo(ItemAccessTokenInvalidateRequest itemAccessTokenInvalidateRequest, int operationIndex = 0);
        /// <summary>
        /// List a user’s connected applications
        /// </summary>
        /// <remarks>
        /// List a user’s connected applications
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemApplicationListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ItemApplicationListResponse</returns>
        ItemApplicationListResponse ItemApplicationList(ItemApplicationListRequest itemApplicationListRequest, int operationIndex = 0);

        /// <summary>
        /// List a user’s connected applications
        /// </summary>
        /// <remarks>
        /// List a user’s connected applications
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemApplicationListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ItemApplicationListResponse</returns>
        ApiResponse<ItemApplicationListResponse> ItemApplicationListWithHttpInfo(ItemApplicationListRequest itemApplicationListRequest, int operationIndex = 0);
        /// <summary>
        /// Update the scopes of access for a particular application
        /// </summary>
        /// <remarks>
        /// Enable consumers to update product access on selected accounts for an application.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemApplicationScopesUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ItemApplicationScopesUpdateResponse</returns>
        ItemApplicationScopesUpdateResponse ItemApplicationScopesUpdate(ItemApplicationScopesUpdateRequest itemApplicationScopesUpdateRequest, int operationIndex = 0);

        /// <summary>
        /// Update the scopes of access for a particular application
        /// </summary>
        /// <remarks>
        /// Enable consumers to update product access on selected accounts for an application.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemApplicationScopesUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ItemApplicationScopesUpdateResponse</returns>
        ApiResponse<ItemApplicationScopesUpdateResponse> ItemApplicationScopesUpdateWithHttpInfo(ItemApplicationScopesUpdateRequest itemApplicationScopesUpdateRequest, int operationIndex = 0);
        /// <summary>
        /// Create public token
        /// </summary>
        /// <remarks>
        /// Note: As of July 2020, the &#x60;/item/public_token/create&#x60; endpoint is deprecated. Instead, use &#x60;/link/token/create&#x60; with an &#x60;access_token&#x60; to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the &#x60;/item/public_token/create&#x60; endpoint and then initialize Link with that &#x60;public_token&#x60;.  A &#x60;public_token&#x60; is one-time use and expires after 30 minutes. You use a &#x60;public_token&#x60; to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a &#x60;public_token&#x60; for an Item even if you did not use Link to create the Item originally.  The &#x60;/item/public_token/create&#x60; endpoint is **not** used to create your initial &#x60;public_token&#x60;. If you have not already received an &#x60;access_token&#x60; for a specific Item, use Link to obtain your &#x60;public_token&#x60; instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemPublicTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ItemPublicTokenCreateResponse</returns>
        ItemPublicTokenCreateResponse ItemCreatePublicToken(ItemPublicTokenCreateRequest itemPublicTokenCreateRequest, int operationIndex = 0);

        /// <summary>
        /// Create public token
        /// </summary>
        /// <remarks>
        /// Note: As of July 2020, the &#x60;/item/public_token/create&#x60; endpoint is deprecated. Instead, use &#x60;/link/token/create&#x60; with an &#x60;access_token&#x60; to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the &#x60;/item/public_token/create&#x60; endpoint and then initialize Link with that &#x60;public_token&#x60;.  A &#x60;public_token&#x60; is one-time use and expires after 30 minutes. You use a &#x60;public_token&#x60; to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a &#x60;public_token&#x60; for an Item even if you did not use Link to create the Item originally.  The &#x60;/item/public_token/create&#x60; endpoint is **not** used to create your initial &#x60;public_token&#x60;. If you have not already received an &#x60;access_token&#x60; for a specific Item, use Link to obtain your &#x60;public_token&#x60; instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemPublicTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ItemPublicTokenCreateResponse</returns>
        ApiResponse<ItemPublicTokenCreateResponse> ItemCreatePublicTokenWithHttpInfo(ItemPublicTokenCreateRequest itemPublicTokenCreateRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieve an Item
        /// </summary>
        /// <remarks>
        /// Returns information about the status of an Item.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ItemGetResponse</returns>
        ItemGetResponse ItemGet(ItemGetRequest itemGetRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieve an Item
        /// </summary>
        /// <remarks>
        /// Returns information about the status of an Item.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ItemGetResponse</returns>
        ApiResponse<ItemGetResponse> ItemGetWithHttpInfo(ItemGetRequest itemGetRequest, int operationIndex = 0);
        /// <summary>
        /// Import Item
        /// </summary>
        /// <remarks>
        /// &#x60;/item/import&#x60; creates an Item via your Plaid Exchange Integration and returns an &#x60;access_token&#x60;. As part of an &#x60;/item/import&#x60; request, you will include a User ID (&#x60;user_auth.user_id&#x60;) and Authentication Token (&#x60;user_auth.auth_token&#x60;) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via &#x60;/item/import&#x60;, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated. This will automatically generate the Plaid native account ID for the account the user will switch their direct deposit to (&#x60;target_account_id&#x60;).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemImportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ItemImportResponse</returns>
        ItemImportResponse ItemImport(ItemImportRequest itemImportRequest, int operationIndex = 0);

        /// <summary>
        /// Import Item
        /// </summary>
        /// <remarks>
        /// &#x60;/item/import&#x60; creates an Item via your Plaid Exchange Integration and returns an &#x60;access_token&#x60;. As part of an &#x60;/item/import&#x60; request, you will include a User ID (&#x60;user_auth.user_id&#x60;) and Authentication Token (&#x60;user_auth.auth_token&#x60;) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via &#x60;/item/import&#x60;, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated. This will automatically generate the Plaid native account ID for the account the user will switch their direct deposit to (&#x60;target_account_id&#x60;).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemImportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ItemImportResponse</returns>
        ApiResponse<ItemImportResponse> ItemImportWithHttpInfo(ItemImportRequest itemImportRequest, int operationIndex = 0);
        /// <summary>
        /// Exchange public token for an access token
        /// </summary>
        /// <remarks>
        /// Exchange a Link &#x60;public_token&#x60; for an API &#x60;access_token&#x60;. Link hands off the &#x60;public_token&#x60; client-side via the &#x60;onSuccess&#x60; callback once a user has successfully created an Item. The &#x60;public_token&#x60; is ephemeral and expires after 30 minutes.  The response also includes an &#x60;item_id&#x60; that should be stored with the &#x60;access_token&#x60;. The &#x60;item_id&#x60; is used to identify an Item in a webhook. The &#x60;item_id&#x60; can also be retrieved by making an &#x60;/item/get&#x60; request.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemPublicTokenExchangeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ItemPublicTokenExchangeResponse</returns>
        ItemPublicTokenExchangeResponse ItemPublicTokenExchange(ItemPublicTokenExchangeRequest itemPublicTokenExchangeRequest, int operationIndex = 0);

        /// <summary>
        /// Exchange public token for an access token
        /// </summary>
        /// <remarks>
        /// Exchange a Link &#x60;public_token&#x60; for an API &#x60;access_token&#x60;. Link hands off the &#x60;public_token&#x60; client-side via the &#x60;onSuccess&#x60; callback once a user has successfully created an Item. The &#x60;public_token&#x60; is ephemeral and expires after 30 minutes.  The response also includes an &#x60;item_id&#x60; that should be stored with the &#x60;access_token&#x60;. The &#x60;item_id&#x60; is used to identify an Item in a webhook. The &#x60;item_id&#x60; can also be retrieved by making an &#x60;/item/get&#x60; request.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemPublicTokenExchangeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ItemPublicTokenExchangeResponse</returns>
        ApiResponse<ItemPublicTokenExchangeResponse> ItemPublicTokenExchangeWithHttpInfo(ItemPublicTokenExchangeRequest itemPublicTokenExchangeRequest, int operationIndex = 0);
        /// <summary>
        /// Remove an Item
        /// </summary>
        /// <remarks>
        /// The &#x60;/item/remove&#x60;  endpoint allows you to remove an Item. Once removed, the &#x60;access_token&#x60;  associated with the Item is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an &#x60;/item/remove&#x60;  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via &#x60;/item/remove&#x60; may still show as an active connection in the institution&#39;s OAuth permission manager.  API versions 2019-05-29 and earlier return a &#x60;removed&#x60; boolean as part of the response.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemRemoveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ItemRemoveResponse</returns>
        ItemRemoveResponse ItemRemove(ItemRemoveRequest itemRemoveRequest, int operationIndex = 0);

        /// <summary>
        /// Remove an Item
        /// </summary>
        /// <remarks>
        /// The &#x60;/item/remove&#x60;  endpoint allows you to remove an Item. Once removed, the &#x60;access_token&#x60;  associated with the Item is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an &#x60;/item/remove&#x60;  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via &#x60;/item/remove&#x60; may still show as an active connection in the institution&#39;s OAuth permission manager.  API versions 2019-05-29 and earlier return a &#x60;removed&#x60; boolean as part of the response.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemRemoveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ItemRemoveResponse</returns>
        ApiResponse<ItemRemoveResponse> ItemRemoveWithHttpInfo(ItemRemoveRequest itemRemoveRequest, int operationIndex = 0);
        /// <summary>
        /// Update Webhook URL
        /// </summary>
        /// <remarks>
        /// The POST &#x60;/item/webhook/update&#x60; allows you to update the webhook URL associated with an Item. This request triggers a [&#x60;WEBHOOK_UPDATE_ACKNOWLEDGED&#x60;](https://plaid.com/docs/api/webhooks/#item-webhook-update-acknowledged) webhook to the newly specified webhook URL.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemWebhookUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ItemWebhookUpdateResponse</returns>
        ItemWebhookUpdateResponse ItemWebhookUpdate(ItemWebhookUpdateRequest itemWebhookUpdateRequest, int operationIndex = 0);

        /// <summary>
        /// Update Webhook URL
        /// </summary>
        /// <remarks>
        /// The POST &#x60;/item/webhook/update&#x60; allows you to update the webhook URL associated with an Item. This request triggers a [&#x60;WEBHOOK_UPDATE_ACKNOWLEDGED&#x60;](https://plaid.com/docs/api/webhooks/#item-webhook-update-acknowledged) webhook to the newly specified webhook URL.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemWebhookUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ItemWebhookUpdateResponse</returns>
        ApiResponse<ItemWebhookUpdateResponse> ItemWebhookUpdateWithHttpInfo(ItemWebhookUpdateRequest itemWebhookUpdateRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieve Liabilities data
        /// </summary>
        /// <remarks>
        /// The &#x60;/liabilities/get&#x60; endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type &#x60;credit&#x60; with account subtype &#x60;credit card&#x60; or &#x60;paypal&#x60;, and account type &#x60;loan&#x60; with account subtype &#x60;student&#x60; or &#x60;mortgage&#x60;. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the &#x60;account_filters&#x60; parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling &#x60;/liabilities/get&#x60;.  Note: This request may take some time to complete if &#x60;liabilities&#x60; was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liabilitiesGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LiabilitiesGetResponse</returns>
        LiabilitiesGetResponse LiabilitiesGet(LiabilitiesGetRequest liabilitiesGetRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieve Liabilities data
        /// </summary>
        /// <remarks>
        /// The &#x60;/liabilities/get&#x60; endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type &#x60;credit&#x60; with account subtype &#x60;credit card&#x60; or &#x60;paypal&#x60;, and account type &#x60;loan&#x60; with account subtype &#x60;student&#x60; or &#x60;mortgage&#x60;. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the &#x60;account_filters&#x60; parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling &#x60;/liabilities/get&#x60;.  Note: This request may take some time to complete if &#x60;liabilities&#x60; was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liabilitiesGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LiabilitiesGetResponse</returns>
        ApiResponse<LiabilitiesGetResponse> LiabilitiesGetWithHttpInfo(LiabilitiesGetRequest liabilitiesGetRequest, int operationIndex = 0);
        /// <summary>
        /// Create Link Token
        /// </summary>
        /// <remarks>
        /// The &#x60;/link/token/create&#x60; endpoint creates a &#x60;link_token&#x60;, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a &#x60;public_token&#x60;, which can then be exchanged for an &#x60;access_token&#x60; via &#x60;/item/public_token/exchange&#x60; as part of the main Link flow.  A &#x60;link_token&#x60; generated by &#x60;/link/token/create&#x60; is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LinkTokenCreateResponse</returns>
        LinkTokenCreateResponse LinkTokenCreate(LinkTokenCreateRequest linkTokenCreateRequest, int operationIndex = 0);

        /// <summary>
        /// Create Link Token
        /// </summary>
        /// <remarks>
        /// The &#x60;/link/token/create&#x60; endpoint creates a &#x60;link_token&#x60;, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a &#x60;public_token&#x60;, which can then be exchanged for an &#x60;access_token&#x60; via &#x60;/item/public_token/exchange&#x60; as part of the main Link flow.  A &#x60;link_token&#x60; generated by &#x60;/link/token/create&#x60; is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LinkTokenCreateResponse</returns>
        ApiResponse<LinkTokenCreateResponse> LinkTokenCreateWithHttpInfo(LinkTokenCreateRequest linkTokenCreateRequest, int operationIndex = 0);
        /// <summary>
        /// Get Link Token
        /// </summary>
        /// <remarks>
        /// The &#x60;/link/token/get&#x60; endpoint gets information about a previously-created &#x60;link_token&#x60; using the &#x60;/link/token/create&#x60; endpoint. It can be useful for debugging purposes.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkTokenGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LinkTokenGetResponse</returns>
        LinkTokenGetResponse LinkTokenGet(LinkTokenGetRequest linkTokenGetRequest, int operationIndex = 0);

        /// <summary>
        /// Get Link Token
        /// </summary>
        /// <remarks>
        /// The &#x60;/link/token/get&#x60; endpoint gets information about a previously-created &#x60;link_token&#x60; using the &#x60;/link/token/create&#x60; endpoint. It can be useful for debugging purposes.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkTokenGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LinkTokenGetResponse</returns>
        ApiResponse<LinkTokenGetResponse> LinkTokenGetWithHttpInfo(LinkTokenGetRequest linkTokenGetRequest, int operationIndex = 0);
        /// <summary>
        /// Create a payment
        /// </summary>
        /// <remarks>
        /// After creating a payment recipient, you can use the &#x60;/payment_initiation/payment/create&#x60; endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR or GBP.  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer and GBP-denominated payments will be sent via the Faster Payments network, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP / EUR. For details on any payment limits in Production, contact your Plaid Account Manager.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentInitiationPaymentCreateResponse</returns>
        PaymentInitiationPaymentCreateResponse PaymentInitiationPaymentCreate(PaymentInitiationPaymentCreateRequest paymentInitiationPaymentCreateRequest, int operationIndex = 0);

        /// <summary>
        /// Create a payment
        /// </summary>
        /// <remarks>
        /// After creating a payment recipient, you can use the &#x60;/payment_initiation/payment/create&#x60; endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR or GBP.  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer and GBP-denominated payments will be sent via the Faster Payments network, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP / EUR. For details on any payment limits in Production, contact your Plaid Account Manager.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentInitiationPaymentCreateResponse</returns>
        ApiResponse<PaymentInitiationPaymentCreateResponse> PaymentInitiationPaymentCreateWithHttpInfo(PaymentInitiationPaymentCreateRequest paymentInitiationPaymentCreateRequest, int operationIndex = 0);
        /// <summary>
        /// Get payment details
        /// </summary>
        /// <remarks>
        /// The &#x60;/payment_initiation/payment/get&#x60; endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the &#x60;/payment_initiation/payment/get&#x60; endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentInitiationPaymentGetResponse</returns>
        PaymentInitiationPaymentGetResponse PaymentInitiationPaymentGet(PaymentInitiationPaymentGetRequest paymentInitiationPaymentGetRequest, int operationIndex = 0);

        /// <summary>
        /// Get payment details
        /// </summary>
        /// <remarks>
        /// The &#x60;/payment_initiation/payment/get&#x60; endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the &#x60;/payment_initiation/payment/get&#x60; endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentInitiationPaymentGetResponse</returns>
        ApiResponse<PaymentInitiationPaymentGetResponse> PaymentInitiationPaymentGetWithHttpInfo(PaymentInitiationPaymentGetRequest paymentInitiationPaymentGetRequest, int operationIndex = 0);
        /// <summary>
        /// List payments
        /// </summary>
        /// <remarks>
        /// The &#x60;/payment_initiation/payment/list&#x60; endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional &#x60;count&#x60; and &#x60;cursor&#x60; parameters.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentInitiationPaymentListResponse</returns>
        PaymentInitiationPaymentListResponse PaymentInitiationPaymentList(PaymentInitiationPaymentListRequest paymentInitiationPaymentListRequest, int operationIndex = 0);

        /// <summary>
        /// List payments
        /// </summary>
        /// <remarks>
        /// The &#x60;/payment_initiation/payment/list&#x60; endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional &#x60;count&#x60; and &#x60;cursor&#x60; parameters.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentInitiationPaymentListResponse</returns>
        ApiResponse<PaymentInitiationPaymentListResponse> PaymentInitiationPaymentListWithHttpInfo(PaymentInitiationPaymentListRequest paymentInitiationPaymentListRequest, int operationIndex = 0);
        /// <summary>
        /// Reverse an existing payment
        /// </summary>
        /// <remarks>
        /// Reverse a previously initiated payment.  A payment can only be reversed once and will be refunded to the original sender&#39;s account. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentReverseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentInitiationPaymentReverseResponse</returns>
        PaymentInitiationPaymentReverseResponse PaymentInitiationPaymentReverse(PaymentInitiationPaymentReverseRequest paymentInitiationPaymentReverseRequest, int operationIndex = 0);

        /// <summary>
        /// Reverse an existing payment
        /// </summary>
        /// <remarks>
        /// Reverse a previously initiated payment.  A payment can only be reversed once and will be refunded to the original sender&#39;s account. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentReverseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentInitiationPaymentReverseResponse</returns>
        ApiResponse<PaymentInitiationPaymentReverseResponse> PaymentInitiationPaymentReverseWithHttpInfo(PaymentInitiationPaymentReverseRequest paymentInitiationPaymentReverseRequest, int operationIndex = 0);
        /// <summary>
        /// Create payment recipient
        /// </summary>
        /// <remarks>
        /// Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA).  For a standing order (recurring) payment, the recipient must be in the UK.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same &#x60;recipient_id&#x60;. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationRecipientCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentInitiationRecipientCreateResponse</returns>
        PaymentInitiationRecipientCreateResponse PaymentInitiationRecipientCreate(PaymentInitiationRecipientCreateRequest paymentInitiationRecipientCreateRequest, int operationIndex = 0);

        /// <summary>
        /// Create payment recipient
        /// </summary>
        /// <remarks>
        /// Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA).  For a standing order (recurring) payment, the recipient must be in the UK.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same &#x60;recipient_id&#x60;. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationRecipientCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentInitiationRecipientCreateResponse</returns>
        ApiResponse<PaymentInitiationRecipientCreateResponse> PaymentInitiationRecipientCreateWithHttpInfo(PaymentInitiationRecipientCreateRequest paymentInitiationRecipientCreateRequest, int operationIndex = 0);
        /// <summary>
        /// Get payment recipient
        /// </summary>
        /// <remarks>
        /// Get details about a payment recipient you have previously created.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationRecipientGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentInitiationRecipientGetResponse</returns>
        PaymentInitiationRecipientGetResponse PaymentInitiationRecipientGet(PaymentInitiationRecipientGetRequest paymentInitiationRecipientGetRequest, int operationIndex = 0);

        /// <summary>
        /// Get payment recipient
        /// </summary>
        /// <remarks>
        /// Get details about a payment recipient you have previously created.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationRecipientGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentInitiationRecipientGetResponse</returns>
        ApiResponse<PaymentInitiationRecipientGetResponse> PaymentInitiationRecipientGetWithHttpInfo(PaymentInitiationRecipientGetRequest paymentInitiationRecipientGetRequest, int operationIndex = 0);
        /// <summary>
        /// List payment recipients
        /// </summary>
        /// <remarks>
        /// The &#x60;/payment_initiation/recipient/list&#x60; endpoint list the payment recipients that you have previously created.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationRecipientListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentInitiationRecipientListResponse</returns>
        PaymentInitiationRecipientListResponse PaymentInitiationRecipientList(PaymentInitiationRecipientListRequest paymentInitiationRecipientListRequest, int operationIndex = 0);

        /// <summary>
        /// List payment recipients
        /// </summary>
        /// <remarks>
        /// The &#x60;/payment_initiation/recipient/list&#x60; endpoint list the payment recipients that you have previously created.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationRecipientListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentInitiationRecipientListResponse</returns>
        ApiResponse<PaymentInitiationRecipientListResponse> PaymentInitiationRecipientListWithHttpInfo(PaymentInitiationRecipientListRequest paymentInitiationRecipientListRequest, int operationIndex = 0);
        /// <summary>
        /// Create Apex bank account token
        /// </summary>
        /// <remarks>
        /// Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorApexProcessorTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProcessorTokenCreateResponse</returns>
        ProcessorTokenCreateResponse ProcessorApexProcessorTokenCreate(ProcessorApexProcessorTokenCreateRequest processorApexProcessorTokenCreateRequest, int operationIndex = 0);

        /// <summary>
        /// Create Apex bank account token
        /// </summary>
        /// <remarks>
        /// Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorApexProcessorTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProcessorTokenCreateResponse</returns>
        ApiResponse<ProcessorTokenCreateResponse> ProcessorApexProcessorTokenCreateWithHttpInfo(ProcessorApexProcessorTokenCreateRequest processorApexProcessorTokenCreateRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieve Auth data
        /// </summary>
        /// <remarks>
        /// The &#x60;/processor/auth/get&#x60; endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that&#39;&#39;s associated with a given &#x60;processor_token&#x60;. The endpoint also returns high-level account data and balances when available.   Versioning note: API versions 2019-05-29 and earlier use a different schema for the &#x60;numbers&#x60; object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14). 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorAuthGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProcessorAuthGetResponse</returns>
        ProcessorAuthGetResponse ProcessorAuthGet(ProcessorAuthGetRequest processorAuthGetRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieve Auth data
        /// </summary>
        /// <remarks>
        /// The &#x60;/processor/auth/get&#x60; endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that&#39;&#39;s associated with a given &#x60;processor_token&#x60;. The endpoint also returns high-level account data and balances when available.   Versioning note: API versions 2019-05-29 and earlier use a different schema for the &#x60;numbers&#x60; object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14). 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorAuthGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProcessorAuthGetResponse</returns>
        ApiResponse<ProcessorAuthGetResponse> ProcessorAuthGetWithHttpInfo(ProcessorAuthGetRequest processorAuthGetRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieve Balance data
        /// </summary>
        /// <remarks>
        /// The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for each of an Item&#39;s accounts. While other endpoints may return a balance object, only &#x60;/processor/balance/get&#x60; forces the available and current balance fields to be refreshed rather than cached. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorBalanceGetRequest">The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProcessorBalanceGetResponse</returns>
        ProcessorBalanceGetResponse ProcessorBalanceGet(ProcessorBalanceGetRequest processorBalanceGetRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieve Balance data
        /// </summary>
        /// <remarks>
        /// The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for each of an Item&#39;s accounts. While other endpoints may return a balance object, only &#x60;/processor/balance/get&#x60; forces the available and current balance fields to be refreshed rather than cached. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorBalanceGetRequest">The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProcessorBalanceGetResponse</returns>
        ApiResponse<ProcessorBalanceGetResponse> ProcessorBalanceGetWithHttpInfo(ProcessorBalanceGetRequest processorBalanceGetRequest, int operationIndex = 0);
        /// <summary>
        /// Create a bank transfer as a processor
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/processor/bank_transfer/create&#x60; endpoint to initiate a new bank transfer as a processor
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorBankTransferCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProcessorBankTransferCreateResponse</returns>
        ProcessorBankTransferCreateResponse ProcessorBankTransferCreate(ProcessorBankTransferCreateRequest processorBankTransferCreateRequest, int operationIndex = 0);

        /// <summary>
        /// Create a bank transfer as a processor
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/processor/bank_transfer/create&#x60; endpoint to initiate a new bank transfer as a processor
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorBankTransferCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProcessorBankTransferCreateResponse</returns>
        ApiResponse<ProcessorBankTransferCreateResponse> ProcessorBankTransferCreateWithHttpInfo(ProcessorBankTransferCreateRequest processorBankTransferCreateRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieve Identity data
        /// </summary>
        /// <remarks>
        /// The &#x60;/processor/identity/get&#x60; endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorIdentityGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProcessorIdentityGetResponse</returns>
        ProcessorIdentityGetResponse ProcessorIdentityGet(ProcessorIdentityGetRequest processorIdentityGetRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieve Identity data
        /// </summary>
        /// <remarks>
        /// The &#x60;/processor/identity/get&#x60; endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorIdentityGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProcessorIdentityGetResponse</returns>
        ApiResponse<ProcessorIdentityGetResponse> ProcessorIdentityGetWithHttpInfo(ProcessorIdentityGetRequest processorIdentityGetRequest, int operationIndex = 0);
        /// <summary>
        /// Create Stripe bank account token
        /// </summary>
        /// <remarks>
        /// Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorStripeBankAccountTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProcessorStripeBankAccountTokenCreateResponse</returns>
        ProcessorStripeBankAccountTokenCreateResponse ProcessorStripeBankAccountTokenCreate(ProcessorStripeBankAccountTokenCreateRequest processorStripeBankAccountTokenCreateRequest, int operationIndex = 0);

        /// <summary>
        /// Create Stripe bank account token
        /// </summary>
        /// <remarks>
        /// Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorStripeBankAccountTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProcessorStripeBankAccountTokenCreateResponse</returns>
        ApiResponse<ProcessorStripeBankAccountTokenCreateResponse> ProcessorStripeBankAccountTokenCreateWithHttpInfo(ProcessorStripeBankAccountTokenCreateRequest processorStripeBankAccountTokenCreateRequest, int operationIndex = 0);
        /// <summary>
        /// Create processor token
        /// </summary>
        /// <remarks>
        /// Used to create a token suitable for sending to one of Plaid&#39;s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see &#x60;/processor/stripe/bank_account_token/create&#x60; for creating tokens for use with Stripe integrations.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProcessorTokenCreateResponse</returns>
        ProcessorTokenCreateResponse ProcessorTokenCreate(ProcessorTokenCreateRequest processorTokenCreateRequest, int operationIndex = 0);

        /// <summary>
        /// Create processor token
        /// </summary>
        /// <remarks>
        /// Used to create a token suitable for sending to one of Plaid&#39;s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see &#x60;/processor/stripe/bank_account_token/create&#x60; for creating tokens for use with Stripe integrations.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProcessorTokenCreateResponse</returns>
        ApiResponse<ProcessorTokenCreateResponse> ProcessorTokenCreateWithHttpInfo(ProcessorTokenCreateRequest processorTokenCreateRequest, int operationIndex = 0);
        /// <summary>
        /// Manually fire a Bank Transfer webhook
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/sandbox/bank_transfer/fire_webhook&#x60; endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxBankTransferFireWebhookRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SandboxBankTransferFireWebhookResponse</returns>
        SandboxBankTransferFireWebhookResponse SandboxBankTransferFireWebhook(SandboxBankTransferFireWebhookRequest sandboxBankTransferFireWebhookRequest, int operationIndex = 0);

        /// <summary>
        /// Manually fire a Bank Transfer webhook
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/sandbox/bank_transfer/fire_webhook&#x60; endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxBankTransferFireWebhookRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SandboxBankTransferFireWebhookResponse</returns>
        ApiResponse<SandboxBankTransferFireWebhookResponse> SandboxBankTransferFireWebhookWithHttpInfo(SandboxBankTransferFireWebhookRequest sandboxBankTransferFireWebhookRequest, int operationIndex = 0);
        /// <summary>
        /// Simulate a bank transfer event in Sandbox
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/sandbox/bank_transfer/simulate&#x60; endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/bank_transfer/event/sync&#x60; or &#x60;/bank_transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxBankTransferSimulateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SandboxBankTransferSimulateResponse</returns>
        SandboxBankTransferSimulateResponse SandboxBankTransferSimulate(SandboxBankTransferSimulateRequest sandboxBankTransferSimulateRequest, int operationIndex = 0);

        /// <summary>
        /// Simulate a bank transfer event in Sandbox
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/sandbox/bank_transfer/simulate&#x60; endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/bank_transfer/event/sync&#x60; or &#x60;/bank_transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxBankTransferSimulateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SandboxBankTransferSimulateResponse</returns>
        ApiResponse<SandboxBankTransferSimulateResponse> SandboxBankTransferSimulateWithHttpInfo(SandboxBankTransferSimulateRequest sandboxBankTransferSimulateRequest, int operationIndex = 0);
        /// <summary>
        /// Manually fire an Income webhook
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/sandbox/income/fire_webhook&#x60; endpoint to manually trigger an Income webhook in the Sandbox environment.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxIncomeFireWebhookRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SandboxIncomeFireWebhookResponse</returns>
        SandboxIncomeFireWebhookResponse SandboxIncomeFireWebhook(SandboxIncomeFireWebhookRequest sandboxIncomeFireWebhookRequest, int operationIndex = 0);

        /// <summary>
        /// Manually fire an Income webhook
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/sandbox/income/fire_webhook&#x60; endpoint to manually trigger an Income webhook in the Sandbox environment.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxIncomeFireWebhookRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SandboxIncomeFireWebhookResponse</returns>
        ApiResponse<SandboxIncomeFireWebhookResponse> SandboxIncomeFireWebhookWithHttpInfo(SandboxIncomeFireWebhookRequest sandboxIncomeFireWebhookRequest, int operationIndex = 0);
        /// <summary>
        /// Fire a test webhook
        /// </summary>
        /// <remarks>
        /// The &#x60;/sandbox/item/fire_webhook&#x60; endpoint is used to test that code correctly handles webhooks. This endpoint can trigger a Transactions &#x60;DEFAULT_UPDATE&#x60; webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a &#x60;SANDBOX_PRODUCT_NOT_ENABLED&#x60; error will result. This endpoint can also trigger a &#x60;NEW_ACCOUNTS_AVAILABLE&#x60; webhook to be fired for a given Sandbox Item created with Account Select v2. Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxItemFireWebhookRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SandboxItemFireWebhookResponse</returns>
        SandboxItemFireWebhookResponse SandboxItemFireWebhook(SandboxItemFireWebhookRequest sandboxItemFireWebhookRequest, int operationIndex = 0);

        /// <summary>
        /// Fire a test webhook
        /// </summary>
        /// <remarks>
        /// The &#x60;/sandbox/item/fire_webhook&#x60; endpoint is used to test that code correctly handles webhooks. This endpoint can trigger a Transactions &#x60;DEFAULT_UPDATE&#x60; webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a &#x60;SANDBOX_PRODUCT_NOT_ENABLED&#x60; error will result. This endpoint can also trigger a &#x60;NEW_ACCOUNTS_AVAILABLE&#x60; webhook to be fired for a given Sandbox Item created with Account Select v2. Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxItemFireWebhookRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SandboxItemFireWebhookResponse</returns>
        ApiResponse<SandboxItemFireWebhookResponse> SandboxItemFireWebhookWithHttpInfo(SandboxItemFireWebhookRequest sandboxItemFireWebhookRequest, int operationIndex = 0);
        /// <summary>
        /// Force a Sandbox Item into an error state
        /// </summary>
        /// <remarks>
        /// &#x60;/sandbox/item/reset_login/&#x60; forces an Item into an &#x60;ITEM_LOGIN_REQUIRED&#x60; state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link&#39;s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling &#x60;/sandbox/item/reset_login&#x60;, You can then use Plaid Link update mode to restore the Item to a good state. An &#x60;ITEM_LOGIN_REQUIRED&#x60; webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an &#x60;ITEM_LOGIN_REQUIRED&#x60; error state automatically after 30 days, even if this endpoint is not called.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxItemResetLoginRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SandboxItemResetLoginResponse</returns>
        SandboxItemResetLoginResponse SandboxItemResetLogin(SandboxItemResetLoginRequest sandboxItemResetLoginRequest, int operationIndex = 0);

        /// <summary>
        /// Force a Sandbox Item into an error state
        /// </summary>
        /// <remarks>
        /// &#x60;/sandbox/item/reset_login/&#x60; forces an Item into an &#x60;ITEM_LOGIN_REQUIRED&#x60; state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link&#39;s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling &#x60;/sandbox/item/reset_login&#x60;, You can then use Plaid Link update mode to restore the Item to a good state. An &#x60;ITEM_LOGIN_REQUIRED&#x60; webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an &#x60;ITEM_LOGIN_REQUIRED&#x60; error state automatically after 30 days, even if this endpoint is not called.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxItemResetLoginRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SandboxItemResetLoginResponse</returns>
        ApiResponse<SandboxItemResetLoginResponse> SandboxItemResetLoginWithHttpInfo(SandboxItemResetLoginRequest sandboxItemResetLoginRequest, int operationIndex = 0);
        /// <summary>
        /// Set verification status for Sandbox account
        /// </summary>
        /// <remarks>
        /// The &#x60;/sandbox/item/set_verification_status&#x60; endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxItemSetVerificationStatusRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SandboxItemSetVerificationStatusResponse</returns>
        SandboxItemSetVerificationStatusResponse SandboxItemSetVerificationStatus(SandboxItemSetVerificationStatusRequest sandboxItemSetVerificationStatusRequest, int operationIndex = 0);

        /// <summary>
        /// Set verification status for Sandbox account
        /// </summary>
        /// <remarks>
        /// The &#x60;/sandbox/item/set_verification_status&#x60; endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxItemSetVerificationStatusRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SandboxItemSetVerificationStatusResponse</returns>
        ApiResponse<SandboxItemSetVerificationStatusResponse> SandboxItemSetVerificationStatusWithHttpInfo(SandboxItemSetVerificationStatusRequest sandboxItemSetVerificationStatusRequest, int operationIndex = 0);
        /// <summary>
        /// Save the selected accounts when connecting to the Platypus Oauth institution
        /// </summary>
        /// <remarks>
        /// Save the selected accounts when connecting to the Platypus Oauth institution
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxOauthSelectAccountsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> SandboxOauthSelectAccounts(SandboxOauthSelectAccountsRequest sandboxOauthSelectAccountsRequest, int operationIndex = 0);

        /// <summary>
        /// Save the selected accounts when connecting to the Platypus Oauth institution
        /// </summary>
        /// <remarks>
        /// Save the selected accounts when connecting to the Platypus Oauth institution
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxOauthSelectAccountsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> SandboxOauthSelectAccountsWithHttpInfo(SandboxOauthSelectAccountsRequest sandboxOauthSelectAccountsRequest, int operationIndex = 0);
        /// <summary>
        /// Create a test Item and processor token
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/sandbox/processor_token/create&#x60; endpoint to create a valid &#x60;processor_token&#x60; for an arbitrary institution ID and test credentials. The created &#x60;processor_token&#x60; corresponds to a new Sandbox Item. You can then use this &#x60;processor_token&#x60; with the &#x60;/processor/&#x60; API endpoints in Sandbox. You can also use &#x60;/sandbox/processor_token/create&#x60; with the [&#x60;user_custom&#x60; test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxProcessorTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SandboxProcessorTokenCreateResponse</returns>
        SandboxProcessorTokenCreateResponse SandboxProcessorTokenCreate(SandboxProcessorTokenCreateRequest sandboxProcessorTokenCreateRequest, int operationIndex = 0);

        /// <summary>
        /// Create a test Item and processor token
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/sandbox/processor_token/create&#x60; endpoint to create a valid &#x60;processor_token&#x60; for an arbitrary institution ID and test credentials. The created &#x60;processor_token&#x60; corresponds to a new Sandbox Item. You can then use this &#x60;processor_token&#x60; with the &#x60;/processor/&#x60; API endpoints in Sandbox. You can also use &#x60;/sandbox/processor_token/create&#x60; with the [&#x60;user_custom&#x60; test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxProcessorTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SandboxProcessorTokenCreateResponse</returns>
        ApiResponse<SandboxProcessorTokenCreateResponse> SandboxProcessorTokenCreateWithHttpInfo(SandboxProcessorTokenCreateRequest sandboxProcessorTokenCreateRequest, int operationIndex = 0);
        /// <summary>
        /// Create a test Item
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/sandbox/public_token/create&#x60; endpoint to create a valid &#x60;public_token&#x60;  for an arbitrary institution ID, initial products, and test credentials. The created &#x60;public_token&#x60; maps to a new Sandbox Item. You can then call &#x60;/item/public_token/exchange&#x60; to exchange the &#x60;public_token&#x60; for an &#x60;access_token&#x60; and perform all API actions. &#x60;/sandbox/public_token/create&#x60; can also be used with the [&#x60;user_custom&#x60; test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. &#x60;/sandbox/public_token/create&#x60; cannot be used with OAuth institutions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxPublicTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SandboxPublicTokenCreateResponse</returns>
        SandboxPublicTokenCreateResponse SandboxPublicTokenCreate(SandboxPublicTokenCreateRequest sandboxPublicTokenCreateRequest, int operationIndex = 0);

        /// <summary>
        /// Create a test Item
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/sandbox/public_token/create&#x60; endpoint to create a valid &#x60;public_token&#x60;  for an arbitrary institution ID, initial products, and test credentials. The created &#x60;public_token&#x60; maps to a new Sandbox Item. You can then call &#x60;/item/public_token/exchange&#x60; to exchange the &#x60;public_token&#x60; for an &#x60;access_token&#x60; and perform all API actions. &#x60;/sandbox/public_token/create&#x60; can also be used with the [&#x60;user_custom&#x60; test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. &#x60;/sandbox/public_token/create&#x60; cannot be used with OAuth institutions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxPublicTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SandboxPublicTokenCreateResponse</returns>
        ApiResponse<SandboxPublicTokenCreateResponse> SandboxPublicTokenCreateWithHttpInfo(SandboxPublicTokenCreateRequest sandboxPublicTokenCreateRequest, int operationIndex = 0);
        /// <summary>
        /// Trigger the creation of a repayment
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/sandbox/transfer/repayment/simulate&#x60; endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxTransferRepaymentSimulateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SandboxTransferRepaymentSimulateResponse</returns>
        SandboxTransferRepaymentSimulateResponse SandboxTransferRepaymentSimulate(SandboxTransferRepaymentSimulateRequest sandboxTransferRepaymentSimulateRequest, int operationIndex = 0);

        /// <summary>
        /// Trigger the creation of a repayment
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/sandbox/transfer/repayment/simulate&#x60; endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxTransferRepaymentSimulateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SandboxTransferRepaymentSimulateResponse</returns>
        ApiResponse<SandboxTransferRepaymentSimulateResponse> SandboxTransferRepaymentSimulateWithHttpInfo(SandboxTransferRepaymentSimulateRequest sandboxTransferRepaymentSimulateRequest, int operationIndex = 0);
        /// <summary>
        /// Simulate a transfer event in Sandbox
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/sandbox/transfer/simulate&#x60; endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/transfer/event/sync&#x60; or &#x60;/transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxTransferSimulateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SandboxTransferSimulateResponse</returns>
        SandboxTransferSimulateResponse SandboxTransferSimulate(SandboxTransferSimulateRequest sandboxTransferSimulateRequest, int operationIndex = 0);

        /// <summary>
        /// Simulate a transfer event in Sandbox
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/sandbox/transfer/simulate&#x60; endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/transfer/event/sync&#x60; or &#x60;/transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxTransferSimulateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SandboxTransferSimulateResponse</returns>
        ApiResponse<SandboxTransferSimulateResponse> SandboxTransferSimulateWithHttpInfo(SandboxTransferSimulateRequest sandboxTransferSimulateRequest, int operationIndex = 0);
        /// <summary>
        /// Simulate creating a sweep
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/sandbox/transfer/sweep/simulate&#x60; endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all &#x60;posted&#x60; or &#x60;pending&#x60; transfers with a sweep status of &#x60;unswept&#x60; will become &#x60;swept&#x60;, and all &#x60;reversed&#x60; transfers with a sweep status of &#x60;swept&#x60; will become &#x60;reverse_swept&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxTransferSweepSimulateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SandboxTransferSweepSimulateResponse</returns>
        SandboxTransferSweepSimulateResponse SandboxTransferSweepSimulate(SandboxTransferSweepSimulateRequest sandboxTransferSweepSimulateRequest, int operationIndex = 0);

        /// <summary>
        /// Simulate creating a sweep
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/sandbox/transfer/sweep/simulate&#x60; endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all &#x60;posted&#x60; or &#x60;pending&#x60; transfers with a sweep status of &#x60;unswept&#x60; will become &#x60;swept&#x60;, and all &#x60;reversed&#x60; transfers with a sweep status of &#x60;swept&#x60; will become &#x60;reverse_swept&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxTransferSweepSimulateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SandboxTransferSweepSimulateResponse</returns>
        ApiResponse<SandboxTransferSweepSimulateResponse> SandboxTransferSweepSimulateWithHttpInfo(SandboxTransferSweepSimulateRequest sandboxTransferSweepSimulateRequest, int operationIndex = 0);
        /// <summary>
        /// Report whether you initiated an ACH transaction
        /// </summary>
        /// <remarks>
        /// After calling &#x60;/signal/evaluate&#x60;, call &#x60;/signal/decision/report&#x60; to report whether the transaction was initiated. This endpoint will return an &#x60;INVALID_REQUEST&#x60; error if called a second time with a different value for &#x60;initiated&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signalDecisionReportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SignalDecisionReportResponse</returns>
        SignalDecisionReportResponse SignalDecisionReport(SignalDecisionReportRequest signalDecisionReportRequest, int operationIndex = 0);

        /// <summary>
        /// Report whether you initiated an ACH transaction
        /// </summary>
        /// <remarks>
        /// After calling &#x60;/signal/evaluate&#x60;, call &#x60;/signal/decision/report&#x60; to report whether the transaction was initiated. This endpoint will return an &#x60;INVALID_REQUEST&#x60; error if called a second time with a different value for &#x60;initiated&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signalDecisionReportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SignalDecisionReportResponse</returns>
        ApiResponse<SignalDecisionReportResponse> SignalDecisionReportWithHttpInfo(SignalDecisionReportRequest signalDecisionReportRequest, int operationIndex = 0);
        /// <summary>
        /// Evaluate a planned ACH transaction
        /// </summary>
        /// <remarks>
        /// Use &#x60;/signal/evaluate&#x60; to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If &#x60;/signal/evaluate&#x60; is called on the same transaction multiple times within a 24-hour period, cached results may be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signalEvaluateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SignalEvaluateResponse</returns>
        SignalEvaluateResponse SignalEvaluate(SignalEvaluateRequest signalEvaluateRequest, int operationIndex = 0);

        /// <summary>
        /// Evaluate a planned ACH transaction
        /// </summary>
        /// <remarks>
        /// Use &#x60;/signal/evaluate&#x60; to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If &#x60;/signal/evaluate&#x60; is called on the same transaction multiple times within a 24-hour period, cached results may be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signalEvaluateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SignalEvaluateResponse</returns>
        ApiResponse<SignalEvaluateResponse> SignalEvaluateWithHttpInfo(SignalEvaluateRequest signalEvaluateRequest, int operationIndex = 0);
        /// <summary>
        /// Report a return for an ACH transaction
        /// </summary>
        /// <remarks>
        /// Call the &#x60;/signal/return/report&#x60; endpoint to report a returned transaction that was previously sent to the &#x60;/signal/evaluate&#x60; endpoint. Your feedback will be used by the foo to incorporate the latest risk trend in your portfolio.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signalReturnReportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SignalReturnReportResponse</returns>
        SignalReturnReportResponse SignalReturnReport(SignalReturnReportRequest signalReturnReportRequest, int operationIndex = 0);

        /// <summary>
        /// Report a return for an ACH transaction
        /// </summary>
        /// <remarks>
        /// Call the &#x60;/signal/return/report&#x60; endpoint to report a returned transaction that was previously sent to the &#x60;/signal/evaluate&#x60; endpoint. Your feedback will be used by the foo to incorporate the latest risk trend in your portfolio.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signalReturnReportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SignalReturnReportResponse</returns>
        ApiResponse<SignalReturnReportResponse> SignalReturnReportWithHttpInfo(SignalReturnReportRequest signalReturnReportRequest, int operationIndex = 0);
        /// <summary>
        /// Get transaction data
        /// </summary>
        /// <remarks>
        /// The &#x60;/transactions/get&#x60; endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype &#x60;student&#x60;; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products#investments) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in &#x60;/transactions/get&#x60;.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the &#x60;count&#x60; and &#x60;offset&#x60; parameters in conjunction with the &#x60;total_transactions&#x60; response body field to fetch all available transactions.  Data returned by &#x60;/transactions/get&#x60; will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item&#39;s &#x60;status.transactions.last_successful_update&#x60; field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the &#x60;/transactions/refresh&#x60; endpoint.  Note that data may not be immediately available to &#x60;/transactions/get&#x60;. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with &#x60;transactions&#x60;, or upon the first call to &#x60;/transactions/get&#x60;, if it wasn&#39;t. To be alerted when transaction data is ready to be fetched, listen for the [&#x60;INITIAL_UPDATE&#x60;](https://plaid.com/docs/api/webhooks#transactions-initial_update) and [&#x60;HISTORICAL_UPDATE&#x60;](https://plaid.com/docs/api/webhooks#transactions-historical_update) webhooks. If no transaction history is ready when &#x60;/transactions/get&#x60; is called, it will return a &#x60;PRODUCT_NOT_READY&#x60; error.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionsGetResponse</returns>
        TransactionsGetResponse TransactionsGet(TransactionsGetRequest transactionsGetRequest, int operationIndex = 0);

        /// <summary>
        /// Get transaction data
        /// </summary>
        /// <remarks>
        /// The &#x60;/transactions/get&#x60; endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype &#x60;student&#x60;; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products#investments) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in &#x60;/transactions/get&#x60;.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the &#x60;count&#x60; and &#x60;offset&#x60; parameters in conjunction with the &#x60;total_transactions&#x60; response body field to fetch all available transactions.  Data returned by &#x60;/transactions/get&#x60; will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item&#39;s &#x60;status.transactions.last_successful_update&#x60; field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the &#x60;/transactions/refresh&#x60; endpoint.  Note that data may not be immediately available to &#x60;/transactions/get&#x60;. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with &#x60;transactions&#x60;, or upon the first call to &#x60;/transactions/get&#x60;, if it wasn&#39;t. To be alerted when transaction data is ready to be fetched, listen for the [&#x60;INITIAL_UPDATE&#x60;](https://plaid.com/docs/api/webhooks#transactions-initial_update) and [&#x60;HISTORICAL_UPDATE&#x60;](https://plaid.com/docs/api/webhooks#transactions-historical_update) webhooks. If no transaction history is ready when &#x60;/transactions/get&#x60; is called, it will return a &#x60;PRODUCT_NOT_READY&#x60; error.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionsGetResponse</returns>
        ApiResponse<TransactionsGetResponse> TransactionsGetWithHttpInfo(TransactionsGetRequest transactionsGetRequest, int operationIndex = 0);
        /// <summary>
        /// Get streams of recurring transactions
        /// </summary>
        /// <remarks>
        /// The &#x60;/transactions/recurring/get&#x60; endpoint identifies and returns groups of transactions that occur on a regular basis for the inputted Item and accounts.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionsRecurringGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionsRecurringGetResponse</returns>
        TransactionsRecurringGetResponse TransactionsRecurringGet(TransactionsRecurringGetRequest transactionsRecurringGetRequest, int operationIndex = 0);

        /// <summary>
        /// Get streams of recurring transactions
        /// </summary>
        /// <remarks>
        /// The &#x60;/transactions/recurring/get&#x60; endpoint identifies and returns groups of transactions that occur on a regular basis for the inputted Item and accounts.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionsRecurringGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionsRecurringGetResponse</returns>
        ApiResponse<TransactionsRecurringGetResponse> TransactionsRecurringGetWithHttpInfo(TransactionsRecurringGetRequest transactionsRecurringGetRequest, int operationIndex = 0);
        /// <summary>
        /// Refresh transaction data
        /// </summary>
        /// <remarks>
        /// &#x60;/transactions/refresh&#x60; is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling &#x60;/transactions/refresh&#x60;, Plaid will fire a webhook: [&#x60;TRANSACTIONS_REMOVED&#x60;](https://plaid.com/docs/api/webhooks#deleted-transactions-detected) will be fired if any removed transactions are detected, and [&#x60;DEFAULT_UPDATE&#x60;](https://plaid.com/docs/api/webhooks#transactions-default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling &#x60;/transactions/get&#x60;.  Access to &#x60;/transactions/refresh&#x60; in Production is specific to certain pricing plans. If you cannot access &#x60;/transactions/refresh&#x60; in Production, [contact Sales](https://www.plaid.com/contact) for assistance.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionsRefreshRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionsRefreshResponse</returns>
        TransactionsRefreshResponse TransactionsRefresh(TransactionsRefreshRequest transactionsRefreshRequest, int operationIndex = 0);

        /// <summary>
        /// Refresh transaction data
        /// </summary>
        /// <remarks>
        /// &#x60;/transactions/refresh&#x60; is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling &#x60;/transactions/refresh&#x60;, Plaid will fire a webhook: [&#x60;TRANSACTIONS_REMOVED&#x60;](https://plaid.com/docs/api/webhooks#deleted-transactions-detected) will be fired if any removed transactions are detected, and [&#x60;DEFAULT_UPDATE&#x60;](https://plaid.com/docs/api/webhooks#transactions-default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling &#x60;/transactions/get&#x60;.  Access to &#x60;/transactions/refresh&#x60; in Production is specific to certain pricing plans. If you cannot access &#x60;/transactions/refresh&#x60; in Production, [contact Sales](https://www.plaid.com/contact) for assistance.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionsRefreshRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionsRefreshResponse</returns>
        ApiResponse<TransactionsRefreshResponse> TransactionsRefreshWithHttpInfo(TransactionsRefreshRequest transactionsRefreshRequest, int operationIndex = 0);
        /// <summary>
        /// Get incremental transaction updates on an Item
        /// </summary>
        /// <remarks>
        /// The &#x60;/transactions/sync&#x60; endpoint returns item transactions as a set of delta updates. Subsequent calls to the endpoint using the cursor returned in the response will return new added, modified, and removed transactions since the last call to the endpoint  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionsSyncRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionsSyncResponse</returns>
        TransactionsSyncResponse TransactionsSync(TransactionsSyncRequest transactionsSyncRequest, int operationIndex = 0);

        /// <summary>
        /// Get incremental transaction updates on an Item
        /// </summary>
        /// <remarks>
        /// The &#x60;/transactions/sync&#x60; endpoint returns item transactions as a set of delta updates. Subsequent calls to the endpoint using the cursor returned in the response will return new added, modified, and removed transactions since the last call to the endpoint  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionsSyncRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionsSyncResponse</returns>
        ApiResponse<TransactionsSyncResponse> TransactionsSyncWithHttpInfo(TransactionsSyncRequest transactionsSyncRequest, int operationIndex = 0);
        /// <summary>
        /// Create a transfer authorization
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/transfer/authorization/create&#x60; endpoint to determine transfer failure risk.  In Plaid&#39;s sandbox environment the decisions will be returned as follows:    - To approve a transfer, make an authorization request with an &#x60;amount&#x60; less than the available balance in the account.    - To decline a transfer with the rationale code &#x60;NSF&#x60;, the available balance on the account must be less than the authorization &#x60;amount&#x60;. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code &#x60;RISK&#x60;, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To permit a transfer with the rationale code &#x60;MANUALLY_VERIFIED_ITEM&#x60;, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To permit a transfer with the rationale code &#x60;LOGIN_REQUIRED&#x60;, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).  All username/password combinations other than the ones listed above will result in a decision of permitted and rationale code &#x60;ERROR&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferAuthorizationCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferAuthorizationCreateResponse</returns>
        TransferAuthorizationCreateResponse TransferAuthorizationCreate(TransferAuthorizationCreateRequest transferAuthorizationCreateRequest, int operationIndex = 0);

        /// <summary>
        /// Create a transfer authorization
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/transfer/authorization/create&#x60; endpoint to determine transfer failure risk.  In Plaid&#39;s sandbox environment the decisions will be returned as follows:    - To approve a transfer, make an authorization request with an &#x60;amount&#x60; less than the available balance in the account.    - To decline a transfer with the rationale code &#x60;NSF&#x60;, the available balance on the account must be less than the authorization &#x60;amount&#x60;. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code &#x60;RISK&#x60;, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To permit a transfer with the rationale code &#x60;MANUALLY_VERIFIED_ITEM&#x60;, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To permit a transfer with the rationale code &#x60;LOGIN_REQUIRED&#x60;, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).  All username/password combinations other than the ones listed above will result in a decision of permitted and rationale code &#x60;ERROR&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferAuthorizationCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferAuthorizationCreateResponse</returns>
        ApiResponse<TransferAuthorizationCreateResponse> TransferAuthorizationCreateWithHttpInfo(TransferAuthorizationCreateRequest transferAuthorizationCreateRequest, int operationIndex = 0);
        /// <summary>
        /// Cancel a transfer
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/transfer/cancel&#x60; endpoint to cancel a transfer.  A transfer is eligible for cancelation if the &#x60;cancellable&#x60; property returned by &#x60;/transfer/get&#x60; is &#x60;true&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferCancelRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferCancelResponse</returns>
        TransferCancelResponse TransferCancel(TransferCancelRequest transferCancelRequest, int operationIndex = 0);

        /// <summary>
        /// Cancel a transfer
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/transfer/cancel&#x60; endpoint to cancel a transfer.  A transfer is eligible for cancelation if the &#x60;cancellable&#x60; property returned by &#x60;/transfer/get&#x60; is &#x60;true&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferCancelRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferCancelResponse</returns>
        ApiResponse<TransferCancelResponse> TransferCancelWithHttpInfo(TransferCancelRequest transferCancelRequest, int operationIndex = 0);
        /// <summary>
        /// Create a transfer
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/transfer/create&#x60; endpoint to initiate a new transfer.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferCreateResponse</returns>
        TransferCreateResponse TransferCreate(TransferCreateRequest transferCreateRequest, int operationIndex = 0);

        /// <summary>
        /// Create a transfer
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/transfer/create&#x60; endpoint to initiate a new transfer.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferCreateResponse</returns>
        ApiResponse<TransferCreateResponse> TransferCreateWithHttpInfo(TransferCreateRequest transferCreateRequest, int operationIndex = 0);
        /// <summary>
        /// List transfer events
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/transfer/event/list&#x60; endpoint to get a list of transfer events based on specified filter criteria.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferEventListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferEventListResponse</returns>
        TransferEventListResponse TransferEventList(TransferEventListRequest transferEventListRequest, int operationIndex = 0);

        /// <summary>
        /// List transfer events
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/transfer/event/list&#x60; endpoint to get a list of transfer events based on specified filter criteria.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferEventListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferEventListResponse</returns>
        ApiResponse<TransferEventListResponse> TransferEventListWithHttpInfo(TransferEventListRequest transferEventListRequest, int operationIndex = 0);
        /// <summary>
        /// Sync transfer events
        /// </summary>
        /// <remarks>
        /// &#x60;/transfer/event/sync&#x60; allows you to request up to the next 25 transfer events that happened after a specific &#x60;event_id&#x60;. Use the &#x60;/transfer/event/sync&#x60; endpoint to guarantee you have seen all transfer events.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferEventSyncRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferEventSyncResponse</returns>
        TransferEventSyncResponse TransferEventSync(TransferEventSyncRequest transferEventSyncRequest, int operationIndex = 0);

        /// <summary>
        /// Sync transfer events
        /// </summary>
        /// <remarks>
        /// &#x60;/transfer/event/sync&#x60; allows you to request up to the next 25 transfer events that happened after a specific &#x60;event_id&#x60;. Use the &#x60;/transfer/event/sync&#x60; endpoint to guarantee you have seen all transfer events.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferEventSyncRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferEventSyncResponse</returns>
        ApiResponse<TransferEventSyncResponse> TransferEventSyncWithHttpInfo(TransferEventSyncRequest transferEventSyncRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieve a transfer
        /// </summary>
        /// <remarks>
        /// The &#x60;/transfer/get&#x60; fetches information about the transfer corresponding to the given &#x60;transfer_id&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferGetResponse</returns>
        TransferGetResponse TransferGet(TransferGetRequest transferGetRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieve a transfer
        /// </summary>
        /// <remarks>
        /// The &#x60;/transfer/get&#x60; fetches information about the transfer corresponding to the given &#x60;transfer_id&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferGetResponse</returns>
        ApiResponse<TransferGetResponse> TransferGetWithHttpInfo(TransferGetRequest transferGetRequest, int operationIndex = 0);
        /// <summary>
        /// Create a transfer intent object to invoke the Transfer UI
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/transfer/intent/create&#x60; endpoint to generate a transfer intent object and invoke the Transfer UI.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferIntentCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferIntentCreateResponse</returns>
        TransferIntentCreateResponse TransferIntentCreate(TransferIntentCreateRequest transferIntentCreateRequest, int operationIndex = 0);

        /// <summary>
        /// Create a transfer intent object to invoke the Transfer UI
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/transfer/intent/create&#x60; endpoint to generate a transfer intent object and invoke the Transfer UI.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferIntentCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferIntentCreateResponse</returns>
        ApiResponse<TransferIntentCreateResponse> TransferIntentCreateWithHttpInfo(TransferIntentCreateRequest transferIntentCreateRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieve more information about a transfer intent
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/transfer/intent/get&#x60; endpoint to retrieve more information about a transfer intent.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferIntentGetResponse</returns>
        TransferIntentGetResponse TransferIntentGet(Dictionary<string, Object> requestBody, int operationIndex = 0);

        /// <summary>
        /// Retrieve more information about a transfer intent
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/transfer/intent/get&#x60; endpoint to retrieve more information about a transfer intent.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferIntentGetResponse</returns>
        ApiResponse<TransferIntentGetResponse> TransferIntentGetWithHttpInfo(Dictionary<string, Object> requestBody, int operationIndex = 0);
        /// <summary>
        /// List transfers
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/transfer/list&#x60; endpoint to see a list of all your transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired transfers. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferListResponse</returns>
        TransferListResponse TransferList(TransferListRequest transferListRequest, int operationIndex = 0);

        /// <summary>
        /// List transfers
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/transfer/list&#x60; endpoint to see a list of all your transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired transfers. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferListResponse</returns>
        ApiResponse<TransferListResponse> TransferListWithHttpInfo(TransferListRequest transferListRequest, int operationIndex = 0);
        /// <summary>
        /// Lists historical repayments
        /// </summary>
        /// <remarks>
        /// The &#x60;/transfer/repayment/list&#x60; endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given &#x60;start_time&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRepaymentListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferRepaymentListResponse</returns>
        TransferRepaymentListResponse TransferRepaymentList(TransferRepaymentListRequest transferRepaymentListRequest, int operationIndex = 0);

        /// <summary>
        /// Lists historical repayments
        /// </summary>
        /// <remarks>
        /// The &#x60;/transfer/repayment/list&#x60; endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given &#x60;start_time&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRepaymentListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferRepaymentListResponse</returns>
        ApiResponse<TransferRepaymentListResponse> TransferRepaymentListWithHttpInfo(TransferRepaymentListRequest transferRepaymentListRequest, int operationIndex = 0);
        /// <summary>
        /// List the returns included in a repayment
        /// </summary>
        /// <remarks>
        /// The &#x60;/transfer/repayment/return/list&#x60; endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRepaymentReturnListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferRepaymentReturnListResponse</returns>
        TransferRepaymentReturnListResponse TransferRepaymentReturnList(TransferRepaymentReturnListRequest transferRepaymentReturnListRequest, int operationIndex = 0);

        /// <summary>
        /// List the returns included in a repayment
        /// </summary>
        /// <remarks>
        /// The &#x60;/transfer/repayment/return/list&#x60; endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRepaymentReturnListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferRepaymentReturnListResponse</returns>
        ApiResponse<TransferRepaymentReturnListResponse> TransferRepaymentReturnListWithHttpInfo(TransferRepaymentReturnListRequest transferRepaymentReturnListRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieve a sweep
        /// </summary>
        /// <remarks>
        /// The &#x60;/transfer/sweep/get&#x60; endpoint fetches a sweep corresponding to the given &#x60;sweep_id&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSweepGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferSweepGetResponse</returns>
        TransferSweepGetResponse TransferSweepGet(TransferSweepGetRequest transferSweepGetRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieve a sweep
        /// </summary>
        /// <remarks>
        /// The &#x60;/transfer/sweep/get&#x60; endpoint fetches a sweep corresponding to the given &#x60;sweep_id&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSweepGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferSweepGetResponse</returns>
        ApiResponse<TransferSweepGetResponse> TransferSweepGetWithHttpInfo(TransferSweepGetRequest transferSweepGetRequest, int operationIndex = 0);
        /// <summary>
        /// List sweeps
        /// </summary>
        /// <remarks>
        /// The &#x60;/transfer/sweep/list&#x60; endpoint fetches sweeps matching the given filters.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSweepListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferSweepListResponse</returns>
        TransferSweepListResponse TransferSweepList(TransferSweepListRequest transferSweepListRequest, int operationIndex = 0);

        /// <summary>
        /// List sweeps
        /// </summary>
        /// <remarks>
        /// The &#x60;/transfer/sweep/list&#x60; endpoint fetches sweeps matching the given filters.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSweepListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferSweepListResponse</returns>
        ApiResponse<TransferSweepListResponse> TransferSweepListWithHttpInfo(TransferSweepListRequest transferSweepListRequest, int operationIndex = 0);
        /// <summary>
        /// Fetch an e-wallet
        /// </summary>
        /// <remarks>
        /// Fetch an e-wallet. The response includes the current balance. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WalletGetResponse</returns>
        WalletGetResponse WalletGet(WalletGetRequest walletGetRequest, int operationIndex = 0);

        /// <summary>
        /// Fetch an e-wallet
        /// </summary>
        /// <remarks>
        /// Fetch an e-wallet. The response includes the current balance. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WalletGetResponse</returns>
        ApiResponse<WalletGetResponse> WalletGetWithHttpInfo(WalletGetRequest walletGetRequest, int operationIndex = 0);
        /// <summary>
        /// Execute a transaction using an e-wallet
        /// </summary>
        /// <remarks>
        /// Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate payouts, the amount and reference for the payout. The payouts are executed over the Faster Payment rails, where settlement usually only takes a few seconds. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionExecuteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WalletTransactionExecuteResponse</returns>
        WalletTransactionExecuteResponse WalletTransactionExecute(WalletTransactionExecuteRequest walletTransactionExecuteRequest, int operationIndex = 0);

        /// <summary>
        /// Execute a transaction using an e-wallet
        /// </summary>
        /// <remarks>
        /// Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate payouts, the amount and reference for the payout. The payouts are executed over the Faster Payment rails, where settlement usually only takes a few seconds. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionExecuteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WalletTransactionExecuteResponse</returns>
        ApiResponse<WalletTransactionExecuteResponse> WalletTransactionExecuteWithHttpInfo(WalletTransactionExecuteRequest walletTransactionExecuteRequest, int operationIndex = 0);
        /// <summary>
        /// List e-wallet transactions
        /// </summary>
        /// <remarks>
        /// This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the &#x60;created_at&#x60; time. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionsListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WalletTransactionsListResponse</returns>
        WalletTransactionsListResponse WalletTransactionsList(WalletTransactionsListRequest walletTransactionsListRequest, int operationIndex = 0);

        /// <summary>
        /// List e-wallet transactions
        /// </summary>
        /// <remarks>
        /// This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the &#x60;created_at&#x60; time. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionsListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WalletTransactionsListResponse</returns>
        ApiResponse<WalletTransactionsListResponse> WalletTransactionsListWithHttpInfo(WalletTransactionsListRequest walletTransactionsListRequest, int operationIndex = 0);
        /// <summary>
        /// Get webhook verification key
        /// </summary>
        /// <remarks>
        /// Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the &#x60;Plaid-Verification&#x60; header.  The &#x60;/webhook_verification_key/get&#x60; endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookVerificationKeyGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookVerificationKeyGetResponse</returns>
        WebhookVerificationKeyGetResponse WebhookVerificationKeyGet(WebhookVerificationKeyGetRequest webhookVerificationKeyGetRequest, int operationIndex = 0);

        /// <summary>
        /// Get webhook verification key
        /// </summary>
        /// <remarks>
        /// Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the &#x60;Plaid-Verification&#x60; header.  The &#x60;/webhook_verification_key/get&#x60; endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookVerificationKeyGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookVerificationKeyGetResponse</returns>
        ApiResponse<WebhookVerificationKeyGetResponse> WebhookVerificationKeyGetWithHttpInfo(WebhookVerificationKeyGetRequest webhookVerificationKeyGetRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlaidApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve real-time balance data
        /// </summary>
        /// <remarks>
        /// The &#x60;/accounts/balance/get&#x60; endpoint returns the real-time balance for each of an Item&#39;s accounts. While other endpoints may return a balance object, only &#x60;/accounts/balance/get&#x60; forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, &#x60;balance&#x60; itself is not a product that can be used to initialize Link.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountsBalanceGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountsGetResponse</returns>
        System.Threading.Tasks.Task<AccountsGetResponse> AccountsBalanceGetAsync(AccountsBalanceGetRequest accountsBalanceGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve real-time balance data
        /// </summary>
        /// <remarks>
        /// The &#x60;/accounts/balance/get&#x60; endpoint returns the real-time balance for each of an Item&#39;s accounts. While other endpoints may return a balance object, only &#x60;/accounts/balance/get&#x60; forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, &#x60;balance&#x60; itself is not a product that can be used to initialize Link.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountsBalanceGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountsGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountsGetResponse>> AccountsBalanceGetWithHttpInfoAsync(AccountsBalanceGetRequest accountsBalanceGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve accounts
        /// </summary>
        /// <remarks>
        /// The &#x60;/accounts/get&#x60; endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance.  This endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [&#x60;NEW_ACCOUNTS_AVAILABLE&#x60;](https://plaid.com/docs/api/webhooks/#item-new_accounts_available) webhook and then use Link&#39;s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use &#x60;/accounts/balance/get&#x60; instead. Note that some information is nullable.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountsGetResponse</returns>
        System.Threading.Tasks.Task<AccountsGetResponse> AccountsGetAsync(AccountsGetRequest accountsGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve accounts
        /// </summary>
        /// <remarks>
        /// The &#x60;/accounts/get&#x60; endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance.  This endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [&#x60;NEW_ACCOUNTS_AVAILABLE&#x60;](https://plaid.com/docs/api/webhooks/#item-new_accounts_available) webhook and then use Link&#39;s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use &#x60;/accounts/balance/get&#x60; instead. Note that some information is nullable.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountsGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountsGetResponse>> AccountsGetWithHttpInfoAsync(AccountsGetRequest accountsGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve information about a Plaid application
        /// </summary>
        /// <remarks>
        /// Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationGetResponse</returns>
        System.Threading.Tasks.Task<ApplicationGetResponse> ApplicationGetAsync(ApplicationGetRequest applicationGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve information about a Plaid application
        /// </summary>
        /// <remarks>
        /// Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationGetResponse>> ApplicationGetWithHttpInfoAsync(ApplicationGetRequest applicationGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Asset Report Audit Copy
        /// </summary>
        /// <remarks>
        /// Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the &#x60;/asset_report/audit_copy/create&#x60; endpoint to create an &#x60;audit_copy_token&#x60; and then pass that token to the third party who needs access. Each third party has its own &#x60;auditor_id&#x60;, for example &#x60;fannie_mae&#x60;. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportAuditCopyCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetReportAuditCopyCreateResponse</returns>
        System.Threading.Tasks.Task<AssetReportAuditCopyCreateResponse> AssetReportAuditCopyCreateAsync(AssetReportAuditCopyCreateRequest assetReportAuditCopyCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Asset Report Audit Copy
        /// </summary>
        /// <remarks>
        /// Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the &#x60;/asset_report/audit_copy/create&#x60; endpoint to create an &#x60;audit_copy_token&#x60; and then pass that token to the third party who needs access. Each third party has its own &#x60;auditor_id&#x60;, for example &#x60;fannie_mae&#x60;. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportAuditCopyCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetReportAuditCopyCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetReportAuditCopyCreateResponse>> AssetReportAuditCopyCreateWithHttpInfoAsync(AssetReportAuditCopyCreateRequest assetReportAuditCopyCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an Asset Report Audit Copy
        /// </summary>
        /// <remarks>
        /// &#x60;/asset_report/audit_copy/get&#x60; allows auditors to get a copy of an Asset Report that was previously shared via the &#x60;/asset_report/audit_copy/create&#x60; endpoint.  The caller of &#x60;/asset_report/audit_copy/create&#x60; must provide the &#x60;audit_copy_token&#x60; to the auditor.  This token can then be used to call &#x60;/asset_report/audit_copy/create&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportAuditCopyGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetReportGetResponse</returns>
        System.Threading.Tasks.Task<AssetReportGetResponse> AssetReportAuditCopyGetAsync(AssetReportAuditCopyGetRequest assetReportAuditCopyGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an Asset Report Audit Copy
        /// </summary>
        /// <remarks>
        /// &#x60;/asset_report/audit_copy/get&#x60; allows auditors to get a copy of an Asset Report that was previously shared via the &#x60;/asset_report/audit_copy/create&#x60; endpoint.  The caller of &#x60;/asset_report/audit_copy/create&#x60; must provide the &#x60;audit_copy_token&#x60; to the auditor.  This token can then be used to call &#x60;/asset_report/audit_copy/create&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportAuditCopyGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetReportGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetReportGetResponse>> AssetReportAuditCopyGetWithHttpInfoAsync(AssetReportAuditCopyGetRequest assetReportAuditCopyGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove Asset Report Audit Copy
        /// </summary>
        /// <remarks>
        /// The &#x60;/asset_report/audit_copy/remove&#x60; endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the &#x60;audit_copy_token&#x60; associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportAuditCopyRemoveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetReportAuditCopyRemoveResponse</returns>
        System.Threading.Tasks.Task<AssetReportAuditCopyRemoveResponse> AssetReportAuditCopyRemoveAsync(AssetReportAuditCopyRemoveRequest assetReportAuditCopyRemoveRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove Asset Report Audit Copy
        /// </summary>
        /// <remarks>
        /// The &#x60;/asset_report/audit_copy/remove&#x60; endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the &#x60;audit_copy_token&#x60; associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportAuditCopyRemoveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetReportAuditCopyRemoveResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetReportAuditCopyRemoveResponse>> AssetReportAuditCopyRemoveWithHttpInfoAsync(AssetReportAuditCopyRemoveRequest assetReportAuditCopyRemoveRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create an Asset Report
        /// </summary>
        /// <remarks>
        /// The &#x60;/asset_report/create&#x60; endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the &#x60;asset_report_token&#x60; return value to the &#x60;/asset_report/get&#x60; or &#x60;/asset_report/pdf/get&#x60; endpoints.  The Asset Report takes some time to be created and is not available immediately after calling &#x60;/asset_report/create&#x60;. When the Asset Report is ready to be retrieved using &#x60;/asset_report/get&#x60; or &#x60;/asset_report/pdf/get&#x60;, Plaid will fire a &#x60;PRODUCT_READY&#x60; webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/webhooks/#assets-webhooks).  The &#x60;/asset_report/create&#x60; endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the &#x60;/asset_report/refresh&#x60; endpoint.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetReportCreateResponse</returns>
        System.Threading.Tasks.Task<AssetReportCreateResponse> AssetReportCreateAsync(AssetReportCreateRequest assetReportCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create an Asset Report
        /// </summary>
        /// <remarks>
        /// The &#x60;/asset_report/create&#x60; endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the &#x60;asset_report_token&#x60; return value to the &#x60;/asset_report/get&#x60; or &#x60;/asset_report/pdf/get&#x60; endpoints.  The Asset Report takes some time to be created and is not available immediately after calling &#x60;/asset_report/create&#x60;. When the Asset Report is ready to be retrieved using &#x60;/asset_report/get&#x60; or &#x60;/asset_report/pdf/get&#x60;, Plaid will fire a &#x60;PRODUCT_READY&#x60; webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/webhooks/#assets-webhooks).  The &#x60;/asset_report/create&#x60; endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the &#x60;/asset_report/refresh&#x60; endpoint.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetReportCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetReportCreateResponse>> AssetReportCreateWithHttpInfoAsync(AssetReportCreateRequest assetReportCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Filter Asset Report
        /// </summary>
        /// <remarks>
        /// By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the &#x60;/accounts/get&#x60; endpoint. To narrow an Asset Report to only a subset of accounts, use the &#x60;/asset_report/filter&#x60; endpoint.  To exclude certain Accounts from an Asset Report, first use the &#x60;/asset_report/create&#x60; endpoint to create the report, then send the &#x60;asset_report_token&#x60; along with a list of &#x60;account_ids&#x60; to exclude to the &#x60;/asset_report/filter&#x60; endpoint, to create a new Asset Report which contains only a subset of the original Asset Report&#39;s data.  Because Asset Reports are immutable, calling &#x60;/asset_report/filter&#x60; does not alter the original Asset Report in any way; rather, &#x60;/asset_report/filter&#x60; creates a new Asset Report with a new token and id. Asset Reports created via &#x60;/asset_report/filter&#x60; do not contain new Asset data, and are not billed.  Plaid will fire a [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/webhooks) webhook once generation of the filtered Asset Report has completed.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportFilterRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetReportFilterResponse</returns>
        System.Threading.Tasks.Task<AssetReportFilterResponse> AssetReportFilterAsync(AssetReportFilterRequest assetReportFilterRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Filter Asset Report
        /// </summary>
        /// <remarks>
        /// By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the &#x60;/accounts/get&#x60; endpoint. To narrow an Asset Report to only a subset of accounts, use the &#x60;/asset_report/filter&#x60; endpoint.  To exclude certain Accounts from an Asset Report, first use the &#x60;/asset_report/create&#x60; endpoint to create the report, then send the &#x60;asset_report_token&#x60; along with a list of &#x60;account_ids&#x60; to exclude to the &#x60;/asset_report/filter&#x60; endpoint, to create a new Asset Report which contains only a subset of the original Asset Report&#39;s data.  Because Asset Reports are immutable, calling &#x60;/asset_report/filter&#x60; does not alter the original Asset Report in any way; rather, &#x60;/asset_report/filter&#x60; creates a new Asset Report with a new token and id. Asset Reports created via &#x60;/asset_report/filter&#x60; do not contain new Asset data, and are not billed.  Plaid will fire a [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/webhooks) webhook once generation of the filtered Asset Report has completed.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportFilterRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetReportFilterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetReportFilterResponse>> AssetReportFilterWithHttpInfoAsync(AssetReportFilterRequest assetReportFilterRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an Asset Report
        /// </summary>
        /// <remarks>
        /// The &#x60;/asset_report/get&#x60; endpoint retrieves the Asset Report in JSON format. Before calling &#x60;/asset_report/get&#x60;, you must first create the Asset Report using &#x60;/asset_report/create&#x60; (or filter an Asset Report using &#x60;/asset_report/filter&#x60;) and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.  To retrieve an Asset Report with Insights, call the &#x60;/asset_report/get&#x60; endpoint with &#x60;include_insights&#x60; set to &#x60;true&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetReportGetResponse</returns>
        System.Threading.Tasks.Task<AssetReportGetResponse> AssetReportGetAsync(AssetReportGetRequest assetReportGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an Asset Report
        /// </summary>
        /// <remarks>
        /// The &#x60;/asset_report/get&#x60; endpoint retrieves the Asset Report in JSON format. Before calling &#x60;/asset_report/get&#x60;, you must first create the Asset Report using &#x60;/asset_report/create&#x60; (or filter an Asset Report using &#x60;/asset_report/filter&#x60;) and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.  To retrieve an Asset Report with Insights, call the &#x60;/asset_report/get&#x60; endpoint with &#x60;include_insights&#x60; set to &#x60;true&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetReportGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetReportGetResponse>> AssetReportGetWithHttpInfoAsync(AssetReportGetRequest assetReportGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a PDF Asset Report
        /// </summary>
        /// <remarks>
        /// The &#x60;/asset_report/pdf/get&#x60; endpoint retrieves the Asset Report in PDF format. Before calling &#x60;/asset_report/pdf/get&#x60;, you must first create the Asset Report using &#x60;/asset_report/create&#x60; (or filter an Asset Report using &#x60;/asset_report/filter&#x60;) and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  The response to &#x60;/asset_report/pdf/get&#x60; is the PDF binary data. The &#x60;request_id&#x60;  is returned in the &#x60;Plaid-Request-ID&#x60; header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportPDFGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> AssetReportPdfGetAsync(AssetReportPDFGetRequest assetReportPDFGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a PDF Asset Report
        /// </summary>
        /// <remarks>
        /// The &#x60;/asset_report/pdf/get&#x60; endpoint retrieves the Asset Report in PDF format. Before calling &#x60;/asset_report/pdf/get&#x60;, you must first create the Asset Report using &#x60;/asset_report/create&#x60; (or filter an Asset Report using &#x60;/asset_report/filter&#x60;) and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  The response to &#x60;/asset_report/pdf/get&#x60; is the PDF binary data. The &#x60;request_id&#x60;  is returned in the &#x60;Plaid-Request-ID&#x60; header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportPDFGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> AssetReportPdfGetWithHttpInfoAsync(AssetReportPDFGetRequest assetReportPDFGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Refresh an Asset Report
        /// </summary>
        /// <remarks>
        /// An Asset Report is an immutable snapshot of a user&#39;s assets. In order to \&quot;refresh\&quot; an Asset Report you created previously, you can use the &#x60;/asset_report/refresh&#x60; endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to &#x60;/asset_report/filter&#x60;. By default, the new Asset Report will also use the same parameters you submitted with your original &#x60;/asset_report/create&#x60; request, but the original &#x60;days_requested&#x60; value and the values of any parameters in the &#x60;options&#x60; object can be overridden with new values. To change these arguments, simply supply new values for them in your request to &#x60;/asset_report/refresh&#x60;. Submit an empty string (\&quot;\&quot;) for any previously-populated fields you would like set as empty.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportRefreshRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetReportRefreshResponse</returns>
        System.Threading.Tasks.Task<AssetReportRefreshResponse> AssetReportRefreshAsync(AssetReportRefreshRequest assetReportRefreshRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Refresh an Asset Report
        /// </summary>
        /// <remarks>
        /// An Asset Report is an immutable snapshot of a user&#39;s assets. In order to \&quot;refresh\&quot; an Asset Report you created previously, you can use the &#x60;/asset_report/refresh&#x60; endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to &#x60;/asset_report/filter&#x60;. By default, the new Asset Report will also use the same parameters you submitted with your original &#x60;/asset_report/create&#x60; request, but the original &#x60;days_requested&#x60; value and the values of any parameters in the &#x60;options&#x60; object can be overridden with new values. To change these arguments, simply supply new values for them in your request to &#x60;/asset_report/refresh&#x60;. Submit an empty string (\&quot;\&quot;) for any previously-populated fields you would like set as empty.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportRefreshRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetReportRefreshResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetReportRefreshResponse>> AssetReportRefreshWithHttpInfoAsync(AssetReportRefreshRequest assetReportRefreshRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an Asset Report
        /// </summary>
        /// <remarks>
        /// The &#x60;/item/remove&#x60; endpoint allows you to invalidate an &#x60;access_token&#x60;, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The &#x60;/asset_report/remove&#x60; endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its &#x60;asset_report_token&#x60;, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any &#x60;audit_copy_tokens&#x60; associated with the Asset Report.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportRemoveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetReportRemoveResponse</returns>
        System.Threading.Tasks.Task<AssetReportRemoveResponse> AssetReportRemoveAsync(AssetReportRemoveRequest assetReportRemoveRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete an Asset Report
        /// </summary>
        /// <remarks>
        /// The &#x60;/item/remove&#x60; endpoint allows you to invalidate an &#x60;access_token&#x60;, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The &#x60;/asset_report/remove&#x60; endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its &#x60;asset_report_token&#x60;, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any &#x60;audit_copy_tokens&#x60; associated with the Asset Report.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportRemoveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetReportRemoveResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetReportRemoveResponse>> AssetReportRemoveWithHttpInfoAsync(AssetReportRemoveRequest assetReportRemoveRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve auth data
        /// </summary>
        /// <remarks>
        /// The &#x60;/auth/get&#x60; endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item&#39;s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if &#x60;auth&#x60; was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Also note that &#x60;/auth/get&#x60; will not return data for any new accounts opened after the Item was created. To obtain data for new accounts, create a new Item.  Versioning note: In API version 2017-03-08, the schema of the &#x60;numbers&#x60; object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthGetResponse</returns>
        System.Threading.Tasks.Task<AuthGetResponse> AuthGetAsync(AuthGetRequest authGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve auth data
        /// </summary>
        /// <remarks>
        /// The &#x60;/auth/get&#x60; endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item&#39;s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if &#x60;auth&#x60; was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Also note that &#x60;/auth/get&#x60; will not return data for any new accounts opened after the Item was created. To obtain data for new accounts, create a new Item.  Versioning note: In API version 2017-03-08, the schema of the &#x60;numbers&#x60; object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthGetResponse>> AuthGetWithHttpInfoAsync(AuthGetRequest authGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get balance of your Bank Transfer account
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/bank_transfer/balance/get&#x60; endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferBalanceGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransferBalanceGetResponse</returns>
        System.Threading.Tasks.Task<BankTransferBalanceGetResponse> BankTransferBalanceGetAsync(BankTransferBalanceGetRequest bankTransferBalanceGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get balance of your Bank Transfer account
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/bank_transfer/balance/get&#x60; endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferBalanceGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransferBalanceGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankTransferBalanceGetResponse>> BankTransferBalanceGetWithHttpInfoAsync(BankTransferBalanceGetRequest bankTransferBalanceGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancel a bank transfer
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/bank_transfer/cancel&#x60; endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the &#x60;cancellable&#x60; property returned by &#x60;/bank_transfer/get&#x60; is &#x60;true&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferCancelRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransferCancelResponse</returns>
        System.Threading.Tasks.Task<BankTransferCancelResponse> BankTransferCancelAsync(BankTransferCancelRequest bankTransferCancelRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel a bank transfer
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/bank_transfer/cancel&#x60; endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the &#x60;cancellable&#x60; property returned by &#x60;/bank_transfer/get&#x60; is &#x60;true&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferCancelRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransferCancelResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankTransferCancelResponse>> BankTransferCancelWithHttpInfoAsync(BankTransferCancelRequest bankTransferCancelRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a bank transfer
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/bank_transfer/create&#x60; endpoint to initiate a new bank transfer.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransferCreateResponse</returns>
        System.Threading.Tasks.Task<BankTransferCreateResponse> BankTransferCreateAsync(BankTransferCreateRequest bankTransferCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a bank transfer
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/bank_transfer/create&#x60; endpoint to initiate a new bank transfer.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransferCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankTransferCreateResponse>> BankTransferCreateWithHttpInfoAsync(BankTransferCreateRequest bankTransferCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List bank transfer events
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/bank_transfer/event/list&#x60; endpoint to get a list of bank transfer events based on specified filter criteria.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferEventListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransferEventListResponse</returns>
        System.Threading.Tasks.Task<BankTransferEventListResponse> BankTransferEventListAsync(BankTransferEventListRequest bankTransferEventListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List bank transfer events
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/bank_transfer/event/list&#x60; endpoint to get a list of bank transfer events based on specified filter criteria.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferEventListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransferEventListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankTransferEventListResponse>> BankTransferEventListWithHttpInfoAsync(BankTransferEventListRequest bankTransferEventListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sync bank transfer events
        /// </summary>
        /// <remarks>
        /// &#x60;/bank_transfer/event/sync&#x60; allows you to request up to the next 25 bank transfer events that happened after a specific &#x60;event_id&#x60;. Use the &#x60;/bank_transfer/event/sync&#x60; endpoint to guarantee you have seen all bank transfer events.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferEventSyncRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransferEventSyncResponse</returns>
        System.Threading.Tasks.Task<BankTransferEventSyncResponse> BankTransferEventSyncAsync(BankTransferEventSyncRequest bankTransferEventSyncRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sync bank transfer events
        /// </summary>
        /// <remarks>
        /// &#x60;/bank_transfer/event/sync&#x60; allows you to request up to the next 25 bank transfer events that happened after a specific &#x60;event_id&#x60;. Use the &#x60;/bank_transfer/event/sync&#x60; endpoint to guarantee you have seen all bank transfer events.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferEventSyncRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransferEventSyncResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankTransferEventSyncResponse>> BankTransferEventSyncWithHttpInfoAsync(BankTransferEventSyncRequest bankTransferEventSyncRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a bank transfer
        /// </summary>
        /// <remarks>
        /// The &#x60;/bank_transfer/get&#x60; fetches information about the bank transfer corresponding to the given &#x60;bank_transfer_id&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransferGetResponse</returns>
        System.Threading.Tasks.Task<BankTransferGetResponse> BankTransferGetAsync(BankTransferGetRequest bankTransferGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a bank transfer
        /// </summary>
        /// <remarks>
        /// The &#x60;/bank_transfer/get&#x60; fetches information about the bank transfer corresponding to the given &#x60;bank_transfer_id&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransferGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankTransferGetResponse>> BankTransferGetWithHttpInfoAsync(BankTransferGetRequest bankTransferGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List bank transfers
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/bank_transfer/list&#x60; endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired bank transfers. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransferListResponse</returns>
        System.Threading.Tasks.Task<BankTransferListResponse> BankTransferListAsync(BankTransferListRequest bankTransferListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List bank transfers
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/bank_transfer/list&#x60; endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired bank transfers. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransferListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankTransferListResponse>> BankTransferListWithHttpInfoAsync(BankTransferListRequest bankTransferListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Migrate account into Bank Transfers
        /// </summary>
        /// <remarks>
        /// As an alternative to adding Items via Link, you can also use the &#x60;/bank_transfer/migrate_account&#x60; endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as &#x60;/accounts/balance/get&#x60;, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to &#x60;/bank_transfer/migrate_account&#x60; is not enabled by default; to obtain access, contact your Plaid Account Manager.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferMigrateAccountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransferMigrateAccountResponse</returns>
        System.Threading.Tasks.Task<BankTransferMigrateAccountResponse> BankTransferMigrateAccountAsync(BankTransferMigrateAccountRequest bankTransferMigrateAccountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Migrate account into Bank Transfers
        /// </summary>
        /// <remarks>
        /// As an alternative to adding Items via Link, you can also use the &#x60;/bank_transfer/migrate_account&#x60; endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as &#x60;/accounts/balance/get&#x60;, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to &#x60;/bank_transfer/migrate_account&#x60; is not enabled by default; to obtain access, contact your Plaid Account Manager.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferMigrateAccountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransferMigrateAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankTransferMigrateAccountResponse>> BankTransferMigrateAccountWithHttpInfoAsync(BankTransferMigrateAccountRequest bankTransferMigrateAccountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a sweep
        /// </summary>
        /// <remarks>
        /// The &#x60;/bank_transfer/sweep/get&#x60; endpoint fetches information about the sweep corresponding to the given &#x60;sweep_id&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferSweepGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransferSweepGetResponse</returns>
        System.Threading.Tasks.Task<BankTransferSweepGetResponse> BankTransferSweepGetAsync(BankTransferSweepGetRequest bankTransferSweepGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a sweep
        /// </summary>
        /// <remarks>
        /// The &#x60;/bank_transfer/sweep/get&#x60; endpoint fetches information about the sweep corresponding to the given &#x60;sweep_id&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferSweepGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransferSweepGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankTransferSweepGetResponse>> BankTransferSweepGetWithHttpInfoAsync(BankTransferSweepGetRequest bankTransferSweepGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List sweeps
        /// </summary>
        /// <remarks>
        /// The &#x60;/bank_transfer/sweep/list&#x60; endpoint fetches information about the sweeps matching the given filters.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferSweepListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransferSweepListResponse</returns>
        System.Threading.Tasks.Task<BankTransferSweepListResponse> BankTransferSweepListAsync(BankTransferSweepListRequest bankTransferSweepListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List sweeps
        /// </summary>
        /// <remarks>
        /// The &#x60;/bank_transfer/sweep/list&#x60; endpoint fetches information about the sweeps matching the given filters.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferSweepListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransferSweepListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankTransferSweepListResponse>> BankTransferSweepListWithHttpInfoAsync(BankTransferSweepListRequest bankTransferSweepListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Categories
        /// </summary>
        /// <remarks>
        /// Send a request to the &#x60;/categories/get&#x60; endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoriesGetResponse</returns>
        System.Threading.Tasks.Task<CategoriesGetResponse> CategoriesGetAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Categories
        /// </summary>
        /// <remarks>
        /// Send a request to the &#x60;/categories/get&#x60; endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoriesGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoriesGetResponse>> CategoriesGetWithHttpInfoAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create payment token
        /// </summary>
        /// <remarks>
        /// The &#x60;/payment_initiation/payment/token/create&#x60; endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, &#x60;link_token&#x60;-based flow. The recommended flow is to provide the &#x60;payment_id&#x60; to &#x60;/link/token/create&#x60;, which returns a &#x60;link_token&#x60; used to initialize Link.  The &#x60;/payment_initiation/payment/token/create&#x60; is used to create a &#x60;payment_token&#x60;, which can then be used in Link initialization to enter a payment initiation flow. You can only use a &#x60;payment_token&#x60; once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentInitiationPaymentTokenCreateResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<PaymentInitiationPaymentTokenCreateResponse> CreatePaymentTokenAsync(PaymentInitiationPaymentTokenCreateRequest paymentInitiationPaymentTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create payment token
        /// </summary>
        /// <remarks>
        /// The &#x60;/payment_initiation/payment/token/create&#x60; endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, &#x60;link_token&#x60;-based flow. The recommended flow is to provide the &#x60;payment_id&#x60; to &#x60;/link/token/create&#x60;, which returns a &#x60;link_token&#x60; used to initialize Link.  The &#x60;/payment_initiation/payment/token/create&#x60; is used to create a &#x60;payment_token&#x60;, which can then be used in Link initialization to enter a payment initiation flow. You can only use a &#x60;payment_token&#x60; once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentInitiationPaymentTokenCreateResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<PaymentInitiationPaymentTokenCreateResponse>> CreatePaymentTokenWithHttpInfoAsync(PaymentInitiationPaymentTokenCreateRequest paymentInitiationPaymentTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a deposit switch without using Plaid Exchange
        /// </summary>
        /// <remarks>
        /// This endpoint provides an alternative to &#x60;/deposit_switch/create&#x60; for customers who have not yet fully integrated with Plaid Exchange. Like &#x60;/deposit_switch/create&#x60;, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositSwitchAltCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DepositSwitchAltCreateResponse</returns>
        System.Threading.Tasks.Task<DepositSwitchAltCreateResponse> DepositSwitchAltCreateAsync(DepositSwitchAltCreateRequest depositSwitchAltCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a deposit switch without using Plaid Exchange
        /// </summary>
        /// <remarks>
        /// This endpoint provides an alternative to &#x60;/deposit_switch/create&#x60; for customers who have not yet fully integrated with Plaid Exchange. Like &#x60;/deposit_switch/create&#x60;, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositSwitchAltCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DepositSwitchAltCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DepositSwitchAltCreateResponse>> DepositSwitchAltCreateWithHttpInfoAsync(DepositSwitchAltCreateRequest depositSwitchAltCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a deposit switch
        /// </summary>
        /// <remarks>
        /// This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositSwitchCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DepositSwitchCreateResponse</returns>
        System.Threading.Tasks.Task<DepositSwitchCreateResponse> DepositSwitchCreateAsync(DepositSwitchCreateRequest depositSwitchCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a deposit switch
        /// </summary>
        /// <remarks>
        /// This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositSwitchCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DepositSwitchCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DepositSwitchCreateResponse>> DepositSwitchCreateWithHttpInfoAsync(DepositSwitchCreateRequest depositSwitchCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a deposit switch
        /// </summary>
        /// <remarks>
        /// This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user&#39;s direct deposit allocation preferences.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositSwitchGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DepositSwitchGetResponse</returns>
        System.Threading.Tasks.Task<DepositSwitchGetResponse> DepositSwitchGetAsync(DepositSwitchGetRequest depositSwitchGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a deposit switch
        /// </summary>
        /// <remarks>
        /// This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user&#39;s direct deposit allocation preferences.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositSwitchGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DepositSwitchGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DepositSwitchGetResponse>> DepositSwitchGetWithHttpInfoAsync(DepositSwitchGetRequest depositSwitchGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a deposit switch token
        /// </summary>
        /// <remarks>
        /// In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositSwitchTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DepositSwitchTokenCreateResponse</returns>
        System.Threading.Tasks.Task<DepositSwitchTokenCreateResponse> DepositSwitchTokenCreateAsync(DepositSwitchTokenCreateRequest depositSwitchTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a deposit switch token
        /// </summary>
        /// <remarks>
        /// In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositSwitchTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DepositSwitchTokenCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DepositSwitchTokenCreateResponse>> DepositSwitchTokenCreateWithHttpInfoAsync(DepositSwitchTokenCreateRequest depositSwitchTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search employer database
        /// </summary>
        /// <remarks>
        /// &#x60;/employers/search&#x60; allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user&#39;s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employersSearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmployersSearchResponse</returns>
        System.Threading.Tasks.Task<EmployersSearchResponse> EmployersSearchAsync(EmployersSearchRequest employersSearchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search employer database
        /// </summary>
        /// <remarks>
        /// &#x60;/employers/search&#x60; allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user&#39;s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employersSearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmployersSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployersSearchResponse>> EmployersSearchWithHttpInfoAsync(EmployersSearchRequest employersSearchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a summary of an individual&#39;s employment information
        /// </summary>
        /// <remarks>
        /// &#x60;/employment/verification/get&#x60; returns a list of employments through a user payroll that was verified by an end user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentVerificationGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmploymentVerificationGetResponse</returns>
        System.Threading.Tasks.Task<EmploymentVerificationGetResponse> EmploymentVerificationGetAsync(EmploymentVerificationGetRequest employmentVerificationGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a summary of an individual&#39;s employment information
        /// </summary>
        /// <remarks>
        /// &#x60;/employment/verification/get&#x60; returns a list of employments through a user payroll that was verified by an end user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentVerificationGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmploymentVerificationGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmploymentVerificationGetResponse>> EmploymentVerificationGetWithHttpInfoAsync(EmploymentVerificationGetRequest employmentVerificationGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve identity data
        /// </summary>
        /// <remarks>
        /// The &#x60;/identity/get&#x60; endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  Note: This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdentityGetResponse</returns>
        System.Threading.Tasks.Task<IdentityGetResponse> IdentityGetAsync(IdentityGetRequest identityGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve identity data
        /// </summary>
        /// <remarks>
        /// The &#x60;/identity/get&#x60; endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  Note: This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdentityGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdentityGetResponse>> IdentityGetWithHttpInfoAsync(IdentityGetRequest identityGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// (Deprecated) Create an income verification instance
        /// </summary>
        /// <remarks>
        /// &#x60;/income/verification/create&#x60; begins the income verification process by returning an &#x60;income_verification_id&#x60;. You can then provide the &#x60;income_verification_id&#x60; to &#x60;/link/token/create&#x60; under the &#x60;income_verification&#x60; parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an &#x60;INCOME&#x60; webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IncomeVerificationCreateResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<IncomeVerificationCreateResponse> IncomeVerificationCreateAsync(IncomeVerificationCreateRequest incomeVerificationCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// (Deprecated) Create an income verification instance
        /// </summary>
        /// <remarks>
        /// &#x60;/income/verification/create&#x60; begins the income verification process by returning an &#x60;income_verification_id&#x60;. You can then provide the &#x60;income_verification_id&#x60; to &#x60;/link/token/create&#x60; under the &#x60;income_verification&#x60; parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an &#x60;INCOME&#x60; webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IncomeVerificationCreateResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<IncomeVerificationCreateResponse>> IncomeVerificationCreateWithHttpInfoAsync(IncomeVerificationCreateRequest incomeVerificationCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Download the original documents used for income verification
        /// </summary>
        /// <remarks>
        /// &#x60;/income/verification/documents/download&#x60; provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to &#x60;/income/verification/documents/download&#x60; is a ZIP file in binary data. If a &#x60;document_id&#x60; is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The &#x60;request_id&#x60; is returned in the &#x60;Plaid-Request-ID&#x60; header.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationDocumentsDownloadRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> IncomeVerificationDocumentsDownloadAsync(IncomeVerificationDocumentsDownloadRequest incomeVerificationDocumentsDownloadRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Download the original documents used for income verification
        /// </summary>
        /// <remarks>
        /// &#x60;/income/verification/documents/download&#x60; provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to &#x60;/income/verification/documents/download&#x60; is a ZIP file in binary data. If a &#x60;document_id&#x60; is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The &#x60;request_id&#x60; is returned in the &#x60;Plaid-Request-ID&#x60; header.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationDocumentsDownloadRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> IncomeVerificationDocumentsDownloadWithHttpInfoAsync(IncomeVerificationDocumentsDownloadRequest incomeVerificationDocumentsDownloadRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// (Deprecated) Retrieve information from a single paystub used for income verification
        /// </summary>
        /// <remarks>
        /// /income/verification/paystub/get returns information from a single paystub used for income verification
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationPaystubGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IncomeVerificationPaystubGetResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<IncomeVerificationPaystubGetResponse> IncomeVerificationPaystubGetAsync(IncomeVerificationPaystubGetRequest incomeVerificationPaystubGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// (Deprecated) Retrieve information from a single paystub used for income verification
        /// </summary>
        /// <remarks>
        /// /income/verification/paystub/get returns information from a single paystub used for income verification
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationPaystubGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IncomeVerificationPaystubGetResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<IncomeVerificationPaystubGetResponse>> IncomeVerificationPaystubGetWithHttpInfoAsync(IncomeVerificationPaystubGetRequest incomeVerificationPaystubGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve information from the paystubs used for income verification
        /// </summary>
        /// <remarks>
        /// &#x60;/income/verification/paystubs/get&#x60; returns the information collected from the paystubs that were used to verify an end user&#39;s income. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationPaystubsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IncomeVerificationPaystubsGetResponse</returns>
        System.Threading.Tasks.Task<IncomeVerificationPaystubsGetResponse> IncomeVerificationPaystubsGetAsync(IncomeVerificationPaystubsGetRequest incomeVerificationPaystubsGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve information from the paystubs used for income verification
        /// </summary>
        /// <remarks>
        /// &#x60;/income/verification/paystubs/get&#x60; returns the information collected from the paystubs that were used to verify an end user&#39;s income. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationPaystubsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IncomeVerificationPaystubsGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IncomeVerificationPaystubsGetResponse>> IncomeVerificationPaystubsGetWithHttpInfoAsync(IncomeVerificationPaystubsGetRequest incomeVerificationPaystubsGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check digital income verification eligibility and optimize conversion
        /// </summary>
        /// <remarks>
        /// &#x60;/income/verification/precheck&#x60; is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a &#x60;precheck_id&#x60; that can be provided to &#x60;/link/token/create&#x60;. If the user is eligible for digital verification, providing the &#x60;precheck_id&#x60; in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the &#x60;precheck_id&#x60; can still be provided to &#x60;/link/token/create&#x60; and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either &#x60;employer&#x60; or &#x60;transactions_access_tokens&#x60; data will increase the chance of receiving a useful result.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationPrecheckRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IncomeVerificationPrecheckResponse</returns>
        System.Threading.Tasks.Task<IncomeVerificationPrecheckResponse> IncomeVerificationPrecheckAsync(IncomeVerificationPrecheckRequest incomeVerificationPrecheckRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check digital income verification eligibility and optimize conversion
        /// </summary>
        /// <remarks>
        /// &#x60;/income/verification/precheck&#x60; is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a &#x60;precheck_id&#x60; that can be provided to &#x60;/link/token/create&#x60;. If the user is eligible for digital verification, providing the &#x60;precheck_id&#x60; in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the &#x60;precheck_id&#x60; can still be provided to &#x60;/link/token/create&#x60; and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either &#x60;employer&#x60; or &#x60;transactions_access_tokens&#x60; data will increase the chance of receiving a useful result.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationPrecheckRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IncomeVerificationPrecheckResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IncomeVerificationPrecheckResponse>> IncomeVerificationPrecheckWithHttpInfoAsync(IncomeVerificationPrecheckRequest incomeVerificationPrecheckRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Refresh an income verification
        /// </summary>
        /// <remarks>
        /// &#x60;/income/verification/refresh&#x60; refreshes a given income verification.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationRefreshRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IncomeVerificationRefreshResponse</returns>
        System.Threading.Tasks.Task<IncomeVerificationRefreshResponse> IncomeVerificationRefreshAsync(IncomeVerificationRefreshRequest incomeVerificationRefreshRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Refresh an income verification
        /// </summary>
        /// <remarks>
        /// &#x60;/income/verification/refresh&#x60; refreshes a given income verification.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationRefreshRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IncomeVerificationRefreshResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IncomeVerificationRefreshResponse>> IncomeVerificationRefreshWithHttpInfoAsync(IncomeVerificationRefreshRequest incomeVerificationRefreshRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// (Deprecated) Retrieve a summary of information derived from income verification
        /// </summary>
        /// <remarks>
        /// &#x60;/income/verification/summary/get&#x60; returns a verification summary for the income that was verified for an end user. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationSummaryGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IncomeVerificationSummaryGetResponse</returns>
        System.Threading.Tasks.Task<IncomeVerificationSummaryGetResponse> IncomeVerificationSummaryGetAsync(IncomeVerificationSummaryGetRequest incomeVerificationSummaryGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// (Deprecated) Retrieve a summary of information derived from income verification
        /// </summary>
        /// <remarks>
        /// &#x60;/income/verification/summary/get&#x60; returns a verification summary for the income that was verified for an end user. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationSummaryGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IncomeVerificationSummaryGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IncomeVerificationSummaryGetResponse>> IncomeVerificationSummaryGetWithHttpInfoAsync(IncomeVerificationSummaryGetRequest incomeVerificationSummaryGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve information from the tax documents used for income verification
        /// </summary>
        /// <remarks>
        /// &#x60;/income/verification/taxforms/get&#x60; returns the information collected from forms that were used to verify an end user&#39;s income. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IncomeVerificationTaxformsGetResponse</returns>
        System.Threading.Tasks.Task<IncomeVerificationTaxformsGetResponse> IncomeVerificationTaxformsGetAsync(Dictionary<string, Object> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve information from the tax documents used for income verification
        /// </summary>
        /// <remarks>
        /// &#x60;/income/verification/taxforms/get&#x60; returns the information collected from forms that were used to verify an end user&#39;s income. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IncomeVerificationTaxformsGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IncomeVerificationTaxformsGetResponse>> IncomeVerificationTaxformsGetWithHttpInfoAsync(Dictionary<string, Object> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get details of all supported institutions
        /// </summary>
        /// <remarks>
        /// Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InstitutionsGetResponse</returns>
        System.Threading.Tasks.Task<InstitutionsGetResponse> InstitutionsGetAsync(InstitutionsGetRequest institutionsGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get details of all supported institutions
        /// </summary>
        /// <remarks>
        /// Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InstitutionsGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstitutionsGetResponse>> InstitutionsGetWithHttpInfoAsync(InstitutionsGetRequest institutionsGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get details of an institution
        /// </summary>
        /// <remarks>
        /// Returns a JSON response containing details on a specified financial institution currently supported by Plaid.   Versioning note: API versions 2019-05-29 and earlier allow use of the &#x60;public_key&#x60; parameter instead of the &#x60;client_id&#x60; and &#x60;secret&#x60; to authenticate to this endpoint. The &#x60;public_key&#x60; has been deprecated; all customers are encouraged to use &#x60;client_id&#x60; and &#x60;secret&#x60; instead. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionsGetByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InstitutionsGetByIdResponse</returns>
        System.Threading.Tasks.Task<InstitutionsGetByIdResponse> InstitutionsGetByIdAsync(InstitutionsGetByIdRequest institutionsGetByIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get details of an institution
        /// </summary>
        /// <remarks>
        /// Returns a JSON response containing details on a specified financial institution currently supported by Plaid.   Versioning note: API versions 2019-05-29 and earlier allow use of the &#x60;public_key&#x60; parameter instead of the &#x60;client_id&#x60; and &#x60;secret&#x60; to authenticate to this endpoint. The &#x60;public_key&#x60; has been deprecated; all customers are encouraged to use &#x60;client_id&#x60; and &#x60;secret&#x60; instead. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionsGetByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InstitutionsGetByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstitutionsGetByIdResponse>> InstitutionsGetByIdWithHttpInfoAsync(InstitutionsGetByIdRequest institutionsGetByIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search institutions
        /// </summary>
        /// <remarks>
        /// Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the &#x60;public_key&#x60; parameter instead of the &#x60;client_id&#x60; and &#x60;secret&#x60; parameters to authenticate to this endpoint. The &#x60;public_key&#x60; parameter has since been deprecated; all customers are encouraged to use &#x60;client_id&#x60; and &#x60;secret&#x60; instead. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionsSearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InstitutionsSearchResponse</returns>
        System.Threading.Tasks.Task<InstitutionsSearchResponse> InstitutionsSearchAsync(InstitutionsSearchRequest institutionsSearchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search institutions
        /// </summary>
        /// <remarks>
        /// Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the &#x60;public_key&#x60; parameter instead of the &#x60;client_id&#x60; and &#x60;secret&#x60; parameters to authenticate to this endpoint. The &#x60;public_key&#x60; parameter has since been deprecated; all customers are encouraged to use &#x60;client_id&#x60; and &#x60;secret&#x60; instead. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionsSearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InstitutionsSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstitutionsSearchResponse>> InstitutionsSearchWithHttpInfoAsync(InstitutionsSearchRequest institutionsSearchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Investment holdings
        /// </summary>
        /// <remarks>
        /// The &#x60;/investments/holdings/get&#x60; endpoint allows developers to receive user-authorized stock position data for &#x60;investment&#x60;-type accounts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investmentsHoldingsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InvestmentsHoldingsGetResponse</returns>
        System.Threading.Tasks.Task<InvestmentsHoldingsGetResponse> InvestmentsHoldingsGetAsync(InvestmentsHoldingsGetRequest investmentsHoldingsGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Investment holdings
        /// </summary>
        /// <remarks>
        /// The &#x60;/investments/holdings/get&#x60; endpoint allows developers to receive user-authorized stock position data for &#x60;investment&#x60;-type accounts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investmentsHoldingsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InvestmentsHoldingsGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvestmentsHoldingsGetResponse>> InvestmentsHoldingsGetWithHttpInfoAsync(InvestmentsHoldingsGetRequest investmentsHoldingsGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get investment transactions
        /// </summary>
        /// <remarks>
        /// The &#x60;/investments/transactions/get&#x60; endpoint allows developers to retrieve user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the &#x60;total_investment_transactions&#x60; response body field to fetch all available investment transactions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investmentsTransactionsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InvestmentsTransactionsGetResponse</returns>
        System.Threading.Tasks.Task<InvestmentsTransactionsGetResponse> InvestmentsTransactionsGetAsync(InvestmentsTransactionsGetRequest investmentsTransactionsGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get investment transactions
        /// </summary>
        /// <remarks>
        /// The &#x60;/investments/transactions/get&#x60; endpoint allows developers to retrieve user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the &#x60;total_investment_transactions&#x60; response body field to fetch all available investment transactions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investmentsTransactionsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InvestmentsTransactionsGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvestmentsTransactionsGetResponse>> InvestmentsTransactionsGetWithHttpInfoAsync(InvestmentsTransactionsGetRequest investmentsTransactionsGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Invalidate access_token
        /// </summary>
        /// <remarks>
        /// By default, the &#x60;access_token&#x60; associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the &#x60;/item/access_token/invalidate&#x60; endpoint to rotate the &#x60;access_token&#x60; associated with an Item. The endpoint returns a new &#x60;access_token&#x60; and immediately invalidates the previous &#x60;access_token&#x60;. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemAccessTokenInvalidateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ItemAccessTokenInvalidateResponse</returns>
        System.Threading.Tasks.Task<ItemAccessTokenInvalidateResponse> ItemAccessTokenInvalidateAsync(ItemAccessTokenInvalidateRequest itemAccessTokenInvalidateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Invalidate access_token
        /// </summary>
        /// <remarks>
        /// By default, the &#x60;access_token&#x60; associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the &#x60;/item/access_token/invalidate&#x60; endpoint to rotate the &#x60;access_token&#x60; associated with an Item. The endpoint returns a new &#x60;access_token&#x60; and immediately invalidates the previous &#x60;access_token&#x60;. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemAccessTokenInvalidateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ItemAccessTokenInvalidateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemAccessTokenInvalidateResponse>> ItemAccessTokenInvalidateWithHttpInfoAsync(ItemAccessTokenInvalidateRequest itemAccessTokenInvalidateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List a user’s connected applications
        /// </summary>
        /// <remarks>
        /// List a user’s connected applications
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemApplicationListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ItemApplicationListResponse</returns>
        System.Threading.Tasks.Task<ItemApplicationListResponse> ItemApplicationListAsync(ItemApplicationListRequest itemApplicationListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List a user’s connected applications
        /// </summary>
        /// <remarks>
        /// List a user’s connected applications
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemApplicationListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ItemApplicationListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemApplicationListResponse>> ItemApplicationListWithHttpInfoAsync(ItemApplicationListRequest itemApplicationListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the scopes of access for a particular application
        /// </summary>
        /// <remarks>
        /// Enable consumers to update product access on selected accounts for an application.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemApplicationScopesUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ItemApplicationScopesUpdateResponse</returns>
        System.Threading.Tasks.Task<ItemApplicationScopesUpdateResponse> ItemApplicationScopesUpdateAsync(ItemApplicationScopesUpdateRequest itemApplicationScopesUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the scopes of access for a particular application
        /// </summary>
        /// <remarks>
        /// Enable consumers to update product access on selected accounts for an application.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemApplicationScopesUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ItemApplicationScopesUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemApplicationScopesUpdateResponse>> ItemApplicationScopesUpdateWithHttpInfoAsync(ItemApplicationScopesUpdateRequest itemApplicationScopesUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create public token
        /// </summary>
        /// <remarks>
        /// Note: As of July 2020, the &#x60;/item/public_token/create&#x60; endpoint is deprecated. Instead, use &#x60;/link/token/create&#x60; with an &#x60;access_token&#x60; to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the &#x60;/item/public_token/create&#x60; endpoint and then initialize Link with that &#x60;public_token&#x60;.  A &#x60;public_token&#x60; is one-time use and expires after 30 minutes. You use a &#x60;public_token&#x60; to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a &#x60;public_token&#x60; for an Item even if you did not use Link to create the Item originally.  The &#x60;/item/public_token/create&#x60; endpoint is **not** used to create your initial &#x60;public_token&#x60;. If you have not already received an &#x60;access_token&#x60; for a specific Item, use Link to obtain your &#x60;public_token&#x60; instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemPublicTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ItemPublicTokenCreateResponse</returns>
        System.Threading.Tasks.Task<ItemPublicTokenCreateResponse> ItemCreatePublicTokenAsync(ItemPublicTokenCreateRequest itemPublicTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create public token
        /// </summary>
        /// <remarks>
        /// Note: As of July 2020, the &#x60;/item/public_token/create&#x60; endpoint is deprecated. Instead, use &#x60;/link/token/create&#x60; with an &#x60;access_token&#x60; to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the &#x60;/item/public_token/create&#x60; endpoint and then initialize Link with that &#x60;public_token&#x60;.  A &#x60;public_token&#x60; is one-time use and expires after 30 minutes. You use a &#x60;public_token&#x60; to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a &#x60;public_token&#x60; for an Item even if you did not use Link to create the Item originally.  The &#x60;/item/public_token/create&#x60; endpoint is **not** used to create your initial &#x60;public_token&#x60;. If you have not already received an &#x60;access_token&#x60; for a specific Item, use Link to obtain your &#x60;public_token&#x60; instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemPublicTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ItemPublicTokenCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemPublicTokenCreateResponse>> ItemCreatePublicTokenWithHttpInfoAsync(ItemPublicTokenCreateRequest itemPublicTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an Item
        /// </summary>
        /// <remarks>
        /// Returns information about the status of an Item.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ItemGetResponse</returns>
        System.Threading.Tasks.Task<ItemGetResponse> ItemGetAsync(ItemGetRequest itemGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an Item
        /// </summary>
        /// <remarks>
        /// Returns information about the status of an Item.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ItemGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemGetResponse>> ItemGetWithHttpInfoAsync(ItemGetRequest itemGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Import Item
        /// </summary>
        /// <remarks>
        /// &#x60;/item/import&#x60; creates an Item via your Plaid Exchange Integration and returns an &#x60;access_token&#x60;. As part of an &#x60;/item/import&#x60; request, you will include a User ID (&#x60;user_auth.user_id&#x60;) and Authentication Token (&#x60;user_auth.auth_token&#x60;) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via &#x60;/item/import&#x60;, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated. This will automatically generate the Plaid native account ID for the account the user will switch their direct deposit to (&#x60;target_account_id&#x60;).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemImportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ItemImportResponse</returns>
        System.Threading.Tasks.Task<ItemImportResponse> ItemImportAsync(ItemImportRequest itemImportRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Import Item
        /// </summary>
        /// <remarks>
        /// &#x60;/item/import&#x60; creates an Item via your Plaid Exchange Integration and returns an &#x60;access_token&#x60;. As part of an &#x60;/item/import&#x60; request, you will include a User ID (&#x60;user_auth.user_id&#x60;) and Authentication Token (&#x60;user_auth.auth_token&#x60;) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via &#x60;/item/import&#x60;, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated. This will automatically generate the Plaid native account ID for the account the user will switch their direct deposit to (&#x60;target_account_id&#x60;).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemImportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ItemImportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemImportResponse>> ItemImportWithHttpInfoAsync(ItemImportRequest itemImportRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Exchange public token for an access token
        /// </summary>
        /// <remarks>
        /// Exchange a Link &#x60;public_token&#x60; for an API &#x60;access_token&#x60;. Link hands off the &#x60;public_token&#x60; client-side via the &#x60;onSuccess&#x60; callback once a user has successfully created an Item. The &#x60;public_token&#x60; is ephemeral and expires after 30 minutes.  The response also includes an &#x60;item_id&#x60; that should be stored with the &#x60;access_token&#x60;. The &#x60;item_id&#x60; is used to identify an Item in a webhook. The &#x60;item_id&#x60; can also be retrieved by making an &#x60;/item/get&#x60; request.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemPublicTokenExchangeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ItemPublicTokenExchangeResponse</returns>
        System.Threading.Tasks.Task<ItemPublicTokenExchangeResponse> ItemPublicTokenExchangeAsync(ItemPublicTokenExchangeRequest itemPublicTokenExchangeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Exchange public token for an access token
        /// </summary>
        /// <remarks>
        /// Exchange a Link &#x60;public_token&#x60; for an API &#x60;access_token&#x60;. Link hands off the &#x60;public_token&#x60; client-side via the &#x60;onSuccess&#x60; callback once a user has successfully created an Item. The &#x60;public_token&#x60; is ephemeral and expires after 30 minutes.  The response also includes an &#x60;item_id&#x60; that should be stored with the &#x60;access_token&#x60;. The &#x60;item_id&#x60; is used to identify an Item in a webhook. The &#x60;item_id&#x60; can also be retrieved by making an &#x60;/item/get&#x60; request.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemPublicTokenExchangeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ItemPublicTokenExchangeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemPublicTokenExchangeResponse>> ItemPublicTokenExchangeWithHttpInfoAsync(ItemPublicTokenExchangeRequest itemPublicTokenExchangeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove an Item
        /// </summary>
        /// <remarks>
        /// The &#x60;/item/remove&#x60;  endpoint allows you to remove an Item. Once removed, the &#x60;access_token&#x60;  associated with the Item is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an &#x60;/item/remove&#x60;  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via &#x60;/item/remove&#x60; may still show as an active connection in the institution&#39;s OAuth permission manager.  API versions 2019-05-29 and earlier return a &#x60;removed&#x60; boolean as part of the response.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemRemoveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ItemRemoveResponse</returns>
        System.Threading.Tasks.Task<ItemRemoveResponse> ItemRemoveAsync(ItemRemoveRequest itemRemoveRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove an Item
        /// </summary>
        /// <remarks>
        /// The &#x60;/item/remove&#x60;  endpoint allows you to remove an Item. Once removed, the &#x60;access_token&#x60;  associated with the Item is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an &#x60;/item/remove&#x60;  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via &#x60;/item/remove&#x60; may still show as an active connection in the institution&#39;s OAuth permission manager.  API versions 2019-05-29 and earlier return a &#x60;removed&#x60; boolean as part of the response.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemRemoveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ItemRemoveResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemRemoveResponse>> ItemRemoveWithHttpInfoAsync(ItemRemoveRequest itemRemoveRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Webhook URL
        /// </summary>
        /// <remarks>
        /// The POST &#x60;/item/webhook/update&#x60; allows you to update the webhook URL associated with an Item. This request triggers a [&#x60;WEBHOOK_UPDATE_ACKNOWLEDGED&#x60;](https://plaid.com/docs/api/webhooks/#item-webhook-update-acknowledged) webhook to the newly specified webhook URL.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemWebhookUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ItemWebhookUpdateResponse</returns>
        System.Threading.Tasks.Task<ItemWebhookUpdateResponse> ItemWebhookUpdateAsync(ItemWebhookUpdateRequest itemWebhookUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Webhook URL
        /// </summary>
        /// <remarks>
        /// The POST &#x60;/item/webhook/update&#x60; allows you to update the webhook URL associated with an Item. This request triggers a [&#x60;WEBHOOK_UPDATE_ACKNOWLEDGED&#x60;](https://plaid.com/docs/api/webhooks/#item-webhook-update-acknowledged) webhook to the newly specified webhook URL.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemWebhookUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ItemWebhookUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemWebhookUpdateResponse>> ItemWebhookUpdateWithHttpInfoAsync(ItemWebhookUpdateRequest itemWebhookUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Liabilities data
        /// </summary>
        /// <remarks>
        /// The &#x60;/liabilities/get&#x60; endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type &#x60;credit&#x60; with account subtype &#x60;credit card&#x60; or &#x60;paypal&#x60;, and account type &#x60;loan&#x60; with account subtype &#x60;student&#x60; or &#x60;mortgage&#x60;. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the &#x60;account_filters&#x60; parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling &#x60;/liabilities/get&#x60;.  Note: This request may take some time to complete if &#x60;liabilities&#x60; was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liabilitiesGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LiabilitiesGetResponse</returns>
        System.Threading.Tasks.Task<LiabilitiesGetResponse> LiabilitiesGetAsync(LiabilitiesGetRequest liabilitiesGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Liabilities data
        /// </summary>
        /// <remarks>
        /// The &#x60;/liabilities/get&#x60; endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type &#x60;credit&#x60; with account subtype &#x60;credit card&#x60; or &#x60;paypal&#x60;, and account type &#x60;loan&#x60; with account subtype &#x60;student&#x60; or &#x60;mortgage&#x60;. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the &#x60;account_filters&#x60; parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling &#x60;/liabilities/get&#x60;.  Note: This request may take some time to complete if &#x60;liabilities&#x60; was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liabilitiesGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LiabilitiesGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LiabilitiesGetResponse>> LiabilitiesGetWithHttpInfoAsync(LiabilitiesGetRequest liabilitiesGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Link Token
        /// </summary>
        /// <remarks>
        /// The &#x60;/link/token/create&#x60; endpoint creates a &#x60;link_token&#x60;, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a &#x60;public_token&#x60;, which can then be exchanged for an &#x60;access_token&#x60; via &#x60;/item/public_token/exchange&#x60; as part of the main Link flow.  A &#x60;link_token&#x60; generated by &#x60;/link/token/create&#x60; is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LinkTokenCreateResponse</returns>
        System.Threading.Tasks.Task<LinkTokenCreateResponse> LinkTokenCreateAsync(LinkTokenCreateRequest linkTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Link Token
        /// </summary>
        /// <remarks>
        /// The &#x60;/link/token/create&#x60; endpoint creates a &#x60;link_token&#x60;, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a &#x60;public_token&#x60;, which can then be exchanged for an &#x60;access_token&#x60; via &#x60;/item/public_token/exchange&#x60; as part of the main Link flow.  A &#x60;link_token&#x60; generated by &#x60;/link/token/create&#x60; is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LinkTokenCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LinkTokenCreateResponse>> LinkTokenCreateWithHttpInfoAsync(LinkTokenCreateRequest linkTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Link Token
        /// </summary>
        /// <remarks>
        /// The &#x60;/link/token/get&#x60; endpoint gets information about a previously-created &#x60;link_token&#x60; using the &#x60;/link/token/create&#x60; endpoint. It can be useful for debugging purposes.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkTokenGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LinkTokenGetResponse</returns>
        System.Threading.Tasks.Task<LinkTokenGetResponse> LinkTokenGetAsync(LinkTokenGetRequest linkTokenGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Link Token
        /// </summary>
        /// <remarks>
        /// The &#x60;/link/token/get&#x60; endpoint gets information about a previously-created &#x60;link_token&#x60; using the &#x60;/link/token/create&#x60; endpoint. It can be useful for debugging purposes.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkTokenGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LinkTokenGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LinkTokenGetResponse>> LinkTokenGetWithHttpInfoAsync(LinkTokenGetRequest linkTokenGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a payment
        /// </summary>
        /// <remarks>
        /// After creating a payment recipient, you can use the &#x60;/payment_initiation/payment/create&#x60; endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR or GBP.  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer and GBP-denominated payments will be sent via the Faster Payments network, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP / EUR. For details on any payment limits in Production, contact your Plaid Account Manager.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentInitiationPaymentCreateResponse</returns>
        System.Threading.Tasks.Task<PaymentInitiationPaymentCreateResponse> PaymentInitiationPaymentCreateAsync(PaymentInitiationPaymentCreateRequest paymentInitiationPaymentCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a payment
        /// </summary>
        /// <remarks>
        /// After creating a payment recipient, you can use the &#x60;/payment_initiation/payment/create&#x60; endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR or GBP.  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer and GBP-denominated payments will be sent via the Faster Payments network, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP / EUR. For details on any payment limits in Production, contact your Plaid Account Manager.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentInitiationPaymentCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentInitiationPaymentCreateResponse>> PaymentInitiationPaymentCreateWithHttpInfoAsync(PaymentInitiationPaymentCreateRequest paymentInitiationPaymentCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get payment details
        /// </summary>
        /// <remarks>
        /// The &#x60;/payment_initiation/payment/get&#x60; endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the &#x60;/payment_initiation/payment/get&#x60; endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentInitiationPaymentGetResponse</returns>
        System.Threading.Tasks.Task<PaymentInitiationPaymentGetResponse> PaymentInitiationPaymentGetAsync(PaymentInitiationPaymentGetRequest paymentInitiationPaymentGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get payment details
        /// </summary>
        /// <remarks>
        /// The &#x60;/payment_initiation/payment/get&#x60; endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the &#x60;/payment_initiation/payment/get&#x60; endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentInitiationPaymentGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentInitiationPaymentGetResponse>> PaymentInitiationPaymentGetWithHttpInfoAsync(PaymentInitiationPaymentGetRequest paymentInitiationPaymentGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List payments
        /// </summary>
        /// <remarks>
        /// The &#x60;/payment_initiation/payment/list&#x60; endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional &#x60;count&#x60; and &#x60;cursor&#x60; parameters.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentInitiationPaymentListResponse</returns>
        System.Threading.Tasks.Task<PaymentInitiationPaymentListResponse> PaymentInitiationPaymentListAsync(PaymentInitiationPaymentListRequest paymentInitiationPaymentListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List payments
        /// </summary>
        /// <remarks>
        /// The &#x60;/payment_initiation/payment/list&#x60; endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional &#x60;count&#x60; and &#x60;cursor&#x60; parameters.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentInitiationPaymentListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentInitiationPaymentListResponse>> PaymentInitiationPaymentListWithHttpInfoAsync(PaymentInitiationPaymentListRequest paymentInitiationPaymentListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reverse an existing payment
        /// </summary>
        /// <remarks>
        /// Reverse a previously initiated payment.  A payment can only be reversed once and will be refunded to the original sender&#39;s account. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentReverseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentInitiationPaymentReverseResponse</returns>
        System.Threading.Tasks.Task<PaymentInitiationPaymentReverseResponse> PaymentInitiationPaymentReverseAsync(PaymentInitiationPaymentReverseRequest paymentInitiationPaymentReverseRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reverse an existing payment
        /// </summary>
        /// <remarks>
        /// Reverse a previously initiated payment.  A payment can only be reversed once and will be refunded to the original sender&#39;s account. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentReverseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentInitiationPaymentReverseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentInitiationPaymentReverseResponse>> PaymentInitiationPaymentReverseWithHttpInfoAsync(PaymentInitiationPaymentReverseRequest paymentInitiationPaymentReverseRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create payment recipient
        /// </summary>
        /// <remarks>
        /// Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA).  For a standing order (recurring) payment, the recipient must be in the UK.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same &#x60;recipient_id&#x60;. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationRecipientCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentInitiationRecipientCreateResponse</returns>
        System.Threading.Tasks.Task<PaymentInitiationRecipientCreateResponse> PaymentInitiationRecipientCreateAsync(PaymentInitiationRecipientCreateRequest paymentInitiationRecipientCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create payment recipient
        /// </summary>
        /// <remarks>
        /// Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA).  For a standing order (recurring) payment, the recipient must be in the UK.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same &#x60;recipient_id&#x60;. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationRecipientCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentInitiationRecipientCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentInitiationRecipientCreateResponse>> PaymentInitiationRecipientCreateWithHttpInfoAsync(PaymentInitiationRecipientCreateRequest paymentInitiationRecipientCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get payment recipient
        /// </summary>
        /// <remarks>
        /// Get details about a payment recipient you have previously created.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationRecipientGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentInitiationRecipientGetResponse</returns>
        System.Threading.Tasks.Task<PaymentInitiationRecipientGetResponse> PaymentInitiationRecipientGetAsync(PaymentInitiationRecipientGetRequest paymentInitiationRecipientGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get payment recipient
        /// </summary>
        /// <remarks>
        /// Get details about a payment recipient you have previously created.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationRecipientGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentInitiationRecipientGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentInitiationRecipientGetResponse>> PaymentInitiationRecipientGetWithHttpInfoAsync(PaymentInitiationRecipientGetRequest paymentInitiationRecipientGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List payment recipients
        /// </summary>
        /// <remarks>
        /// The &#x60;/payment_initiation/recipient/list&#x60; endpoint list the payment recipients that you have previously created.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationRecipientListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentInitiationRecipientListResponse</returns>
        System.Threading.Tasks.Task<PaymentInitiationRecipientListResponse> PaymentInitiationRecipientListAsync(PaymentInitiationRecipientListRequest paymentInitiationRecipientListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List payment recipients
        /// </summary>
        /// <remarks>
        /// The &#x60;/payment_initiation/recipient/list&#x60; endpoint list the payment recipients that you have previously created.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationRecipientListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentInitiationRecipientListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentInitiationRecipientListResponse>> PaymentInitiationRecipientListWithHttpInfoAsync(PaymentInitiationRecipientListRequest paymentInitiationRecipientListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Apex bank account token
        /// </summary>
        /// <remarks>
        /// Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorApexProcessorTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessorTokenCreateResponse</returns>
        System.Threading.Tasks.Task<ProcessorTokenCreateResponse> ProcessorApexProcessorTokenCreateAsync(ProcessorApexProcessorTokenCreateRequest processorApexProcessorTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Apex bank account token
        /// </summary>
        /// <remarks>
        /// Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorApexProcessorTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessorTokenCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessorTokenCreateResponse>> ProcessorApexProcessorTokenCreateWithHttpInfoAsync(ProcessorApexProcessorTokenCreateRequest processorApexProcessorTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Auth data
        /// </summary>
        /// <remarks>
        /// The &#x60;/processor/auth/get&#x60; endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that&#39;&#39;s associated with a given &#x60;processor_token&#x60;. The endpoint also returns high-level account data and balances when available.   Versioning note: API versions 2019-05-29 and earlier use a different schema for the &#x60;numbers&#x60; object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14). 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorAuthGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessorAuthGetResponse</returns>
        System.Threading.Tasks.Task<ProcessorAuthGetResponse> ProcessorAuthGetAsync(ProcessorAuthGetRequest processorAuthGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Auth data
        /// </summary>
        /// <remarks>
        /// The &#x60;/processor/auth/get&#x60; endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that&#39;&#39;s associated with a given &#x60;processor_token&#x60;. The endpoint also returns high-level account data and balances when available.   Versioning note: API versions 2019-05-29 and earlier use a different schema for the &#x60;numbers&#x60; object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14). 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorAuthGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessorAuthGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessorAuthGetResponse>> ProcessorAuthGetWithHttpInfoAsync(ProcessorAuthGetRequest processorAuthGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Balance data
        /// </summary>
        /// <remarks>
        /// The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for each of an Item&#39;s accounts. While other endpoints may return a balance object, only &#x60;/processor/balance/get&#x60; forces the available and current balance fields to be refreshed rather than cached. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorBalanceGetRequest">The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessorBalanceGetResponse</returns>
        System.Threading.Tasks.Task<ProcessorBalanceGetResponse> ProcessorBalanceGetAsync(ProcessorBalanceGetRequest processorBalanceGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Balance data
        /// </summary>
        /// <remarks>
        /// The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for each of an Item&#39;s accounts. While other endpoints may return a balance object, only &#x60;/processor/balance/get&#x60; forces the available and current balance fields to be refreshed rather than cached. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorBalanceGetRequest">The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessorBalanceGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessorBalanceGetResponse>> ProcessorBalanceGetWithHttpInfoAsync(ProcessorBalanceGetRequest processorBalanceGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a bank transfer as a processor
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/processor/bank_transfer/create&#x60; endpoint to initiate a new bank transfer as a processor
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorBankTransferCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessorBankTransferCreateResponse</returns>
        System.Threading.Tasks.Task<ProcessorBankTransferCreateResponse> ProcessorBankTransferCreateAsync(ProcessorBankTransferCreateRequest processorBankTransferCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a bank transfer as a processor
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/processor/bank_transfer/create&#x60; endpoint to initiate a new bank transfer as a processor
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorBankTransferCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessorBankTransferCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessorBankTransferCreateResponse>> ProcessorBankTransferCreateWithHttpInfoAsync(ProcessorBankTransferCreateRequest processorBankTransferCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Identity data
        /// </summary>
        /// <remarks>
        /// The &#x60;/processor/identity/get&#x60; endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorIdentityGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessorIdentityGetResponse</returns>
        System.Threading.Tasks.Task<ProcessorIdentityGetResponse> ProcessorIdentityGetAsync(ProcessorIdentityGetRequest processorIdentityGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Identity data
        /// </summary>
        /// <remarks>
        /// The &#x60;/processor/identity/get&#x60; endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorIdentityGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessorIdentityGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessorIdentityGetResponse>> ProcessorIdentityGetWithHttpInfoAsync(ProcessorIdentityGetRequest processorIdentityGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Stripe bank account token
        /// </summary>
        /// <remarks>
        /// Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorStripeBankAccountTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessorStripeBankAccountTokenCreateResponse</returns>
        System.Threading.Tasks.Task<ProcessorStripeBankAccountTokenCreateResponse> ProcessorStripeBankAccountTokenCreateAsync(ProcessorStripeBankAccountTokenCreateRequest processorStripeBankAccountTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Stripe bank account token
        /// </summary>
        /// <remarks>
        /// Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorStripeBankAccountTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessorStripeBankAccountTokenCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessorStripeBankAccountTokenCreateResponse>> ProcessorStripeBankAccountTokenCreateWithHttpInfoAsync(ProcessorStripeBankAccountTokenCreateRequest processorStripeBankAccountTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create processor token
        /// </summary>
        /// <remarks>
        /// Used to create a token suitable for sending to one of Plaid&#39;s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see &#x60;/processor/stripe/bank_account_token/create&#x60; for creating tokens for use with Stripe integrations.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessorTokenCreateResponse</returns>
        System.Threading.Tasks.Task<ProcessorTokenCreateResponse> ProcessorTokenCreateAsync(ProcessorTokenCreateRequest processorTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create processor token
        /// </summary>
        /// <remarks>
        /// Used to create a token suitable for sending to one of Plaid&#39;s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see &#x60;/processor/stripe/bank_account_token/create&#x60; for creating tokens for use with Stripe integrations.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessorTokenCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessorTokenCreateResponse>> ProcessorTokenCreateWithHttpInfoAsync(ProcessorTokenCreateRequest processorTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manually fire a Bank Transfer webhook
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/sandbox/bank_transfer/fire_webhook&#x60; endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxBankTransferFireWebhookRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SandboxBankTransferFireWebhookResponse</returns>
        System.Threading.Tasks.Task<SandboxBankTransferFireWebhookResponse> SandboxBankTransferFireWebhookAsync(SandboxBankTransferFireWebhookRequest sandboxBankTransferFireWebhookRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manually fire a Bank Transfer webhook
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/sandbox/bank_transfer/fire_webhook&#x60; endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxBankTransferFireWebhookRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SandboxBankTransferFireWebhookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SandboxBankTransferFireWebhookResponse>> SandboxBankTransferFireWebhookWithHttpInfoAsync(SandboxBankTransferFireWebhookRequest sandboxBankTransferFireWebhookRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Simulate a bank transfer event in Sandbox
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/sandbox/bank_transfer/simulate&#x60; endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/bank_transfer/event/sync&#x60; or &#x60;/bank_transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxBankTransferSimulateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SandboxBankTransferSimulateResponse</returns>
        System.Threading.Tasks.Task<SandboxBankTransferSimulateResponse> SandboxBankTransferSimulateAsync(SandboxBankTransferSimulateRequest sandboxBankTransferSimulateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Simulate a bank transfer event in Sandbox
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/sandbox/bank_transfer/simulate&#x60; endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/bank_transfer/event/sync&#x60; or &#x60;/bank_transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxBankTransferSimulateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SandboxBankTransferSimulateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SandboxBankTransferSimulateResponse>> SandboxBankTransferSimulateWithHttpInfoAsync(SandboxBankTransferSimulateRequest sandboxBankTransferSimulateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manually fire an Income webhook
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/sandbox/income/fire_webhook&#x60; endpoint to manually trigger an Income webhook in the Sandbox environment.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxIncomeFireWebhookRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SandboxIncomeFireWebhookResponse</returns>
        System.Threading.Tasks.Task<SandboxIncomeFireWebhookResponse> SandboxIncomeFireWebhookAsync(SandboxIncomeFireWebhookRequest sandboxIncomeFireWebhookRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manually fire an Income webhook
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/sandbox/income/fire_webhook&#x60; endpoint to manually trigger an Income webhook in the Sandbox environment.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxIncomeFireWebhookRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SandboxIncomeFireWebhookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SandboxIncomeFireWebhookResponse>> SandboxIncomeFireWebhookWithHttpInfoAsync(SandboxIncomeFireWebhookRequest sandboxIncomeFireWebhookRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fire a test webhook
        /// </summary>
        /// <remarks>
        /// The &#x60;/sandbox/item/fire_webhook&#x60; endpoint is used to test that code correctly handles webhooks. This endpoint can trigger a Transactions &#x60;DEFAULT_UPDATE&#x60; webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a &#x60;SANDBOX_PRODUCT_NOT_ENABLED&#x60; error will result. This endpoint can also trigger a &#x60;NEW_ACCOUNTS_AVAILABLE&#x60; webhook to be fired for a given Sandbox Item created with Account Select v2. Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxItemFireWebhookRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SandboxItemFireWebhookResponse</returns>
        System.Threading.Tasks.Task<SandboxItemFireWebhookResponse> SandboxItemFireWebhookAsync(SandboxItemFireWebhookRequest sandboxItemFireWebhookRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fire a test webhook
        /// </summary>
        /// <remarks>
        /// The &#x60;/sandbox/item/fire_webhook&#x60; endpoint is used to test that code correctly handles webhooks. This endpoint can trigger a Transactions &#x60;DEFAULT_UPDATE&#x60; webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a &#x60;SANDBOX_PRODUCT_NOT_ENABLED&#x60; error will result. This endpoint can also trigger a &#x60;NEW_ACCOUNTS_AVAILABLE&#x60; webhook to be fired for a given Sandbox Item created with Account Select v2. Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxItemFireWebhookRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SandboxItemFireWebhookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SandboxItemFireWebhookResponse>> SandboxItemFireWebhookWithHttpInfoAsync(SandboxItemFireWebhookRequest sandboxItemFireWebhookRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Force a Sandbox Item into an error state
        /// </summary>
        /// <remarks>
        /// &#x60;/sandbox/item/reset_login/&#x60; forces an Item into an &#x60;ITEM_LOGIN_REQUIRED&#x60; state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link&#39;s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling &#x60;/sandbox/item/reset_login&#x60;, You can then use Plaid Link update mode to restore the Item to a good state. An &#x60;ITEM_LOGIN_REQUIRED&#x60; webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an &#x60;ITEM_LOGIN_REQUIRED&#x60; error state automatically after 30 days, even if this endpoint is not called.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxItemResetLoginRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SandboxItemResetLoginResponse</returns>
        System.Threading.Tasks.Task<SandboxItemResetLoginResponse> SandboxItemResetLoginAsync(SandboxItemResetLoginRequest sandboxItemResetLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Force a Sandbox Item into an error state
        /// </summary>
        /// <remarks>
        /// &#x60;/sandbox/item/reset_login/&#x60; forces an Item into an &#x60;ITEM_LOGIN_REQUIRED&#x60; state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link&#39;s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling &#x60;/sandbox/item/reset_login&#x60;, You can then use Plaid Link update mode to restore the Item to a good state. An &#x60;ITEM_LOGIN_REQUIRED&#x60; webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an &#x60;ITEM_LOGIN_REQUIRED&#x60; error state automatically after 30 days, even if this endpoint is not called.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxItemResetLoginRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SandboxItemResetLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SandboxItemResetLoginResponse>> SandboxItemResetLoginWithHttpInfoAsync(SandboxItemResetLoginRequest sandboxItemResetLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set verification status for Sandbox account
        /// </summary>
        /// <remarks>
        /// The &#x60;/sandbox/item/set_verification_status&#x60; endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxItemSetVerificationStatusRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SandboxItemSetVerificationStatusResponse</returns>
        System.Threading.Tasks.Task<SandboxItemSetVerificationStatusResponse> SandboxItemSetVerificationStatusAsync(SandboxItemSetVerificationStatusRequest sandboxItemSetVerificationStatusRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set verification status for Sandbox account
        /// </summary>
        /// <remarks>
        /// The &#x60;/sandbox/item/set_verification_status&#x60; endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxItemSetVerificationStatusRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SandboxItemSetVerificationStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SandboxItemSetVerificationStatusResponse>> SandboxItemSetVerificationStatusWithHttpInfoAsync(SandboxItemSetVerificationStatusRequest sandboxItemSetVerificationStatusRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Save the selected accounts when connecting to the Platypus Oauth institution
        /// </summary>
        /// <remarks>
        /// Save the selected accounts when connecting to the Platypus Oauth institution
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxOauthSelectAccountsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> SandboxOauthSelectAccountsAsync(SandboxOauthSelectAccountsRequest sandboxOauthSelectAccountsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Save the selected accounts when connecting to the Platypus Oauth institution
        /// </summary>
        /// <remarks>
        /// Save the selected accounts when connecting to the Platypus Oauth institution
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxOauthSelectAccountsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> SandboxOauthSelectAccountsWithHttpInfoAsync(SandboxOauthSelectAccountsRequest sandboxOauthSelectAccountsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a test Item and processor token
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/sandbox/processor_token/create&#x60; endpoint to create a valid &#x60;processor_token&#x60; for an arbitrary institution ID and test credentials. The created &#x60;processor_token&#x60; corresponds to a new Sandbox Item. You can then use this &#x60;processor_token&#x60; with the &#x60;/processor/&#x60; API endpoints in Sandbox. You can also use &#x60;/sandbox/processor_token/create&#x60; with the [&#x60;user_custom&#x60; test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxProcessorTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SandboxProcessorTokenCreateResponse</returns>
        System.Threading.Tasks.Task<SandboxProcessorTokenCreateResponse> SandboxProcessorTokenCreateAsync(SandboxProcessorTokenCreateRequest sandboxProcessorTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a test Item and processor token
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/sandbox/processor_token/create&#x60; endpoint to create a valid &#x60;processor_token&#x60; for an arbitrary institution ID and test credentials. The created &#x60;processor_token&#x60; corresponds to a new Sandbox Item. You can then use this &#x60;processor_token&#x60; with the &#x60;/processor/&#x60; API endpoints in Sandbox. You can also use &#x60;/sandbox/processor_token/create&#x60; with the [&#x60;user_custom&#x60; test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxProcessorTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SandboxProcessorTokenCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SandboxProcessorTokenCreateResponse>> SandboxProcessorTokenCreateWithHttpInfoAsync(SandboxProcessorTokenCreateRequest sandboxProcessorTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a test Item
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/sandbox/public_token/create&#x60; endpoint to create a valid &#x60;public_token&#x60;  for an arbitrary institution ID, initial products, and test credentials. The created &#x60;public_token&#x60; maps to a new Sandbox Item. You can then call &#x60;/item/public_token/exchange&#x60; to exchange the &#x60;public_token&#x60; for an &#x60;access_token&#x60; and perform all API actions. &#x60;/sandbox/public_token/create&#x60; can also be used with the [&#x60;user_custom&#x60; test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. &#x60;/sandbox/public_token/create&#x60; cannot be used with OAuth institutions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxPublicTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SandboxPublicTokenCreateResponse</returns>
        System.Threading.Tasks.Task<SandboxPublicTokenCreateResponse> SandboxPublicTokenCreateAsync(SandboxPublicTokenCreateRequest sandboxPublicTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a test Item
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/sandbox/public_token/create&#x60; endpoint to create a valid &#x60;public_token&#x60;  for an arbitrary institution ID, initial products, and test credentials. The created &#x60;public_token&#x60; maps to a new Sandbox Item. You can then call &#x60;/item/public_token/exchange&#x60; to exchange the &#x60;public_token&#x60; for an &#x60;access_token&#x60; and perform all API actions. &#x60;/sandbox/public_token/create&#x60; can also be used with the [&#x60;user_custom&#x60; test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. &#x60;/sandbox/public_token/create&#x60; cannot be used with OAuth institutions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxPublicTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SandboxPublicTokenCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SandboxPublicTokenCreateResponse>> SandboxPublicTokenCreateWithHttpInfoAsync(SandboxPublicTokenCreateRequest sandboxPublicTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trigger the creation of a repayment
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/sandbox/transfer/repayment/simulate&#x60; endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxTransferRepaymentSimulateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SandboxTransferRepaymentSimulateResponse</returns>
        System.Threading.Tasks.Task<SandboxTransferRepaymentSimulateResponse> SandboxTransferRepaymentSimulateAsync(SandboxTransferRepaymentSimulateRequest sandboxTransferRepaymentSimulateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trigger the creation of a repayment
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/sandbox/transfer/repayment/simulate&#x60; endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxTransferRepaymentSimulateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SandboxTransferRepaymentSimulateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SandboxTransferRepaymentSimulateResponse>> SandboxTransferRepaymentSimulateWithHttpInfoAsync(SandboxTransferRepaymentSimulateRequest sandboxTransferRepaymentSimulateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Simulate a transfer event in Sandbox
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/sandbox/transfer/simulate&#x60; endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/transfer/event/sync&#x60; or &#x60;/transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxTransferSimulateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SandboxTransferSimulateResponse</returns>
        System.Threading.Tasks.Task<SandboxTransferSimulateResponse> SandboxTransferSimulateAsync(SandboxTransferSimulateRequest sandboxTransferSimulateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Simulate a transfer event in Sandbox
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/sandbox/transfer/simulate&#x60; endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/transfer/event/sync&#x60; or &#x60;/transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxTransferSimulateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SandboxTransferSimulateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SandboxTransferSimulateResponse>> SandboxTransferSimulateWithHttpInfoAsync(SandboxTransferSimulateRequest sandboxTransferSimulateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Simulate creating a sweep
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/sandbox/transfer/sweep/simulate&#x60; endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all &#x60;posted&#x60; or &#x60;pending&#x60; transfers with a sweep status of &#x60;unswept&#x60; will become &#x60;swept&#x60;, and all &#x60;reversed&#x60; transfers with a sweep status of &#x60;swept&#x60; will become &#x60;reverse_swept&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxTransferSweepSimulateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SandboxTransferSweepSimulateResponse</returns>
        System.Threading.Tasks.Task<SandboxTransferSweepSimulateResponse> SandboxTransferSweepSimulateAsync(SandboxTransferSweepSimulateRequest sandboxTransferSweepSimulateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Simulate creating a sweep
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/sandbox/transfer/sweep/simulate&#x60; endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all &#x60;posted&#x60; or &#x60;pending&#x60; transfers with a sweep status of &#x60;unswept&#x60; will become &#x60;swept&#x60;, and all &#x60;reversed&#x60; transfers with a sweep status of &#x60;swept&#x60; will become &#x60;reverse_swept&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxTransferSweepSimulateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SandboxTransferSweepSimulateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SandboxTransferSweepSimulateResponse>> SandboxTransferSweepSimulateWithHttpInfoAsync(SandboxTransferSweepSimulateRequest sandboxTransferSweepSimulateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Report whether you initiated an ACH transaction
        /// </summary>
        /// <remarks>
        /// After calling &#x60;/signal/evaluate&#x60;, call &#x60;/signal/decision/report&#x60; to report whether the transaction was initiated. This endpoint will return an &#x60;INVALID_REQUEST&#x60; error if called a second time with a different value for &#x60;initiated&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signalDecisionReportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SignalDecisionReportResponse</returns>
        System.Threading.Tasks.Task<SignalDecisionReportResponse> SignalDecisionReportAsync(SignalDecisionReportRequest signalDecisionReportRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Report whether you initiated an ACH transaction
        /// </summary>
        /// <remarks>
        /// After calling &#x60;/signal/evaluate&#x60;, call &#x60;/signal/decision/report&#x60; to report whether the transaction was initiated. This endpoint will return an &#x60;INVALID_REQUEST&#x60; error if called a second time with a different value for &#x60;initiated&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signalDecisionReportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SignalDecisionReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignalDecisionReportResponse>> SignalDecisionReportWithHttpInfoAsync(SignalDecisionReportRequest signalDecisionReportRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Evaluate a planned ACH transaction
        /// </summary>
        /// <remarks>
        /// Use &#x60;/signal/evaluate&#x60; to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If &#x60;/signal/evaluate&#x60; is called on the same transaction multiple times within a 24-hour period, cached results may be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signalEvaluateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SignalEvaluateResponse</returns>
        System.Threading.Tasks.Task<SignalEvaluateResponse> SignalEvaluateAsync(SignalEvaluateRequest signalEvaluateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Evaluate a planned ACH transaction
        /// </summary>
        /// <remarks>
        /// Use &#x60;/signal/evaluate&#x60; to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If &#x60;/signal/evaluate&#x60; is called on the same transaction multiple times within a 24-hour period, cached results may be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signalEvaluateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SignalEvaluateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignalEvaluateResponse>> SignalEvaluateWithHttpInfoAsync(SignalEvaluateRequest signalEvaluateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Report a return for an ACH transaction
        /// </summary>
        /// <remarks>
        /// Call the &#x60;/signal/return/report&#x60; endpoint to report a returned transaction that was previously sent to the &#x60;/signal/evaluate&#x60; endpoint. Your feedback will be used by the foo to incorporate the latest risk trend in your portfolio.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signalReturnReportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SignalReturnReportResponse</returns>
        System.Threading.Tasks.Task<SignalReturnReportResponse> SignalReturnReportAsync(SignalReturnReportRequest signalReturnReportRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Report a return for an ACH transaction
        /// </summary>
        /// <remarks>
        /// Call the &#x60;/signal/return/report&#x60; endpoint to report a returned transaction that was previously sent to the &#x60;/signal/evaluate&#x60; endpoint. Your feedback will be used by the foo to incorporate the latest risk trend in your portfolio.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signalReturnReportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SignalReturnReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignalReturnReportResponse>> SignalReturnReportWithHttpInfoAsync(SignalReturnReportRequest signalReturnReportRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get transaction data
        /// </summary>
        /// <remarks>
        /// The &#x60;/transactions/get&#x60; endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype &#x60;student&#x60;; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products#investments) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in &#x60;/transactions/get&#x60;.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the &#x60;count&#x60; and &#x60;offset&#x60; parameters in conjunction with the &#x60;total_transactions&#x60; response body field to fetch all available transactions.  Data returned by &#x60;/transactions/get&#x60; will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item&#39;s &#x60;status.transactions.last_successful_update&#x60; field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the &#x60;/transactions/refresh&#x60; endpoint.  Note that data may not be immediately available to &#x60;/transactions/get&#x60;. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with &#x60;transactions&#x60;, or upon the first call to &#x60;/transactions/get&#x60;, if it wasn&#39;t. To be alerted when transaction data is ready to be fetched, listen for the [&#x60;INITIAL_UPDATE&#x60;](https://plaid.com/docs/api/webhooks#transactions-initial_update) and [&#x60;HISTORICAL_UPDATE&#x60;](https://plaid.com/docs/api/webhooks#transactions-historical_update) webhooks. If no transaction history is ready when &#x60;/transactions/get&#x60; is called, it will return a &#x60;PRODUCT_NOT_READY&#x60; error.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionsGetResponse</returns>
        System.Threading.Tasks.Task<TransactionsGetResponse> TransactionsGetAsync(TransactionsGetRequest transactionsGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get transaction data
        /// </summary>
        /// <remarks>
        /// The &#x60;/transactions/get&#x60; endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype &#x60;student&#x60;; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products#investments) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in &#x60;/transactions/get&#x60;.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the &#x60;count&#x60; and &#x60;offset&#x60; parameters in conjunction with the &#x60;total_transactions&#x60; response body field to fetch all available transactions.  Data returned by &#x60;/transactions/get&#x60; will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item&#39;s &#x60;status.transactions.last_successful_update&#x60; field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the &#x60;/transactions/refresh&#x60; endpoint.  Note that data may not be immediately available to &#x60;/transactions/get&#x60;. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with &#x60;transactions&#x60;, or upon the first call to &#x60;/transactions/get&#x60;, if it wasn&#39;t. To be alerted when transaction data is ready to be fetched, listen for the [&#x60;INITIAL_UPDATE&#x60;](https://plaid.com/docs/api/webhooks#transactions-initial_update) and [&#x60;HISTORICAL_UPDATE&#x60;](https://plaid.com/docs/api/webhooks#transactions-historical_update) webhooks. If no transaction history is ready when &#x60;/transactions/get&#x60; is called, it will return a &#x60;PRODUCT_NOT_READY&#x60; error.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionsGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionsGetResponse>> TransactionsGetWithHttpInfoAsync(TransactionsGetRequest transactionsGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get streams of recurring transactions
        /// </summary>
        /// <remarks>
        /// The &#x60;/transactions/recurring/get&#x60; endpoint identifies and returns groups of transactions that occur on a regular basis for the inputted Item and accounts.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionsRecurringGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionsRecurringGetResponse</returns>
        System.Threading.Tasks.Task<TransactionsRecurringGetResponse> TransactionsRecurringGetAsync(TransactionsRecurringGetRequest transactionsRecurringGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get streams of recurring transactions
        /// </summary>
        /// <remarks>
        /// The &#x60;/transactions/recurring/get&#x60; endpoint identifies and returns groups of transactions that occur on a regular basis for the inputted Item and accounts.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionsRecurringGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionsRecurringGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionsRecurringGetResponse>> TransactionsRecurringGetWithHttpInfoAsync(TransactionsRecurringGetRequest transactionsRecurringGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Refresh transaction data
        /// </summary>
        /// <remarks>
        /// &#x60;/transactions/refresh&#x60; is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling &#x60;/transactions/refresh&#x60;, Plaid will fire a webhook: [&#x60;TRANSACTIONS_REMOVED&#x60;](https://plaid.com/docs/api/webhooks#deleted-transactions-detected) will be fired if any removed transactions are detected, and [&#x60;DEFAULT_UPDATE&#x60;](https://plaid.com/docs/api/webhooks#transactions-default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling &#x60;/transactions/get&#x60;.  Access to &#x60;/transactions/refresh&#x60; in Production is specific to certain pricing plans. If you cannot access &#x60;/transactions/refresh&#x60; in Production, [contact Sales](https://www.plaid.com/contact) for assistance.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionsRefreshRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionsRefreshResponse</returns>
        System.Threading.Tasks.Task<TransactionsRefreshResponse> TransactionsRefreshAsync(TransactionsRefreshRequest transactionsRefreshRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Refresh transaction data
        /// </summary>
        /// <remarks>
        /// &#x60;/transactions/refresh&#x60; is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling &#x60;/transactions/refresh&#x60;, Plaid will fire a webhook: [&#x60;TRANSACTIONS_REMOVED&#x60;](https://plaid.com/docs/api/webhooks#deleted-transactions-detected) will be fired if any removed transactions are detected, and [&#x60;DEFAULT_UPDATE&#x60;](https://plaid.com/docs/api/webhooks#transactions-default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling &#x60;/transactions/get&#x60;.  Access to &#x60;/transactions/refresh&#x60; in Production is specific to certain pricing plans. If you cannot access &#x60;/transactions/refresh&#x60; in Production, [contact Sales](https://www.plaid.com/contact) for assistance.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionsRefreshRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionsRefreshResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionsRefreshResponse>> TransactionsRefreshWithHttpInfoAsync(TransactionsRefreshRequest transactionsRefreshRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get incremental transaction updates on an Item
        /// </summary>
        /// <remarks>
        /// The &#x60;/transactions/sync&#x60; endpoint returns item transactions as a set of delta updates. Subsequent calls to the endpoint using the cursor returned in the response will return new added, modified, and removed transactions since the last call to the endpoint  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionsSyncRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionsSyncResponse</returns>
        System.Threading.Tasks.Task<TransactionsSyncResponse> TransactionsSyncAsync(TransactionsSyncRequest transactionsSyncRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get incremental transaction updates on an Item
        /// </summary>
        /// <remarks>
        /// The &#x60;/transactions/sync&#x60; endpoint returns item transactions as a set of delta updates. Subsequent calls to the endpoint using the cursor returned in the response will return new added, modified, and removed transactions since the last call to the endpoint  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionsSyncRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionsSyncResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionsSyncResponse>> TransactionsSyncWithHttpInfoAsync(TransactionsSyncRequest transactionsSyncRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a transfer authorization
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/transfer/authorization/create&#x60; endpoint to determine transfer failure risk.  In Plaid&#39;s sandbox environment the decisions will be returned as follows:    - To approve a transfer, make an authorization request with an &#x60;amount&#x60; less than the available balance in the account.    - To decline a transfer with the rationale code &#x60;NSF&#x60;, the available balance on the account must be less than the authorization &#x60;amount&#x60;. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code &#x60;RISK&#x60;, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To permit a transfer with the rationale code &#x60;MANUALLY_VERIFIED_ITEM&#x60;, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To permit a transfer with the rationale code &#x60;LOGIN_REQUIRED&#x60;, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).  All username/password combinations other than the ones listed above will result in a decision of permitted and rationale code &#x60;ERROR&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferAuthorizationCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferAuthorizationCreateResponse</returns>
        System.Threading.Tasks.Task<TransferAuthorizationCreateResponse> TransferAuthorizationCreateAsync(TransferAuthorizationCreateRequest transferAuthorizationCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a transfer authorization
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/transfer/authorization/create&#x60; endpoint to determine transfer failure risk.  In Plaid&#39;s sandbox environment the decisions will be returned as follows:    - To approve a transfer, make an authorization request with an &#x60;amount&#x60; less than the available balance in the account.    - To decline a transfer with the rationale code &#x60;NSF&#x60;, the available balance on the account must be less than the authorization &#x60;amount&#x60;. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code &#x60;RISK&#x60;, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To permit a transfer with the rationale code &#x60;MANUALLY_VERIFIED_ITEM&#x60;, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To permit a transfer with the rationale code &#x60;LOGIN_REQUIRED&#x60;, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).  All username/password combinations other than the ones listed above will result in a decision of permitted and rationale code &#x60;ERROR&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferAuthorizationCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferAuthorizationCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransferAuthorizationCreateResponse>> TransferAuthorizationCreateWithHttpInfoAsync(TransferAuthorizationCreateRequest transferAuthorizationCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancel a transfer
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/transfer/cancel&#x60; endpoint to cancel a transfer.  A transfer is eligible for cancelation if the &#x60;cancellable&#x60; property returned by &#x60;/transfer/get&#x60; is &#x60;true&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferCancelRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferCancelResponse</returns>
        System.Threading.Tasks.Task<TransferCancelResponse> TransferCancelAsync(TransferCancelRequest transferCancelRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel a transfer
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/transfer/cancel&#x60; endpoint to cancel a transfer.  A transfer is eligible for cancelation if the &#x60;cancellable&#x60; property returned by &#x60;/transfer/get&#x60; is &#x60;true&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferCancelRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferCancelResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransferCancelResponse>> TransferCancelWithHttpInfoAsync(TransferCancelRequest transferCancelRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a transfer
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/transfer/create&#x60; endpoint to initiate a new transfer.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferCreateResponse</returns>
        System.Threading.Tasks.Task<TransferCreateResponse> TransferCreateAsync(TransferCreateRequest transferCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a transfer
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/transfer/create&#x60; endpoint to initiate a new transfer.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransferCreateResponse>> TransferCreateWithHttpInfoAsync(TransferCreateRequest transferCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List transfer events
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/transfer/event/list&#x60; endpoint to get a list of transfer events based on specified filter criteria.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferEventListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferEventListResponse</returns>
        System.Threading.Tasks.Task<TransferEventListResponse> TransferEventListAsync(TransferEventListRequest transferEventListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List transfer events
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/transfer/event/list&#x60; endpoint to get a list of transfer events based on specified filter criteria.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferEventListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferEventListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransferEventListResponse>> TransferEventListWithHttpInfoAsync(TransferEventListRequest transferEventListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sync transfer events
        /// </summary>
        /// <remarks>
        /// &#x60;/transfer/event/sync&#x60; allows you to request up to the next 25 transfer events that happened after a specific &#x60;event_id&#x60;. Use the &#x60;/transfer/event/sync&#x60; endpoint to guarantee you have seen all transfer events.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferEventSyncRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferEventSyncResponse</returns>
        System.Threading.Tasks.Task<TransferEventSyncResponse> TransferEventSyncAsync(TransferEventSyncRequest transferEventSyncRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sync transfer events
        /// </summary>
        /// <remarks>
        /// &#x60;/transfer/event/sync&#x60; allows you to request up to the next 25 transfer events that happened after a specific &#x60;event_id&#x60;. Use the &#x60;/transfer/event/sync&#x60; endpoint to guarantee you have seen all transfer events.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferEventSyncRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferEventSyncResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransferEventSyncResponse>> TransferEventSyncWithHttpInfoAsync(TransferEventSyncRequest transferEventSyncRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a transfer
        /// </summary>
        /// <remarks>
        /// The &#x60;/transfer/get&#x60; fetches information about the transfer corresponding to the given &#x60;transfer_id&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferGetResponse</returns>
        System.Threading.Tasks.Task<TransferGetResponse> TransferGetAsync(TransferGetRequest transferGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a transfer
        /// </summary>
        /// <remarks>
        /// The &#x60;/transfer/get&#x60; fetches information about the transfer corresponding to the given &#x60;transfer_id&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransferGetResponse>> TransferGetWithHttpInfoAsync(TransferGetRequest transferGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a transfer intent object to invoke the Transfer UI
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/transfer/intent/create&#x60; endpoint to generate a transfer intent object and invoke the Transfer UI.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferIntentCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferIntentCreateResponse</returns>
        System.Threading.Tasks.Task<TransferIntentCreateResponse> TransferIntentCreateAsync(TransferIntentCreateRequest transferIntentCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a transfer intent object to invoke the Transfer UI
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/transfer/intent/create&#x60; endpoint to generate a transfer intent object and invoke the Transfer UI.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferIntentCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferIntentCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransferIntentCreateResponse>> TransferIntentCreateWithHttpInfoAsync(TransferIntentCreateRequest transferIntentCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve more information about a transfer intent
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/transfer/intent/get&#x60; endpoint to retrieve more information about a transfer intent.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferIntentGetResponse</returns>
        System.Threading.Tasks.Task<TransferIntentGetResponse> TransferIntentGetAsync(Dictionary<string, Object> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve more information about a transfer intent
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/transfer/intent/get&#x60; endpoint to retrieve more information about a transfer intent.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferIntentGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransferIntentGetResponse>> TransferIntentGetWithHttpInfoAsync(Dictionary<string, Object> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List transfers
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/transfer/list&#x60; endpoint to see a list of all your transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired transfers. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferListResponse</returns>
        System.Threading.Tasks.Task<TransferListResponse> TransferListAsync(TransferListRequest transferListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List transfers
        /// </summary>
        /// <remarks>
        /// Use the &#x60;/transfer/list&#x60; endpoint to see a list of all your transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired transfers. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransferListResponse>> TransferListWithHttpInfoAsync(TransferListRequest transferListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lists historical repayments
        /// </summary>
        /// <remarks>
        /// The &#x60;/transfer/repayment/list&#x60; endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given &#x60;start_time&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRepaymentListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferRepaymentListResponse</returns>
        System.Threading.Tasks.Task<TransferRepaymentListResponse> TransferRepaymentListAsync(TransferRepaymentListRequest transferRepaymentListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lists historical repayments
        /// </summary>
        /// <remarks>
        /// The &#x60;/transfer/repayment/list&#x60; endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given &#x60;start_time&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRepaymentListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferRepaymentListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransferRepaymentListResponse>> TransferRepaymentListWithHttpInfoAsync(TransferRepaymentListRequest transferRepaymentListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List the returns included in a repayment
        /// </summary>
        /// <remarks>
        /// The &#x60;/transfer/repayment/return/list&#x60; endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRepaymentReturnListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferRepaymentReturnListResponse</returns>
        System.Threading.Tasks.Task<TransferRepaymentReturnListResponse> TransferRepaymentReturnListAsync(TransferRepaymentReturnListRequest transferRepaymentReturnListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List the returns included in a repayment
        /// </summary>
        /// <remarks>
        /// The &#x60;/transfer/repayment/return/list&#x60; endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRepaymentReturnListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferRepaymentReturnListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransferRepaymentReturnListResponse>> TransferRepaymentReturnListWithHttpInfoAsync(TransferRepaymentReturnListRequest transferRepaymentReturnListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a sweep
        /// </summary>
        /// <remarks>
        /// The &#x60;/transfer/sweep/get&#x60; endpoint fetches a sweep corresponding to the given &#x60;sweep_id&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSweepGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferSweepGetResponse</returns>
        System.Threading.Tasks.Task<TransferSweepGetResponse> TransferSweepGetAsync(TransferSweepGetRequest transferSweepGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a sweep
        /// </summary>
        /// <remarks>
        /// The &#x60;/transfer/sweep/get&#x60; endpoint fetches a sweep corresponding to the given &#x60;sweep_id&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSweepGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferSweepGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransferSweepGetResponse>> TransferSweepGetWithHttpInfoAsync(TransferSweepGetRequest transferSweepGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List sweeps
        /// </summary>
        /// <remarks>
        /// The &#x60;/transfer/sweep/list&#x60; endpoint fetches sweeps matching the given filters.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSweepListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferSweepListResponse</returns>
        System.Threading.Tasks.Task<TransferSweepListResponse> TransferSweepListAsync(TransferSweepListRequest transferSweepListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List sweeps
        /// </summary>
        /// <remarks>
        /// The &#x60;/transfer/sweep/list&#x60; endpoint fetches sweeps matching the given filters.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSweepListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferSweepListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransferSweepListResponse>> TransferSweepListWithHttpInfoAsync(TransferSweepListRequest transferSweepListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch an e-wallet
        /// </summary>
        /// <remarks>
        /// Fetch an e-wallet. The response includes the current balance. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletGetResponse</returns>
        System.Threading.Tasks.Task<WalletGetResponse> WalletGetAsync(WalletGetRequest walletGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch an e-wallet
        /// </summary>
        /// <remarks>
        /// Fetch an e-wallet. The response includes the current balance. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletGetResponse>> WalletGetWithHttpInfoAsync(WalletGetRequest walletGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Execute a transaction using an e-wallet
        /// </summary>
        /// <remarks>
        /// Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate payouts, the amount and reference for the payout. The payouts are executed over the Faster Payment rails, where settlement usually only takes a few seconds. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionExecuteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletTransactionExecuteResponse</returns>
        System.Threading.Tasks.Task<WalletTransactionExecuteResponse> WalletTransactionExecuteAsync(WalletTransactionExecuteRequest walletTransactionExecuteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Execute a transaction using an e-wallet
        /// </summary>
        /// <remarks>
        /// Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate payouts, the amount and reference for the payout. The payouts are executed over the Faster Payment rails, where settlement usually only takes a few seconds. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionExecuteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletTransactionExecuteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletTransactionExecuteResponse>> WalletTransactionExecuteWithHttpInfoAsync(WalletTransactionExecuteRequest walletTransactionExecuteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List e-wallet transactions
        /// </summary>
        /// <remarks>
        /// This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the &#x60;created_at&#x60; time. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionsListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletTransactionsListResponse</returns>
        System.Threading.Tasks.Task<WalletTransactionsListResponse> WalletTransactionsListAsync(WalletTransactionsListRequest walletTransactionsListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List e-wallet transactions
        /// </summary>
        /// <remarks>
        /// This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the &#x60;created_at&#x60; time. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionsListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletTransactionsListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletTransactionsListResponse>> WalletTransactionsListWithHttpInfoAsync(WalletTransactionsListRequest walletTransactionsListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get webhook verification key
        /// </summary>
        /// <remarks>
        /// Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the &#x60;Plaid-Verification&#x60; header.  The &#x60;/webhook_verification_key/get&#x60; endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookVerificationKeyGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookVerificationKeyGetResponse</returns>
        System.Threading.Tasks.Task<WebhookVerificationKeyGetResponse> WebhookVerificationKeyGetAsync(WebhookVerificationKeyGetRequest webhookVerificationKeyGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get webhook verification key
        /// </summary>
        /// <remarks>
        /// Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the &#x60;Plaid-Verification&#x60; header.  The &#x60;/webhook_verification_key/get&#x60; endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookVerificationKeyGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookVerificationKeyGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookVerificationKeyGetResponse>> WebhookVerificationKeyGetWithHttpInfoAsync(WebhookVerificationKeyGetRequest webhookVerificationKeyGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlaidApi : IPlaidApiSync, IPlaidApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PlaidApi : IPlaidApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PlaidApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlaidApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlaidApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlaidApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlaidApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PlaidApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlaidApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PlaidApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve real-time balance data The &#x60;/accounts/balance/get&#x60; endpoint returns the real-time balance for each of an Item&#39;s accounts. While other endpoints may return a balance object, only &#x60;/accounts/balance/get&#x60; forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, &#x60;balance&#x60; itself is not a product that can be used to initialize Link.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountsBalanceGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountsGetResponse</returns>
        public AccountsGetResponse AccountsBalanceGet(AccountsBalanceGetRequest accountsBalanceGetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AccountsGetResponse> localVarResponse = AccountsBalanceGetWithHttpInfo(accountsBalanceGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve real-time balance data The &#x60;/accounts/balance/get&#x60; endpoint returns the real-time balance for each of an Item&#39;s accounts. While other endpoints may return a balance object, only &#x60;/accounts/balance/get&#x60; forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, &#x60;balance&#x60; itself is not a product that can be used to initialize Link.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountsBalanceGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountsGetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<AccountsGetResponse> AccountsBalanceGetWithHttpInfo(AccountsBalanceGetRequest accountsBalanceGetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'accountsBalanceGetRequest' is set
            if (accountsBalanceGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountsBalanceGetRequest' when calling PlaidApi->AccountsBalanceGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = accountsBalanceGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.AccountsBalanceGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AccountsGetResponse>("/accounts/balance/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsBalanceGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve real-time balance data The &#x60;/accounts/balance/get&#x60; endpoint returns the real-time balance for each of an Item&#39;s accounts. While other endpoints may return a balance object, only &#x60;/accounts/balance/get&#x60; forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, &#x60;balance&#x60; itself is not a product that can be used to initialize Link.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountsBalanceGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountsGetResponse</returns>
        public async System.Threading.Tasks.Task<AccountsGetResponse> AccountsBalanceGetAsync(AccountsBalanceGetRequest accountsBalanceGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AccountsGetResponse> localVarResponse = await AccountsBalanceGetWithHttpInfoAsync(accountsBalanceGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve real-time balance data The &#x60;/accounts/balance/get&#x60; endpoint returns the real-time balance for each of an Item&#39;s accounts. While other endpoints may return a balance object, only &#x60;/accounts/balance/get&#x60; forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, &#x60;balance&#x60; itself is not a product that can be used to initialize Link.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountsBalanceGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountsGetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AccountsGetResponse>> AccountsBalanceGetWithHttpInfoAsync(AccountsBalanceGetRequest accountsBalanceGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountsBalanceGetRequest' is set
            if (accountsBalanceGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountsBalanceGetRequest' when calling PlaidApi->AccountsBalanceGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = accountsBalanceGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.AccountsBalanceGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AccountsGetResponse>("/accounts/balance/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsBalanceGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve accounts The &#x60;/accounts/get&#x60; endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance.  This endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [&#x60;NEW_ACCOUNTS_AVAILABLE&#x60;](https://plaid.com/docs/api/webhooks/#item-new_accounts_available) webhook and then use Link&#39;s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use &#x60;/accounts/balance/get&#x60; instead. Note that some information is nullable.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountsGetResponse</returns>
        public AccountsGetResponse AccountsGet(AccountsGetRequest accountsGetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AccountsGetResponse> localVarResponse = AccountsGetWithHttpInfo(accountsGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve accounts The &#x60;/accounts/get&#x60; endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance.  This endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [&#x60;NEW_ACCOUNTS_AVAILABLE&#x60;](https://plaid.com/docs/api/webhooks/#item-new_accounts_available) webhook and then use Link&#39;s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use &#x60;/accounts/balance/get&#x60; instead. Note that some information is nullable.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountsGetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<AccountsGetResponse> AccountsGetWithHttpInfo(AccountsGetRequest accountsGetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'accountsGetRequest' is set
            if (accountsGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountsGetRequest' when calling PlaidApi->AccountsGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = accountsGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.AccountsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AccountsGetResponse>("/accounts/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve accounts The &#x60;/accounts/get&#x60; endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance.  This endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [&#x60;NEW_ACCOUNTS_AVAILABLE&#x60;](https://plaid.com/docs/api/webhooks/#item-new_accounts_available) webhook and then use Link&#39;s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use &#x60;/accounts/balance/get&#x60; instead. Note that some information is nullable.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountsGetResponse</returns>
        public async System.Threading.Tasks.Task<AccountsGetResponse> AccountsGetAsync(AccountsGetRequest accountsGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AccountsGetResponse> localVarResponse = await AccountsGetWithHttpInfoAsync(accountsGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve accounts The &#x60;/accounts/get&#x60; endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance.  This endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [&#x60;NEW_ACCOUNTS_AVAILABLE&#x60;](https://plaid.com/docs/api/webhooks/#item-new_accounts_available) webhook and then use Link&#39;s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use &#x60;/accounts/balance/get&#x60; instead. Note that some information is nullable.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountsGetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AccountsGetResponse>> AccountsGetWithHttpInfoAsync(AccountsGetRequest accountsGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountsGetRequest' is set
            if (accountsGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountsGetRequest' when calling PlaidApi->AccountsGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = accountsGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.AccountsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AccountsGetResponse>("/accounts/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve information about a Plaid application Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationGetResponse</returns>
        public ApplicationGetResponse ApplicationGet(ApplicationGetRequest applicationGetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ApplicationGetResponse> localVarResponse = ApplicationGetWithHttpInfo(applicationGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve information about a Plaid application Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationGetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ApplicationGetResponse> ApplicationGetWithHttpInfo(ApplicationGetRequest applicationGetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'applicationGetRequest' is set
            if (applicationGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'applicationGetRequest' when calling PlaidApi->ApplicationGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = applicationGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.ApplicationGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApplicationGetResponse>("/application/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve information about a Plaid application Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationGetResponse</returns>
        public async System.Threading.Tasks.Task<ApplicationGetResponse> ApplicationGetAsync(ApplicationGetRequest applicationGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ApplicationGetResponse> localVarResponse = await ApplicationGetWithHttpInfoAsync(applicationGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve information about a Plaid application Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationGetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ApplicationGetResponse>> ApplicationGetWithHttpInfoAsync(ApplicationGetRequest applicationGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationGetRequest' is set
            if (applicationGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'applicationGetRequest' when calling PlaidApi->ApplicationGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = applicationGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.ApplicationGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApplicationGetResponse>("/application/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Asset Report Audit Copy Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the &#x60;/asset_report/audit_copy/create&#x60; endpoint to create an &#x60;audit_copy_token&#x60; and then pass that token to the third party who needs access. Each third party has its own &#x60;auditor_id&#x60;, for example &#x60;fannie_mae&#x60;. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportAuditCopyCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssetReportAuditCopyCreateResponse</returns>
        public AssetReportAuditCopyCreateResponse AssetReportAuditCopyCreate(AssetReportAuditCopyCreateRequest assetReportAuditCopyCreateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AssetReportAuditCopyCreateResponse> localVarResponse = AssetReportAuditCopyCreateWithHttpInfo(assetReportAuditCopyCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Asset Report Audit Copy Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the &#x60;/asset_report/audit_copy/create&#x60; endpoint to create an &#x60;audit_copy_token&#x60; and then pass that token to the third party who needs access. Each third party has its own &#x60;auditor_id&#x60;, for example &#x60;fannie_mae&#x60;. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportAuditCopyCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssetReportAuditCopyCreateResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<AssetReportAuditCopyCreateResponse> AssetReportAuditCopyCreateWithHttpInfo(AssetReportAuditCopyCreateRequest assetReportAuditCopyCreateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'assetReportAuditCopyCreateRequest' is set
            if (assetReportAuditCopyCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assetReportAuditCopyCreateRequest' when calling PlaidApi->AssetReportAuditCopyCreate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = assetReportAuditCopyCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.AssetReportAuditCopyCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AssetReportAuditCopyCreateResponse>("/asset_report/audit_copy/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetReportAuditCopyCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Asset Report Audit Copy Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the &#x60;/asset_report/audit_copy/create&#x60; endpoint to create an &#x60;audit_copy_token&#x60; and then pass that token to the third party who needs access. Each third party has its own &#x60;auditor_id&#x60;, for example &#x60;fannie_mae&#x60;. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportAuditCopyCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetReportAuditCopyCreateResponse</returns>
        public async System.Threading.Tasks.Task<AssetReportAuditCopyCreateResponse> AssetReportAuditCopyCreateAsync(AssetReportAuditCopyCreateRequest assetReportAuditCopyCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AssetReportAuditCopyCreateResponse> localVarResponse = await AssetReportAuditCopyCreateWithHttpInfoAsync(assetReportAuditCopyCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Asset Report Audit Copy Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the &#x60;/asset_report/audit_copy/create&#x60; endpoint to create an &#x60;audit_copy_token&#x60; and then pass that token to the third party who needs access. Each third party has its own &#x60;auditor_id&#x60;, for example &#x60;fannie_mae&#x60;. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportAuditCopyCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetReportAuditCopyCreateResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AssetReportAuditCopyCreateResponse>> AssetReportAuditCopyCreateWithHttpInfoAsync(AssetReportAuditCopyCreateRequest assetReportAuditCopyCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'assetReportAuditCopyCreateRequest' is set
            if (assetReportAuditCopyCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assetReportAuditCopyCreateRequest' when calling PlaidApi->AssetReportAuditCopyCreate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = assetReportAuditCopyCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.AssetReportAuditCopyCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AssetReportAuditCopyCreateResponse>("/asset_report/audit_copy/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetReportAuditCopyCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Asset Report Audit Copy &#x60;/asset_report/audit_copy/get&#x60; allows auditors to get a copy of an Asset Report that was previously shared via the &#x60;/asset_report/audit_copy/create&#x60; endpoint.  The caller of &#x60;/asset_report/audit_copy/create&#x60; must provide the &#x60;audit_copy_token&#x60; to the auditor.  This token can then be used to call &#x60;/asset_report/audit_copy/create&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportAuditCopyGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssetReportGetResponse</returns>
        public AssetReportGetResponse AssetReportAuditCopyGet(AssetReportAuditCopyGetRequest assetReportAuditCopyGetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AssetReportGetResponse> localVarResponse = AssetReportAuditCopyGetWithHttpInfo(assetReportAuditCopyGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Asset Report Audit Copy &#x60;/asset_report/audit_copy/get&#x60; allows auditors to get a copy of an Asset Report that was previously shared via the &#x60;/asset_report/audit_copy/create&#x60; endpoint.  The caller of &#x60;/asset_report/audit_copy/create&#x60; must provide the &#x60;audit_copy_token&#x60; to the auditor.  This token can then be used to call &#x60;/asset_report/audit_copy/create&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportAuditCopyGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssetReportGetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<AssetReportGetResponse> AssetReportAuditCopyGetWithHttpInfo(AssetReportAuditCopyGetRequest assetReportAuditCopyGetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'assetReportAuditCopyGetRequest' is set
            if (assetReportAuditCopyGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assetReportAuditCopyGetRequest' when calling PlaidApi->AssetReportAuditCopyGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = assetReportAuditCopyGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.AssetReportAuditCopyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AssetReportGetResponse>("/asset_report/audit_copy/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetReportAuditCopyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Asset Report Audit Copy &#x60;/asset_report/audit_copy/get&#x60; allows auditors to get a copy of an Asset Report that was previously shared via the &#x60;/asset_report/audit_copy/create&#x60; endpoint.  The caller of &#x60;/asset_report/audit_copy/create&#x60; must provide the &#x60;audit_copy_token&#x60; to the auditor.  This token can then be used to call &#x60;/asset_report/audit_copy/create&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportAuditCopyGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetReportGetResponse</returns>
        public async System.Threading.Tasks.Task<AssetReportGetResponse> AssetReportAuditCopyGetAsync(AssetReportAuditCopyGetRequest assetReportAuditCopyGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AssetReportGetResponse> localVarResponse = await AssetReportAuditCopyGetWithHttpInfoAsync(assetReportAuditCopyGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Asset Report Audit Copy &#x60;/asset_report/audit_copy/get&#x60; allows auditors to get a copy of an Asset Report that was previously shared via the &#x60;/asset_report/audit_copy/create&#x60; endpoint.  The caller of &#x60;/asset_report/audit_copy/create&#x60; must provide the &#x60;audit_copy_token&#x60; to the auditor.  This token can then be used to call &#x60;/asset_report/audit_copy/create&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportAuditCopyGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetReportGetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AssetReportGetResponse>> AssetReportAuditCopyGetWithHttpInfoAsync(AssetReportAuditCopyGetRequest assetReportAuditCopyGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'assetReportAuditCopyGetRequest' is set
            if (assetReportAuditCopyGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assetReportAuditCopyGetRequest' when calling PlaidApi->AssetReportAuditCopyGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = assetReportAuditCopyGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.AssetReportAuditCopyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AssetReportGetResponse>("/asset_report/audit_copy/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetReportAuditCopyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Asset Report Audit Copy The &#x60;/asset_report/audit_copy/remove&#x60; endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the &#x60;audit_copy_token&#x60; associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportAuditCopyRemoveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssetReportAuditCopyRemoveResponse</returns>
        public AssetReportAuditCopyRemoveResponse AssetReportAuditCopyRemove(AssetReportAuditCopyRemoveRequest assetReportAuditCopyRemoveRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AssetReportAuditCopyRemoveResponse> localVarResponse = AssetReportAuditCopyRemoveWithHttpInfo(assetReportAuditCopyRemoveRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Asset Report Audit Copy The &#x60;/asset_report/audit_copy/remove&#x60; endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the &#x60;audit_copy_token&#x60; associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportAuditCopyRemoveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssetReportAuditCopyRemoveResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<AssetReportAuditCopyRemoveResponse> AssetReportAuditCopyRemoveWithHttpInfo(AssetReportAuditCopyRemoveRequest assetReportAuditCopyRemoveRequest, int operationIndex = 0)
        {
            // verify the required parameter 'assetReportAuditCopyRemoveRequest' is set
            if (assetReportAuditCopyRemoveRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assetReportAuditCopyRemoveRequest' when calling PlaidApi->AssetReportAuditCopyRemove");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = assetReportAuditCopyRemoveRequest;

            localVarRequestOptions.Operation = "PlaidApi.AssetReportAuditCopyRemove";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AssetReportAuditCopyRemoveResponse>("/asset_report/audit_copy/remove", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetReportAuditCopyRemove", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Asset Report Audit Copy The &#x60;/asset_report/audit_copy/remove&#x60; endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the &#x60;audit_copy_token&#x60; associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportAuditCopyRemoveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetReportAuditCopyRemoveResponse</returns>
        public async System.Threading.Tasks.Task<AssetReportAuditCopyRemoveResponse> AssetReportAuditCopyRemoveAsync(AssetReportAuditCopyRemoveRequest assetReportAuditCopyRemoveRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AssetReportAuditCopyRemoveResponse> localVarResponse = await AssetReportAuditCopyRemoveWithHttpInfoAsync(assetReportAuditCopyRemoveRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Asset Report Audit Copy The &#x60;/asset_report/audit_copy/remove&#x60; endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the &#x60;audit_copy_token&#x60; associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportAuditCopyRemoveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetReportAuditCopyRemoveResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AssetReportAuditCopyRemoveResponse>> AssetReportAuditCopyRemoveWithHttpInfoAsync(AssetReportAuditCopyRemoveRequest assetReportAuditCopyRemoveRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'assetReportAuditCopyRemoveRequest' is set
            if (assetReportAuditCopyRemoveRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assetReportAuditCopyRemoveRequest' when calling PlaidApi->AssetReportAuditCopyRemove");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = assetReportAuditCopyRemoveRequest;

            localVarRequestOptions.Operation = "PlaidApi.AssetReportAuditCopyRemove";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AssetReportAuditCopyRemoveResponse>("/asset_report/audit_copy/remove", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetReportAuditCopyRemove", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Asset Report The &#x60;/asset_report/create&#x60; endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the &#x60;asset_report_token&#x60; return value to the &#x60;/asset_report/get&#x60; or &#x60;/asset_report/pdf/get&#x60; endpoints.  The Asset Report takes some time to be created and is not available immediately after calling &#x60;/asset_report/create&#x60;. When the Asset Report is ready to be retrieved using &#x60;/asset_report/get&#x60; or &#x60;/asset_report/pdf/get&#x60;, Plaid will fire a &#x60;PRODUCT_READY&#x60; webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/webhooks/#assets-webhooks).  The &#x60;/asset_report/create&#x60; endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the &#x60;/asset_report/refresh&#x60; endpoint.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssetReportCreateResponse</returns>
        public AssetReportCreateResponse AssetReportCreate(AssetReportCreateRequest assetReportCreateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AssetReportCreateResponse> localVarResponse = AssetReportCreateWithHttpInfo(assetReportCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Asset Report The &#x60;/asset_report/create&#x60; endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the &#x60;asset_report_token&#x60; return value to the &#x60;/asset_report/get&#x60; or &#x60;/asset_report/pdf/get&#x60; endpoints.  The Asset Report takes some time to be created and is not available immediately after calling &#x60;/asset_report/create&#x60;. When the Asset Report is ready to be retrieved using &#x60;/asset_report/get&#x60; or &#x60;/asset_report/pdf/get&#x60;, Plaid will fire a &#x60;PRODUCT_READY&#x60; webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/webhooks/#assets-webhooks).  The &#x60;/asset_report/create&#x60; endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the &#x60;/asset_report/refresh&#x60; endpoint.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssetReportCreateResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<AssetReportCreateResponse> AssetReportCreateWithHttpInfo(AssetReportCreateRequest assetReportCreateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'assetReportCreateRequest' is set
            if (assetReportCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assetReportCreateRequest' when calling PlaidApi->AssetReportCreate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = assetReportCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.AssetReportCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AssetReportCreateResponse>("/asset_report/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetReportCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Asset Report The &#x60;/asset_report/create&#x60; endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the &#x60;asset_report_token&#x60; return value to the &#x60;/asset_report/get&#x60; or &#x60;/asset_report/pdf/get&#x60; endpoints.  The Asset Report takes some time to be created and is not available immediately after calling &#x60;/asset_report/create&#x60;. When the Asset Report is ready to be retrieved using &#x60;/asset_report/get&#x60; or &#x60;/asset_report/pdf/get&#x60;, Plaid will fire a &#x60;PRODUCT_READY&#x60; webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/webhooks/#assets-webhooks).  The &#x60;/asset_report/create&#x60; endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the &#x60;/asset_report/refresh&#x60; endpoint.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetReportCreateResponse</returns>
        public async System.Threading.Tasks.Task<AssetReportCreateResponse> AssetReportCreateAsync(AssetReportCreateRequest assetReportCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AssetReportCreateResponse> localVarResponse = await AssetReportCreateWithHttpInfoAsync(assetReportCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Asset Report The &#x60;/asset_report/create&#x60; endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the &#x60;asset_report_token&#x60; return value to the &#x60;/asset_report/get&#x60; or &#x60;/asset_report/pdf/get&#x60; endpoints.  The Asset Report takes some time to be created and is not available immediately after calling &#x60;/asset_report/create&#x60;. When the Asset Report is ready to be retrieved using &#x60;/asset_report/get&#x60; or &#x60;/asset_report/pdf/get&#x60;, Plaid will fire a &#x60;PRODUCT_READY&#x60; webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/webhooks/#assets-webhooks).  The &#x60;/asset_report/create&#x60; endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the &#x60;/asset_report/refresh&#x60; endpoint.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetReportCreateResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AssetReportCreateResponse>> AssetReportCreateWithHttpInfoAsync(AssetReportCreateRequest assetReportCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'assetReportCreateRequest' is set
            if (assetReportCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assetReportCreateRequest' when calling PlaidApi->AssetReportCreate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = assetReportCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.AssetReportCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AssetReportCreateResponse>("/asset_report/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetReportCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Filter Asset Report By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the &#x60;/accounts/get&#x60; endpoint. To narrow an Asset Report to only a subset of accounts, use the &#x60;/asset_report/filter&#x60; endpoint.  To exclude certain Accounts from an Asset Report, first use the &#x60;/asset_report/create&#x60; endpoint to create the report, then send the &#x60;asset_report_token&#x60; along with a list of &#x60;account_ids&#x60; to exclude to the &#x60;/asset_report/filter&#x60; endpoint, to create a new Asset Report which contains only a subset of the original Asset Report&#39;s data.  Because Asset Reports are immutable, calling &#x60;/asset_report/filter&#x60; does not alter the original Asset Report in any way; rather, &#x60;/asset_report/filter&#x60; creates a new Asset Report with a new token and id. Asset Reports created via &#x60;/asset_report/filter&#x60; do not contain new Asset data, and are not billed.  Plaid will fire a [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/webhooks) webhook once generation of the filtered Asset Report has completed.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportFilterRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssetReportFilterResponse</returns>
        public AssetReportFilterResponse AssetReportFilter(AssetReportFilterRequest assetReportFilterRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AssetReportFilterResponse> localVarResponse = AssetReportFilterWithHttpInfo(assetReportFilterRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Filter Asset Report By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the &#x60;/accounts/get&#x60; endpoint. To narrow an Asset Report to only a subset of accounts, use the &#x60;/asset_report/filter&#x60; endpoint.  To exclude certain Accounts from an Asset Report, first use the &#x60;/asset_report/create&#x60; endpoint to create the report, then send the &#x60;asset_report_token&#x60; along with a list of &#x60;account_ids&#x60; to exclude to the &#x60;/asset_report/filter&#x60; endpoint, to create a new Asset Report which contains only a subset of the original Asset Report&#39;s data.  Because Asset Reports are immutable, calling &#x60;/asset_report/filter&#x60; does not alter the original Asset Report in any way; rather, &#x60;/asset_report/filter&#x60; creates a new Asset Report with a new token and id. Asset Reports created via &#x60;/asset_report/filter&#x60; do not contain new Asset data, and are not billed.  Plaid will fire a [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/webhooks) webhook once generation of the filtered Asset Report has completed.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportFilterRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssetReportFilterResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<AssetReportFilterResponse> AssetReportFilterWithHttpInfo(AssetReportFilterRequest assetReportFilterRequest, int operationIndex = 0)
        {
            // verify the required parameter 'assetReportFilterRequest' is set
            if (assetReportFilterRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assetReportFilterRequest' when calling PlaidApi->AssetReportFilter");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = assetReportFilterRequest;

            localVarRequestOptions.Operation = "PlaidApi.AssetReportFilter";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AssetReportFilterResponse>("/asset_report/filter", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetReportFilter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Filter Asset Report By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the &#x60;/accounts/get&#x60; endpoint. To narrow an Asset Report to only a subset of accounts, use the &#x60;/asset_report/filter&#x60; endpoint.  To exclude certain Accounts from an Asset Report, first use the &#x60;/asset_report/create&#x60; endpoint to create the report, then send the &#x60;asset_report_token&#x60; along with a list of &#x60;account_ids&#x60; to exclude to the &#x60;/asset_report/filter&#x60; endpoint, to create a new Asset Report which contains only a subset of the original Asset Report&#39;s data.  Because Asset Reports are immutable, calling &#x60;/asset_report/filter&#x60; does not alter the original Asset Report in any way; rather, &#x60;/asset_report/filter&#x60; creates a new Asset Report with a new token and id. Asset Reports created via &#x60;/asset_report/filter&#x60; do not contain new Asset data, and are not billed.  Plaid will fire a [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/webhooks) webhook once generation of the filtered Asset Report has completed.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportFilterRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetReportFilterResponse</returns>
        public async System.Threading.Tasks.Task<AssetReportFilterResponse> AssetReportFilterAsync(AssetReportFilterRequest assetReportFilterRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AssetReportFilterResponse> localVarResponse = await AssetReportFilterWithHttpInfoAsync(assetReportFilterRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Filter Asset Report By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the &#x60;/accounts/get&#x60; endpoint. To narrow an Asset Report to only a subset of accounts, use the &#x60;/asset_report/filter&#x60; endpoint.  To exclude certain Accounts from an Asset Report, first use the &#x60;/asset_report/create&#x60; endpoint to create the report, then send the &#x60;asset_report_token&#x60; along with a list of &#x60;account_ids&#x60; to exclude to the &#x60;/asset_report/filter&#x60; endpoint, to create a new Asset Report which contains only a subset of the original Asset Report&#39;s data.  Because Asset Reports are immutable, calling &#x60;/asset_report/filter&#x60; does not alter the original Asset Report in any way; rather, &#x60;/asset_report/filter&#x60; creates a new Asset Report with a new token and id. Asset Reports created via &#x60;/asset_report/filter&#x60; do not contain new Asset data, and are not billed.  Plaid will fire a [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/webhooks) webhook once generation of the filtered Asset Report has completed.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportFilterRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetReportFilterResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AssetReportFilterResponse>> AssetReportFilterWithHttpInfoAsync(AssetReportFilterRequest assetReportFilterRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'assetReportFilterRequest' is set
            if (assetReportFilterRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assetReportFilterRequest' when calling PlaidApi->AssetReportFilter");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = assetReportFilterRequest;

            localVarRequestOptions.Operation = "PlaidApi.AssetReportFilter";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AssetReportFilterResponse>("/asset_report/filter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetReportFilter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Asset Report The &#x60;/asset_report/get&#x60; endpoint retrieves the Asset Report in JSON format. Before calling &#x60;/asset_report/get&#x60;, you must first create the Asset Report using &#x60;/asset_report/create&#x60; (or filter an Asset Report using &#x60;/asset_report/filter&#x60;) and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.  To retrieve an Asset Report with Insights, call the &#x60;/asset_report/get&#x60; endpoint with &#x60;include_insights&#x60; set to &#x60;true&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssetReportGetResponse</returns>
        public AssetReportGetResponse AssetReportGet(AssetReportGetRequest assetReportGetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AssetReportGetResponse> localVarResponse = AssetReportGetWithHttpInfo(assetReportGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Asset Report The &#x60;/asset_report/get&#x60; endpoint retrieves the Asset Report in JSON format. Before calling &#x60;/asset_report/get&#x60;, you must first create the Asset Report using &#x60;/asset_report/create&#x60; (or filter an Asset Report using &#x60;/asset_report/filter&#x60;) and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.  To retrieve an Asset Report with Insights, call the &#x60;/asset_report/get&#x60; endpoint with &#x60;include_insights&#x60; set to &#x60;true&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssetReportGetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<AssetReportGetResponse> AssetReportGetWithHttpInfo(AssetReportGetRequest assetReportGetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'assetReportGetRequest' is set
            if (assetReportGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assetReportGetRequest' when calling PlaidApi->AssetReportGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = assetReportGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.AssetReportGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AssetReportGetResponse>("/asset_report/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetReportGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Asset Report The &#x60;/asset_report/get&#x60; endpoint retrieves the Asset Report in JSON format. Before calling &#x60;/asset_report/get&#x60;, you must first create the Asset Report using &#x60;/asset_report/create&#x60; (or filter an Asset Report using &#x60;/asset_report/filter&#x60;) and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.  To retrieve an Asset Report with Insights, call the &#x60;/asset_report/get&#x60; endpoint with &#x60;include_insights&#x60; set to &#x60;true&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetReportGetResponse</returns>
        public async System.Threading.Tasks.Task<AssetReportGetResponse> AssetReportGetAsync(AssetReportGetRequest assetReportGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AssetReportGetResponse> localVarResponse = await AssetReportGetWithHttpInfoAsync(assetReportGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Asset Report The &#x60;/asset_report/get&#x60; endpoint retrieves the Asset Report in JSON format. Before calling &#x60;/asset_report/get&#x60;, you must first create the Asset Report using &#x60;/asset_report/create&#x60; (or filter an Asset Report using &#x60;/asset_report/filter&#x60;) and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.  To retrieve an Asset Report with Insights, call the &#x60;/asset_report/get&#x60; endpoint with &#x60;include_insights&#x60; set to &#x60;true&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetReportGetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AssetReportGetResponse>> AssetReportGetWithHttpInfoAsync(AssetReportGetRequest assetReportGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'assetReportGetRequest' is set
            if (assetReportGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assetReportGetRequest' when calling PlaidApi->AssetReportGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = assetReportGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.AssetReportGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AssetReportGetResponse>("/asset_report/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetReportGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a PDF Asset Report The &#x60;/asset_report/pdf/get&#x60; endpoint retrieves the Asset Report in PDF format. Before calling &#x60;/asset_report/pdf/get&#x60;, you must first create the Asset Report using &#x60;/asset_report/create&#x60; (or filter an Asset Report using &#x60;/asset_report/filter&#x60;) and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  The response to &#x60;/asset_report/pdf/get&#x60; is the PDF binary data. The &#x60;request_id&#x60;  is returned in the &#x60;Plaid-Request-ID&#x60; header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportPDFGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream AssetReportPdfGet(AssetReportPDFGetRequest assetReportPDFGetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = AssetReportPdfGetWithHttpInfo(assetReportPDFGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a PDF Asset Report The &#x60;/asset_report/pdf/get&#x60; endpoint retrieves the Asset Report in PDF format. Before calling &#x60;/asset_report/pdf/get&#x60;, you must first create the Asset Report using &#x60;/asset_report/create&#x60; (or filter an Asset Report using &#x60;/asset_report/filter&#x60;) and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  The response to &#x60;/asset_report/pdf/get&#x60; is the PDF binary data. The &#x60;request_id&#x60;  is returned in the &#x60;Plaid-Request-ID&#x60; header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportPDFGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> AssetReportPdfGetWithHttpInfo(AssetReportPDFGetRequest assetReportPDFGetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'assetReportPDFGetRequest' is set
            if (assetReportPDFGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assetReportPDFGetRequest' when calling PlaidApi->AssetReportPdfGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/pdf"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = assetReportPDFGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.AssetReportPdfGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<System.IO.Stream>("/asset_report/pdf/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetReportPdfGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a PDF Asset Report The &#x60;/asset_report/pdf/get&#x60; endpoint retrieves the Asset Report in PDF format. Before calling &#x60;/asset_report/pdf/get&#x60;, you must first create the Asset Report using &#x60;/asset_report/create&#x60; (or filter an Asset Report using &#x60;/asset_report/filter&#x60;) and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  The response to &#x60;/asset_report/pdf/get&#x60; is the PDF binary data. The &#x60;request_id&#x60;  is returned in the &#x60;Plaid-Request-ID&#x60; header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportPDFGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> AssetReportPdfGetAsync(AssetReportPDFGetRequest assetReportPDFGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = await AssetReportPdfGetWithHttpInfoAsync(assetReportPDFGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a PDF Asset Report The &#x60;/asset_report/pdf/get&#x60; endpoint retrieves the Asset Report in PDF format. Before calling &#x60;/asset_report/pdf/get&#x60;, you must first create the Asset Report using &#x60;/asset_report/create&#x60; (or filter an Asset Report using &#x60;/asset_report/filter&#x60;) and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  The response to &#x60;/asset_report/pdf/get&#x60; is the PDF binary data. The &#x60;request_id&#x60;  is returned in the &#x60;Plaid-Request-ID&#x60; header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportPDFGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<System.IO.Stream>> AssetReportPdfGetWithHttpInfoAsync(AssetReportPDFGetRequest assetReportPDFGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'assetReportPDFGetRequest' is set
            if (assetReportPDFGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assetReportPDFGetRequest' when calling PlaidApi->AssetReportPdfGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/pdf"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = assetReportPDFGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.AssetReportPdfGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<System.IO.Stream>("/asset_report/pdf/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetReportPdfGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refresh an Asset Report An Asset Report is an immutable snapshot of a user&#39;s assets. In order to \&quot;refresh\&quot; an Asset Report you created previously, you can use the &#x60;/asset_report/refresh&#x60; endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to &#x60;/asset_report/filter&#x60;. By default, the new Asset Report will also use the same parameters you submitted with your original &#x60;/asset_report/create&#x60; request, but the original &#x60;days_requested&#x60; value and the values of any parameters in the &#x60;options&#x60; object can be overridden with new values. To change these arguments, simply supply new values for them in your request to &#x60;/asset_report/refresh&#x60;. Submit an empty string (\&quot;\&quot;) for any previously-populated fields you would like set as empty.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportRefreshRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssetReportRefreshResponse</returns>
        public AssetReportRefreshResponse AssetReportRefresh(AssetReportRefreshRequest assetReportRefreshRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AssetReportRefreshResponse> localVarResponse = AssetReportRefreshWithHttpInfo(assetReportRefreshRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh an Asset Report An Asset Report is an immutable snapshot of a user&#39;s assets. In order to \&quot;refresh\&quot; an Asset Report you created previously, you can use the &#x60;/asset_report/refresh&#x60; endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to &#x60;/asset_report/filter&#x60;. By default, the new Asset Report will also use the same parameters you submitted with your original &#x60;/asset_report/create&#x60; request, but the original &#x60;days_requested&#x60; value and the values of any parameters in the &#x60;options&#x60; object can be overridden with new values. To change these arguments, simply supply new values for them in your request to &#x60;/asset_report/refresh&#x60;. Submit an empty string (\&quot;\&quot;) for any previously-populated fields you would like set as empty.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportRefreshRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssetReportRefreshResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<AssetReportRefreshResponse> AssetReportRefreshWithHttpInfo(AssetReportRefreshRequest assetReportRefreshRequest, int operationIndex = 0)
        {
            // verify the required parameter 'assetReportRefreshRequest' is set
            if (assetReportRefreshRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assetReportRefreshRequest' when calling PlaidApi->AssetReportRefresh");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = assetReportRefreshRequest;

            localVarRequestOptions.Operation = "PlaidApi.AssetReportRefresh";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AssetReportRefreshResponse>("/asset_report/refresh", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetReportRefresh", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refresh an Asset Report An Asset Report is an immutable snapshot of a user&#39;s assets. In order to \&quot;refresh\&quot; an Asset Report you created previously, you can use the &#x60;/asset_report/refresh&#x60; endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to &#x60;/asset_report/filter&#x60;. By default, the new Asset Report will also use the same parameters you submitted with your original &#x60;/asset_report/create&#x60; request, but the original &#x60;days_requested&#x60; value and the values of any parameters in the &#x60;options&#x60; object can be overridden with new values. To change these arguments, simply supply new values for them in your request to &#x60;/asset_report/refresh&#x60;. Submit an empty string (\&quot;\&quot;) for any previously-populated fields you would like set as empty.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportRefreshRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetReportRefreshResponse</returns>
        public async System.Threading.Tasks.Task<AssetReportRefreshResponse> AssetReportRefreshAsync(AssetReportRefreshRequest assetReportRefreshRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AssetReportRefreshResponse> localVarResponse = await AssetReportRefreshWithHttpInfoAsync(assetReportRefreshRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh an Asset Report An Asset Report is an immutable snapshot of a user&#39;s assets. In order to \&quot;refresh\&quot; an Asset Report you created previously, you can use the &#x60;/asset_report/refresh&#x60; endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to &#x60;/asset_report/filter&#x60;. By default, the new Asset Report will also use the same parameters you submitted with your original &#x60;/asset_report/create&#x60; request, but the original &#x60;days_requested&#x60; value and the values of any parameters in the &#x60;options&#x60; object can be overridden with new values. To change these arguments, simply supply new values for them in your request to &#x60;/asset_report/refresh&#x60;. Submit an empty string (\&quot;\&quot;) for any previously-populated fields you would like set as empty.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportRefreshRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetReportRefreshResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AssetReportRefreshResponse>> AssetReportRefreshWithHttpInfoAsync(AssetReportRefreshRequest assetReportRefreshRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'assetReportRefreshRequest' is set
            if (assetReportRefreshRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assetReportRefreshRequest' when calling PlaidApi->AssetReportRefresh");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = assetReportRefreshRequest;

            localVarRequestOptions.Operation = "PlaidApi.AssetReportRefresh";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AssetReportRefreshResponse>("/asset_report/refresh", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetReportRefresh", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an Asset Report The &#x60;/item/remove&#x60; endpoint allows you to invalidate an &#x60;access_token&#x60;, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The &#x60;/asset_report/remove&#x60; endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its &#x60;asset_report_token&#x60;, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any &#x60;audit_copy_tokens&#x60; associated with the Asset Report.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportRemoveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssetReportRemoveResponse</returns>
        public AssetReportRemoveResponse AssetReportRemove(AssetReportRemoveRequest assetReportRemoveRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AssetReportRemoveResponse> localVarResponse = AssetReportRemoveWithHttpInfo(assetReportRemoveRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an Asset Report The &#x60;/item/remove&#x60; endpoint allows you to invalidate an &#x60;access_token&#x60;, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The &#x60;/asset_report/remove&#x60; endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its &#x60;asset_report_token&#x60;, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any &#x60;audit_copy_tokens&#x60; associated with the Asset Report.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportRemoveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssetReportRemoveResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<AssetReportRemoveResponse> AssetReportRemoveWithHttpInfo(AssetReportRemoveRequest assetReportRemoveRequest, int operationIndex = 0)
        {
            // verify the required parameter 'assetReportRemoveRequest' is set
            if (assetReportRemoveRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assetReportRemoveRequest' when calling PlaidApi->AssetReportRemove");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = assetReportRemoveRequest;

            localVarRequestOptions.Operation = "PlaidApi.AssetReportRemove";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AssetReportRemoveResponse>("/asset_report/remove", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetReportRemove", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an Asset Report The &#x60;/item/remove&#x60; endpoint allows you to invalidate an &#x60;access_token&#x60;, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The &#x60;/asset_report/remove&#x60; endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its &#x60;asset_report_token&#x60;, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any &#x60;audit_copy_tokens&#x60; associated with the Asset Report.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportRemoveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetReportRemoveResponse</returns>
        public async System.Threading.Tasks.Task<AssetReportRemoveResponse> AssetReportRemoveAsync(AssetReportRemoveRequest assetReportRemoveRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AssetReportRemoveResponse> localVarResponse = await AssetReportRemoveWithHttpInfoAsync(assetReportRemoveRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an Asset Report The &#x60;/item/remove&#x60; endpoint allows you to invalidate an &#x60;access_token&#x60;, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The &#x60;/asset_report/remove&#x60; endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its &#x60;asset_report_token&#x60;, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any &#x60;audit_copy_tokens&#x60; associated with the Asset Report.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetReportRemoveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetReportRemoveResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AssetReportRemoveResponse>> AssetReportRemoveWithHttpInfoAsync(AssetReportRemoveRequest assetReportRemoveRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'assetReportRemoveRequest' is set
            if (assetReportRemoveRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assetReportRemoveRequest' when calling PlaidApi->AssetReportRemove");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = assetReportRemoveRequest;

            localVarRequestOptions.Operation = "PlaidApi.AssetReportRemove";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AssetReportRemoveResponse>("/asset_report/remove", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssetReportRemove", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve auth data The &#x60;/auth/get&#x60; endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item&#39;s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if &#x60;auth&#x60; was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Also note that &#x60;/auth/get&#x60; will not return data for any new accounts opened after the Item was created. To obtain data for new accounts, create a new Item.  Versioning note: In API version 2017-03-08, the schema of the &#x60;numbers&#x60; object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AuthGetResponse</returns>
        public AuthGetResponse AuthGet(AuthGetRequest authGetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AuthGetResponse> localVarResponse = AuthGetWithHttpInfo(authGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve auth data The &#x60;/auth/get&#x60; endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item&#39;s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if &#x60;auth&#x60; was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Also note that &#x60;/auth/get&#x60; will not return data for any new accounts opened after the Item was created. To obtain data for new accounts, create a new Item.  Versioning note: In API version 2017-03-08, the schema of the &#x60;numbers&#x60; object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AuthGetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<AuthGetResponse> AuthGetWithHttpInfo(AuthGetRequest authGetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'authGetRequest' is set
            if (authGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authGetRequest' when calling PlaidApi->AuthGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = authGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.AuthGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthGetResponse>("/auth/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve auth data The &#x60;/auth/get&#x60; endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item&#39;s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if &#x60;auth&#x60; was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Also note that &#x60;/auth/get&#x60; will not return data for any new accounts opened after the Item was created. To obtain data for new accounts, create a new Item.  Versioning note: In API version 2017-03-08, the schema of the &#x60;numbers&#x60; object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthGetResponse</returns>
        public async System.Threading.Tasks.Task<AuthGetResponse> AuthGetAsync(AuthGetRequest authGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AuthGetResponse> localVarResponse = await AuthGetWithHttpInfoAsync(authGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve auth data The &#x60;/auth/get&#x60; endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item&#39;s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if &#x60;auth&#x60; was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Also note that &#x60;/auth/get&#x60; will not return data for any new accounts opened after the Item was created. To obtain data for new accounts, create a new Item.  Versioning note: In API version 2017-03-08, the schema of the &#x60;numbers&#x60; object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthGetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AuthGetResponse>> AuthGetWithHttpInfoAsync(AuthGetRequest authGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authGetRequest' is set
            if (authGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authGetRequest' when calling PlaidApi->AuthGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = authGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.AuthGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthGetResponse>("/auth/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get balance of your Bank Transfer account Use the &#x60;/bank_transfer/balance/get&#x60; endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferBalanceGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransferBalanceGetResponse</returns>
        public BankTransferBalanceGetResponse BankTransferBalanceGet(BankTransferBalanceGetRequest bankTransferBalanceGetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransferBalanceGetResponse> localVarResponse = BankTransferBalanceGetWithHttpInfo(bankTransferBalanceGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get balance of your Bank Transfer account Use the &#x60;/bank_transfer/balance/get&#x60; endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferBalanceGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransferBalanceGetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BankTransferBalanceGetResponse> BankTransferBalanceGetWithHttpInfo(BankTransferBalanceGetRequest bankTransferBalanceGetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'bankTransferBalanceGetRequest' is set
            if (bankTransferBalanceGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bankTransferBalanceGetRequest' when calling PlaidApi->BankTransferBalanceGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bankTransferBalanceGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.BankTransferBalanceGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BankTransferBalanceGetResponse>("/bank_transfer/balance/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BankTransferBalanceGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get balance of your Bank Transfer account Use the &#x60;/bank_transfer/balance/get&#x60; endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferBalanceGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransferBalanceGetResponse</returns>
        public async System.Threading.Tasks.Task<BankTransferBalanceGetResponse> BankTransferBalanceGetAsync(BankTransferBalanceGetRequest bankTransferBalanceGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransferBalanceGetResponse> localVarResponse = await BankTransferBalanceGetWithHttpInfoAsync(bankTransferBalanceGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get balance of your Bank Transfer account Use the &#x60;/bank_transfer/balance/get&#x60; endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferBalanceGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransferBalanceGetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BankTransferBalanceGetResponse>> BankTransferBalanceGetWithHttpInfoAsync(BankTransferBalanceGetRequest bankTransferBalanceGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bankTransferBalanceGetRequest' is set
            if (bankTransferBalanceGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bankTransferBalanceGetRequest' when calling PlaidApi->BankTransferBalanceGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bankTransferBalanceGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.BankTransferBalanceGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BankTransferBalanceGetResponse>("/bank_transfer/balance/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BankTransferBalanceGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel a bank transfer Use the &#x60;/bank_transfer/cancel&#x60; endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the &#x60;cancellable&#x60; property returned by &#x60;/bank_transfer/get&#x60; is &#x60;true&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferCancelRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransferCancelResponse</returns>
        public BankTransferCancelResponse BankTransferCancel(BankTransferCancelRequest bankTransferCancelRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransferCancelResponse> localVarResponse = BankTransferCancelWithHttpInfo(bankTransferCancelRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel a bank transfer Use the &#x60;/bank_transfer/cancel&#x60; endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the &#x60;cancellable&#x60; property returned by &#x60;/bank_transfer/get&#x60; is &#x60;true&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferCancelRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransferCancelResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BankTransferCancelResponse> BankTransferCancelWithHttpInfo(BankTransferCancelRequest bankTransferCancelRequest, int operationIndex = 0)
        {
            // verify the required parameter 'bankTransferCancelRequest' is set
            if (bankTransferCancelRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bankTransferCancelRequest' when calling PlaidApi->BankTransferCancel");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bankTransferCancelRequest;

            localVarRequestOptions.Operation = "PlaidApi.BankTransferCancel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BankTransferCancelResponse>("/bank_transfer/cancel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BankTransferCancel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel a bank transfer Use the &#x60;/bank_transfer/cancel&#x60; endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the &#x60;cancellable&#x60; property returned by &#x60;/bank_transfer/get&#x60; is &#x60;true&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferCancelRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransferCancelResponse</returns>
        public async System.Threading.Tasks.Task<BankTransferCancelResponse> BankTransferCancelAsync(BankTransferCancelRequest bankTransferCancelRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransferCancelResponse> localVarResponse = await BankTransferCancelWithHttpInfoAsync(bankTransferCancelRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel a bank transfer Use the &#x60;/bank_transfer/cancel&#x60; endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the &#x60;cancellable&#x60; property returned by &#x60;/bank_transfer/get&#x60; is &#x60;true&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferCancelRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransferCancelResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BankTransferCancelResponse>> BankTransferCancelWithHttpInfoAsync(BankTransferCancelRequest bankTransferCancelRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bankTransferCancelRequest' is set
            if (bankTransferCancelRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bankTransferCancelRequest' when calling PlaidApi->BankTransferCancel");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bankTransferCancelRequest;

            localVarRequestOptions.Operation = "PlaidApi.BankTransferCancel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BankTransferCancelResponse>("/bank_transfer/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BankTransferCancel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a bank transfer Use the &#x60;/bank_transfer/create&#x60; endpoint to initiate a new bank transfer.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransferCreateResponse</returns>
        public BankTransferCreateResponse BankTransferCreate(BankTransferCreateRequest bankTransferCreateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransferCreateResponse> localVarResponse = BankTransferCreateWithHttpInfo(bankTransferCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a bank transfer Use the &#x60;/bank_transfer/create&#x60; endpoint to initiate a new bank transfer.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransferCreateResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BankTransferCreateResponse> BankTransferCreateWithHttpInfo(BankTransferCreateRequest bankTransferCreateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'bankTransferCreateRequest' is set
            if (bankTransferCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bankTransferCreateRequest' when calling PlaidApi->BankTransferCreate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bankTransferCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.BankTransferCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BankTransferCreateResponse>("/bank_transfer/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BankTransferCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a bank transfer Use the &#x60;/bank_transfer/create&#x60; endpoint to initiate a new bank transfer.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransferCreateResponse</returns>
        public async System.Threading.Tasks.Task<BankTransferCreateResponse> BankTransferCreateAsync(BankTransferCreateRequest bankTransferCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransferCreateResponse> localVarResponse = await BankTransferCreateWithHttpInfoAsync(bankTransferCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a bank transfer Use the &#x60;/bank_transfer/create&#x60; endpoint to initiate a new bank transfer.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransferCreateResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BankTransferCreateResponse>> BankTransferCreateWithHttpInfoAsync(BankTransferCreateRequest bankTransferCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bankTransferCreateRequest' is set
            if (bankTransferCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bankTransferCreateRequest' when calling PlaidApi->BankTransferCreate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bankTransferCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.BankTransferCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BankTransferCreateResponse>("/bank_transfer/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BankTransferCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List bank transfer events Use the &#x60;/bank_transfer/event/list&#x60; endpoint to get a list of bank transfer events based on specified filter criteria.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferEventListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransferEventListResponse</returns>
        public BankTransferEventListResponse BankTransferEventList(BankTransferEventListRequest bankTransferEventListRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransferEventListResponse> localVarResponse = BankTransferEventListWithHttpInfo(bankTransferEventListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List bank transfer events Use the &#x60;/bank_transfer/event/list&#x60; endpoint to get a list of bank transfer events based on specified filter criteria.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferEventListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransferEventListResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BankTransferEventListResponse> BankTransferEventListWithHttpInfo(BankTransferEventListRequest bankTransferEventListRequest, int operationIndex = 0)
        {
            // verify the required parameter 'bankTransferEventListRequest' is set
            if (bankTransferEventListRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bankTransferEventListRequest' when calling PlaidApi->BankTransferEventList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bankTransferEventListRequest;

            localVarRequestOptions.Operation = "PlaidApi.BankTransferEventList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BankTransferEventListResponse>("/bank_transfer/event/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BankTransferEventList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List bank transfer events Use the &#x60;/bank_transfer/event/list&#x60; endpoint to get a list of bank transfer events based on specified filter criteria.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferEventListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransferEventListResponse</returns>
        public async System.Threading.Tasks.Task<BankTransferEventListResponse> BankTransferEventListAsync(BankTransferEventListRequest bankTransferEventListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransferEventListResponse> localVarResponse = await BankTransferEventListWithHttpInfoAsync(bankTransferEventListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List bank transfer events Use the &#x60;/bank_transfer/event/list&#x60; endpoint to get a list of bank transfer events based on specified filter criteria.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferEventListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransferEventListResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BankTransferEventListResponse>> BankTransferEventListWithHttpInfoAsync(BankTransferEventListRequest bankTransferEventListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bankTransferEventListRequest' is set
            if (bankTransferEventListRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bankTransferEventListRequest' when calling PlaidApi->BankTransferEventList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bankTransferEventListRequest;

            localVarRequestOptions.Operation = "PlaidApi.BankTransferEventList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BankTransferEventListResponse>("/bank_transfer/event/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BankTransferEventList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sync bank transfer events &#x60;/bank_transfer/event/sync&#x60; allows you to request up to the next 25 bank transfer events that happened after a specific &#x60;event_id&#x60;. Use the &#x60;/bank_transfer/event/sync&#x60; endpoint to guarantee you have seen all bank transfer events.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferEventSyncRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransferEventSyncResponse</returns>
        public BankTransferEventSyncResponse BankTransferEventSync(BankTransferEventSyncRequest bankTransferEventSyncRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransferEventSyncResponse> localVarResponse = BankTransferEventSyncWithHttpInfo(bankTransferEventSyncRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sync bank transfer events &#x60;/bank_transfer/event/sync&#x60; allows you to request up to the next 25 bank transfer events that happened after a specific &#x60;event_id&#x60;. Use the &#x60;/bank_transfer/event/sync&#x60; endpoint to guarantee you have seen all bank transfer events.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferEventSyncRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransferEventSyncResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BankTransferEventSyncResponse> BankTransferEventSyncWithHttpInfo(BankTransferEventSyncRequest bankTransferEventSyncRequest, int operationIndex = 0)
        {
            // verify the required parameter 'bankTransferEventSyncRequest' is set
            if (bankTransferEventSyncRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bankTransferEventSyncRequest' when calling PlaidApi->BankTransferEventSync");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bankTransferEventSyncRequest;

            localVarRequestOptions.Operation = "PlaidApi.BankTransferEventSync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BankTransferEventSyncResponse>("/bank_transfer/event/sync", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BankTransferEventSync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sync bank transfer events &#x60;/bank_transfer/event/sync&#x60; allows you to request up to the next 25 bank transfer events that happened after a specific &#x60;event_id&#x60;. Use the &#x60;/bank_transfer/event/sync&#x60; endpoint to guarantee you have seen all bank transfer events.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferEventSyncRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransferEventSyncResponse</returns>
        public async System.Threading.Tasks.Task<BankTransferEventSyncResponse> BankTransferEventSyncAsync(BankTransferEventSyncRequest bankTransferEventSyncRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransferEventSyncResponse> localVarResponse = await BankTransferEventSyncWithHttpInfoAsync(bankTransferEventSyncRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sync bank transfer events &#x60;/bank_transfer/event/sync&#x60; allows you to request up to the next 25 bank transfer events that happened after a specific &#x60;event_id&#x60;. Use the &#x60;/bank_transfer/event/sync&#x60; endpoint to guarantee you have seen all bank transfer events.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferEventSyncRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransferEventSyncResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BankTransferEventSyncResponse>> BankTransferEventSyncWithHttpInfoAsync(BankTransferEventSyncRequest bankTransferEventSyncRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bankTransferEventSyncRequest' is set
            if (bankTransferEventSyncRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bankTransferEventSyncRequest' when calling PlaidApi->BankTransferEventSync");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bankTransferEventSyncRequest;

            localVarRequestOptions.Operation = "PlaidApi.BankTransferEventSync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BankTransferEventSyncResponse>("/bank_transfer/event/sync", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BankTransferEventSync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a bank transfer The &#x60;/bank_transfer/get&#x60; fetches information about the bank transfer corresponding to the given &#x60;bank_transfer_id&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransferGetResponse</returns>
        public BankTransferGetResponse BankTransferGet(BankTransferGetRequest bankTransferGetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransferGetResponse> localVarResponse = BankTransferGetWithHttpInfo(bankTransferGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a bank transfer The &#x60;/bank_transfer/get&#x60; fetches information about the bank transfer corresponding to the given &#x60;bank_transfer_id&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransferGetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BankTransferGetResponse> BankTransferGetWithHttpInfo(BankTransferGetRequest bankTransferGetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'bankTransferGetRequest' is set
            if (bankTransferGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bankTransferGetRequest' when calling PlaidApi->BankTransferGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bankTransferGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.BankTransferGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BankTransferGetResponse>("/bank_transfer/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BankTransferGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a bank transfer The &#x60;/bank_transfer/get&#x60; fetches information about the bank transfer corresponding to the given &#x60;bank_transfer_id&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransferGetResponse</returns>
        public async System.Threading.Tasks.Task<BankTransferGetResponse> BankTransferGetAsync(BankTransferGetRequest bankTransferGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransferGetResponse> localVarResponse = await BankTransferGetWithHttpInfoAsync(bankTransferGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a bank transfer The &#x60;/bank_transfer/get&#x60; fetches information about the bank transfer corresponding to the given &#x60;bank_transfer_id&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransferGetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BankTransferGetResponse>> BankTransferGetWithHttpInfoAsync(BankTransferGetRequest bankTransferGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bankTransferGetRequest' is set
            if (bankTransferGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bankTransferGetRequest' when calling PlaidApi->BankTransferGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bankTransferGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.BankTransferGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BankTransferGetResponse>("/bank_transfer/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BankTransferGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List bank transfers Use the &#x60;/bank_transfer/list&#x60; endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired bank transfers. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransferListResponse</returns>
        public BankTransferListResponse BankTransferList(BankTransferListRequest bankTransferListRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransferListResponse> localVarResponse = BankTransferListWithHttpInfo(bankTransferListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List bank transfers Use the &#x60;/bank_transfer/list&#x60; endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired bank transfers. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransferListResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BankTransferListResponse> BankTransferListWithHttpInfo(BankTransferListRequest bankTransferListRequest, int operationIndex = 0)
        {
            // verify the required parameter 'bankTransferListRequest' is set
            if (bankTransferListRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bankTransferListRequest' when calling PlaidApi->BankTransferList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bankTransferListRequest;

            localVarRequestOptions.Operation = "PlaidApi.BankTransferList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BankTransferListResponse>("/bank_transfer/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BankTransferList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List bank transfers Use the &#x60;/bank_transfer/list&#x60; endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired bank transfers. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransferListResponse</returns>
        public async System.Threading.Tasks.Task<BankTransferListResponse> BankTransferListAsync(BankTransferListRequest bankTransferListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransferListResponse> localVarResponse = await BankTransferListWithHttpInfoAsync(bankTransferListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List bank transfers Use the &#x60;/bank_transfer/list&#x60; endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired bank transfers. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransferListResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BankTransferListResponse>> BankTransferListWithHttpInfoAsync(BankTransferListRequest bankTransferListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bankTransferListRequest' is set
            if (bankTransferListRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bankTransferListRequest' when calling PlaidApi->BankTransferList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bankTransferListRequest;

            localVarRequestOptions.Operation = "PlaidApi.BankTransferList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BankTransferListResponse>("/bank_transfer/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BankTransferList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Migrate account into Bank Transfers As an alternative to adding Items via Link, you can also use the &#x60;/bank_transfer/migrate_account&#x60; endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as &#x60;/accounts/balance/get&#x60;, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to &#x60;/bank_transfer/migrate_account&#x60; is not enabled by default; to obtain access, contact your Plaid Account Manager.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferMigrateAccountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransferMigrateAccountResponse</returns>
        public BankTransferMigrateAccountResponse BankTransferMigrateAccount(BankTransferMigrateAccountRequest bankTransferMigrateAccountRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransferMigrateAccountResponse> localVarResponse = BankTransferMigrateAccountWithHttpInfo(bankTransferMigrateAccountRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Migrate account into Bank Transfers As an alternative to adding Items via Link, you can also use the &#x60;/bank_transfer/migrate_account&#x60; endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as &#x60;/accounts/balance/get&#x60;, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to &#x60;/bank_transfer/migrate_account&#x60; is not enabled by default; to obtain access, contact your Plaid Account Manager.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferMigrateAccountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransferMigrateAccountResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BankTransferMigrateAccountResponse> BankTransferMigrateAccountWithHttpInfo(BankTransferMigrateAccountRequest bankTransferMigrateAccountRequest, int operationIndex = 0)
        {
            // verify the required parameter 'bankTransferMigrateAccountRequest' is set
            if (bankTransferMigrateAccountRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bankTransferMigrateAccountRequest' when calling PlaidApi->BankTransferMigrateAccount");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bankTransferMigrateAccountRequest;

            localVarRequestOptions.Operation = "PlaidApi.BankTransferMigrateAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BankTransferMigrateAccountResponse>("/bank_transfer/migrate_account", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BankTransferMigrateAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Migrate account into Bank Transfers As an alternative to adding Items via Link, you can also use the &#x60;/bank_transfer/migrate_account&#x60; endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as &#x60;/accounts/balance/get&#x60;, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to &#x60;/bank_transfer/migrate_account&#x60; is not enabled by default; to obtain access, contact your Plaid Account Manager.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferMigrateAccountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransferMigrateAccountResponse</returns>
        public async System.Threading.Tasks.Task<BankTransferMigrateAccountResponse> BankTransferMigrateAccountAsync(BankTransferMigrateAccountRequest bankTransferMigrateAccountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransferMigrateAccountResponse> localVarResponse = await BankTransferMigrateAccountWithHttpInfoAsync(bankTransferMigrateAccountRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Migrate account into Bank Transfers As an alternative to adding Items via Link, you can also use the &#x60;/bank_transfer/migrate_account&#x60; endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as &#x60;/accounts/balance/get&#x60;, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to &#x60;/bank_transfer/migrate_account&#x60; is not enabled by default; to obtain access, contact your Plaid Account Manager.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferMigrateAccountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransferMigrateAccountResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BankTransferMigrateAccountResponse>> BankTransferMigrateAccountWithHttpInfoAsync(BankTransferMigrateAccountRequest bankTransferMigrateAccountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bankTransferMigrateAccountRequest' is set
            if (bankTransferMigrateAccountRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bankTransferMigrateAccountRequest' when calling PlaidApi->BankTransferMigrateAccount");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bankTransferMigrateAccountRequest;

            localVarRequestOptions.Operation = "PlaidApi.BankTransferMigrateAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BankTransferMigrateAccountResponse>("/bank_transfer/migrate_account", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BankTransferMigrateAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a sweep The &#x60;/bank_transfer/sweep/get&#x60; endpoint fetches information about the sweep corresponding to the given &#x60;sweep_id&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferSweepGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransferSweepGetResponse</returns>
        public BankTransferSweepGetResponse BankTransferSweepGet(BankTransferSweepGetRequest bankTransferSweepGetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransferSweepGetResponse> localVarResponse = BankTransferSweepGetWithHttpInfo(bankTransferSweepGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a sweep The &#x60;/bank_transfer/sweep/get&#x60; endpoint fetches information about the sweep corresponding to the given &#x60;sweep_id&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferSweepGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransferSweepGetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BankTransferSweepGetResponse> BankTransferSweepGetWithHttpInfo(BankTransferSweepGetRequest bankTransferSweepGetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'bankTransferSweepGetRequest' is set
            if (bankTransferSweepGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bankTransferSweepGetRequest' when calling PlaidApi->BankTransferSweepGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bankTransferSweepGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.BankTransferSweepGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BankTransferSweepGetResponse>("/bank_transfer/sweep/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BankTransferSweepGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a sweep The &#x60;/bank_transfer/sweep/get&#x60; endpoint fetches information about the sweep corresponding to the given &#x60;sweep_id&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferSweepGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransferSweepGetResponse</returns>
        public async System.Threading.Tasks.Task<BankTransferSweepGetResponse> BankTransferSweepGetAsync(BankTransferSweepGetRequest bankTransferSweepGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransferSweepGetResponse> localVarResponse = await BankTransferSweepGetWithHttpInfoAsync(bankTransferSweepGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a sweep The &#x60;/bank_transfer/sweep/get&#x60; endpoint fetches information about the sweep corresponding to the given &#x60;sweep_id&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferSweepGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransferSweepGetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BankTransferSweepGetResponse>> BankTransferSweepGetWithHttpInfoAsync(BankTransferSweepGetRequest bankTransferSweepGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bankTransferSweepGetRequest' is set
            if (bankTransferSweepGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bankTransferSweepGetRequest' when calling PlaidApi->BankTransferSweepGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bankTransferSweepGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.BankTransferSweepGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BankTransferSweepGetResponse>("/bank_transfer/sweep/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BankTransferSweepGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List sweeps The &#x60;/bank_transfer/sweep/list&#x60; endpoint fetches information about the sweeps matching the given filters.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferSweepListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransferSweepListResponse</returns>
        public BankTransferSweepListResponse BankTransferSweepList(BankTransferSweepListRequest bankTransferSweepListRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransferSweepListResponse> localVarResponse = BankTransferSweepListWithHttpInfo(bankTransferSweepListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List sweeps The &#x60;/bank_transfer/sweep/list&#x60; endpoint fetches information about the sweeps matching the given filters.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferSweepListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransferSweepListResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BankTransferSweepListResponse> BankTransferSweepListWithHttpInfo(BankTransferSweepListRequest bankTransferSweepListRequest, int operationIndex = 0)
        {
            // verify the required parameter 'bankTransferSweepListRequest' is set
            if (bankTransferSweepListRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bankTransferSweepListRequest' when calling PlaidApi->BankTransferSweepList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bankTransferSweepListRequest;

            localVarRequestOptions.Operation = "PlaidApi.BankTransferSweepList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BankTransferSweepListResponse>("/bank_transfer/sweep/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BankTransferSweepList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List sweeps The &#x60;/bank_transfer/sweep/list&#x60; endpoint fetches information about the sweeps matching the given filters.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferSweepListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransferSweepListResponse</returns>
        public async System.Threading.Tasks.Task<BankTransferSweepListResponse> BankTransferSweepListAsync(BankTransferSweepListRequest bankTransferSweepListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransferSweepListResponse> localVarResponse = await BankTransferSweepListWithHttpInfoAsync(bankTransferSweepListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List sweeps The &#x60;/bank_transfer/sweep/list&#x60; endpoint fetches information about the sweeps matching the given filters.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankTransferSweepListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransferSweepListResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BankTransferSweepListResponse>> BankTransferSweepListWithHttpInfoAsync(BankTransferSweepListRequest bankTransferSweepListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bankTransferSweepListRequest' is set
            if (bankTransferSweepListRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bankTransferSweepListRequest' when calling PlaidApi->BankTransferSweepList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bankTransferSweepListRequest;

            localVarRequestOptions.Operation = "PlaidApi.BankTransferSweepList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BankTransferSweepListResponse>("/bank_transfer/sweep/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BankTransferSweepList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Categories Send a request to the &#x60;/categories/get&#x60; endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoriesGetResponse</returns>
        public CategoriesGetResponse CategoriesGet(Object body, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CategoriesGetResponse> localVarResponse = CategoriesGetWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Categories Send a request to the &#x60;/categories/get&#x60; endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoriesGetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<CategoriesGetResponse> CategoriesGetWithHttpInfo(Object body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling PlaidApi->CategoriesGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PlaidApi.CategoriesGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CategoriesGetResponse>("/categories/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CategoriesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Categories Send a request to the &#x60;/categories/get&#x60; endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoriesGetResponse</returns>
        public async System.Threading.Tasks.Task<CategoriesGetResponse> CategoriesGetAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CategoriesGetResponse> localVarResponse = await CategoriesGetWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Categories Send a request to the &#x60;/categories/get&#x60; endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoriesGetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CategoriesGetResponse>> CategoriesGetWithHttpInfoAsync(Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling PlaidApi->CategoriesGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PlaidApi.CategoriesGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CategoriesGetResponse>("/categories/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CategoriesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create payment token The &#x60;/payment_initiation/payment/token/create&#x60; endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, &#x60;link_token&#x60;-based flow. The recommended flow is to provide the &#x60;payment_id&#x60; to &#x60;/link/token/create&#x60;, which returns a &#x60;link_token&#x60; used to initialize Link.  The &#x60;/payment_initiation/payment/token/create&#x60; is used to create a &#x60;payment_token&#x60;, which can then be used in Link initialization to enter a payment initiation flow. You can only use a &#x60;payment_token&#x60; once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentInitiationPaymentTokenCreateResponse</returns>
        [Obsolete]
        public PaymentInitiationPaymentTokenCreateResponse CreatePaymentToken(PaymentInitiationPaymentTokenCreateRequest paymentInitiationPaymentTokenCreateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PaymentInitiationPaymentTokenCreateResponse> localVarResponse = CreatePaymentTokenWithHttpInfo(paymentInitiationPaymentTokenCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create payment token The &#x60;/payment_initiation/payment/token/create&#x60; endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, &#x60;link_token&#x60;-based flow. The recommended flow is to provide the &#x60;payment_id&#x60; to &#x60;/link/token/create&#x60;, which returns a &#x60;link_token&#x60; used to initialize Link.  The &#x60;/payment_initiation/payment/token/create&#x60; is used to create a &#x60;payment_token&#x60;, which can then be used in Link initialization to enter a payment initiation flow. You can only use a &#x60;payment_token&#x60; once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentInitiationPaymentTokenCreateResponse</returns>
        [Obsolete]
        public Org.OpenAPITools.Client.ApiResponse<PaymentInitiationPaymentTokenCreateResponse> CreatePaymentTokenWithHttpInfo(PaymentInitiationPaymentTokenCreateRequest paymentInitiationPaymentTokenCreateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'paymentInitiationPaymentTokenCreateRequest' is set
            if (paymentInitiationPaymentTokenCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'paymentInitiationPaymentTokenCreateRequest' when calling PlaidApi->CreatePaymentToken");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = paymentInitiationPaymentTokenCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.CreatePaymentToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PaymentInitiationPaymentTokenCreateResponse>("/payment_initiation/payment/token/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePaymentToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create payment token The &#x60;/payment_initiation/payment/token/create&#x60; endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, &#x60;link_token&#x60;-based flow. The recommended flow is to provide the &#x60;payment_id&#x60; to &#x60;/link/token/create&#x60;, which returns a &#x60;link_token&#x60; used to initialize Link.  The &#x60;/payment_initiation/payment/token/create&#x60; is used to create a &#x60;payment_token&#x60;, which can then be used in Link initialization to enter a payment initiation flow. You can only use a &#x60;payment_token&#x60; once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentInitiationPaymentTokenCreateResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<PaymentInitiationPaymentTokenCreateResponse> CreatePaymentTokenAsync(PaymentInitiationPaymentTokenCreateRequest paymentInitiationPaymentTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PaymentInitiationPaymentTokenCreateResponse> localVarResponse = await CreatePaymentTokenWithHttpInfoAsync(paymentInitiationPaymentTokenCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create payment token The &#x60;/payment_initiation/payment/token/create&#x60; endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, &#x60;link_token&#x60;-based flow. The recommended flow is to provide the &#x60;payment_id&#x60; to &#x60;/link/token/create&#x60;, which returns a &#x60;link_token&#x60; used to initialize Link.  The &#x60;/payment_initiation/payment/token/create&#x60; is used to create a &#x60;payment_token&#x60;, which can then be used in Link initialization to enter a payment initiation flow. You can only use a &#x60;payment_token&#x60; once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentInitiationPaymentTokenCreateResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PaymentInitiationPaymentTokenCreateResponse>> CreatePaymentTokenWithHttpInfoAsync(PaymentInitiationPaymentTokenCreateRequest paymentInitiationPaymentTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'paymentInitiationPaymentTokenCreateRequest' is set
            if (paymentInitiationPaymentTokenCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'paymentInitiationPaymentTokenCreateRequest' when calling PlaidApi->CreatePaymentToken");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = paymentInitiationPaymentTokenCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.CreatePaymentToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PaymentInitiationPaymentTokenCreateResponse>("/payment_initiation/payment/token/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePaymentToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a deposit switch without using Plaid Exchange This endpoint provides an alternative to &#x60;/deposit_switch/create&#x60; for customers who have not yet fully integrated with Plaid Exchange. Like &#x60;/deposit_switch/create&#x60;, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositSwitchAltCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DepositSwitchAltCreateResponse</returns>
        public DepositSwitchAltCreateResponse DepositSwitchAltCreate(DepositSwitchAltCreateRequest depositSwitchAltCreateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<DepositSwitchAltCreateResponse> localVarResponse = DepositSwitchAltCreateWithHttpInfo(depositSwitchAltCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a deposit switch without using Plaid Exchange This endpoint provides an alternative to &#x60;/deposit_switch/create&#x60; for customers who have not yet fully integrated with Plaid Exchange. Like &#x60;/deposit_switch/create&#x60;, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositSwitchAltCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DepositSwitchAltCreateResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DepositSwitchAltCreateResponse> DepositSwitchAltCreateWithHttpInfo(DepositSwitchAltCreateRequest depositSwitchAltCreateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'depositSwitchAltCreateRequest' is set
            if (depositSwitchAltCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'depositSwitchAltCreateRequest' when calling PlaidApi->DepositSwitchAltCreate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = depositSwitchAltCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.DepositSwitchAltCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DepositSwitchAltCreateResponse>("/deposit_switch/alt/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DepositSwitchAltCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a deposit switch without using Plaid Exchange This endpoint provides an alternative to &#x60;/deposit_switch/create&#x60; for customers who have not yet fully integrated with Plaid Exchange. Like &#x60;/deposit_switch/create&#x60;, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositSwitchAltCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DepositSwitchAltCreateResponse</returns>
        public async System.Threading.Tasks.Task<DepositSwitchAltCreateResponse> DepositSwitchAltCreateAsync(DepositSwitchAltCreateRequest depositSwitchAltCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DepositSwitchAltCreateResponse> localVarResponse = await DepositSwitchAltCreateWithHttpInfoAsync(depositSwitchAltCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a deposit switch without using Plaid Exchange This endpoint provides an alternative to &#x60;/deposit_switch/create&#x60; for customers who have not yet fully integrated with Plaid Exchange. Like &#x60;/deposit_switch/create&#x60;, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositSwitchAltCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DepositSwitchAltCreateResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DepositSwitchAltCreateResponse>> DepositSwitchAltCreateWithHttpInfoAsync(DepositSwitchAltCreateRequest depositSwitchAltCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'depositSwitchAltCreateRequest' is set
            if (depositSwitchAltCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'depositSwitchAltCreateRequest' when calling PlaidApi->DepositSwitchAltCreate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = depositSwitchAltCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.DepositSwitchAltCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DepositSwitchAltCreateResponse>("/deposit_switch/alt/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DepositSwitchAltCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a deposit switch This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositSwitchCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DepositSwitchCreateResponse</returns>
        public DepositSwitchCreateResponse DepositSwitchCreate(DepositSwitchCreateRequest depositSwitchCreateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<DepositSwitchCreateResponse> localVarResponse = DepositSwitchCreateWithHttpInfo(depositSwitchCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a deposit switch This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositSwitchCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DepositSwitchCreateResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DepositSwitchCreateResponse> DepositSwitchCreateWithHttpInfo(DepositSwitchCreateRequest depositSwitchCreateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'depositSwitchCreateRequest' is set
            if (depositSwitchCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'depositSwitchCreateRequest' when calling PlaidApi->DepositSwitchCreate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = depositSwitchCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.DepositSwitchCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DepositSwitchCreateResponse>("/deposit_switch/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DepositSwitchCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a deposit switch This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositSwitchCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DepositSwitchCreateResponse</returns>
        public async System.Threading.Tasks.Task<DepositSwitchCreateResponse> DepositSwitchCreateAsync(DepositSwitchCreateRequest depositSwitchCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DepositSwitchCreateResponse> localVarResponse = await DepositSwitchCreateWithHttpInfoAsync(depositSwitchCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a deposit switch This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositSwitchCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DepositSwitchCreateResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DepositSwitchCreateResponse>> DepositSwitchCreateWithHttpInfoAsync(DepositSwitchCreateRequest depositSwitchCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'depositSwitchCreateRequest' is set
            if (depositSwitchCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'depositSwitchCreateRequest' when calling PlaidApi->DepositSwitchCreate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = depositSwitchCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.DepositSwitchCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DepositSwitchCreateResponse>("/deposit_switch/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DepositSwitchCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a deposit switch This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user&#39;s direct deposit allocation preferences.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositSwitchGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DepositSwitchGetResponse</returns>
        public DepositSwitchGetResponse DepositSwitchGet(DepositSwitchGetRequest depositSwitchGetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<DepositSwitchGetResponse> localVarResponse = DepositSwitchGetWithHttpInfo(depositSwitchGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a deposit switch This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user&#39;s direct deposit allocation preferences.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositSwitchGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DepositSwitchGetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DepositSwitchGetResponse> DepositSwitchGetWithHttpInfo(DepositSwitchGetRequest depositSwitchGetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'depositSwitchGetRequest' is set
            if (depositSwitchGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'depositSwitchGetRequest' when calling PlaidApi->DepositSwitchGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = depositSwitchGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.DepositSwitchGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DepositSwitchGetResponse>("/deposit_switch/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DepositSwitchGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a deposit switch This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user&#39;s direct deposit allocation preferences.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositSwitchGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DepositSwitchGetResponse</returns>
        public async System.Threading.Tasks.Task<DepositSwitchGetResponse> DepositSwitchGetAsync(DepositSwitchGetRequest depositSwitchGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DepositSwitchGetResponse> localVarResponse = await DepositSwitchGetWithHttpInfoAsync(depositSwitchGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a deposit switch This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user&#39;s direct deposit allocation preferences.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositSwitchGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DepositSwitchGetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DepositSwitchGetResponse>> DepositSwitchGetWithHttpInfoAsync(DepositSwitchGetRequest depositSwitchGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'depositSwitchGetRequest' is set
            if (depositSwitchGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'depositSwitchGetRequest' when calling PlaidApi->DepositSwitchGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = depositSwitchGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.DepositSwitchGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DepositSwitchGetResponse>("/deposit_switch/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DepositSwitchGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a deposit switch token In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositSwitchTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DepositSwitchTokenCreateResponse</returns>
        public DepositSwitchTokenCreateResponse DepositSwitchTokenCreate(DepositSwitchTokenCreateRequest depositSwitchTokenCreateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<DepositSwitchTokenCreateResponse> localVarResponse = DepositSwitchTokenCreateWithHttpInfo(depositSwitchTokenCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a deposit switch token In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositSwitchTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DepositSwitchTokenCreateResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DepositSwitchTokenCreateResponse> DepositSwitchTokenCreateWithHttpInfo(DepositSwitchTokenCreateRequest depositSwitchTokenCreateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'depositSwitchTokenCreateRequest' is set
            if (depositSwitchTokenCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'depositSwitchTokenCreateRequest' when calling PlaidApi->DepositSwitchTokenCreate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = depositSwitchTokenCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.DepositSwitchTokenCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DepositSwitchTokenCreateResponse>("/deposit_switch/token/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DepositSwitchTokenCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a deposit switch token In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositSwitchTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DepositSwitchTokenCreateResponse</returns>
        public async System.Threading.Tasks.Task<DepositSwitchTokenCreateResponse> DepositSwitchTokenCreateAsync(DepositSwitchTokenCreateRequest depositSwitchTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DepositSwitchTokenCreateResponse> localVarResponse = await DepositSwitchTokenCreateWithHttpInfoAsync(depositSwitchTokenCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a deposit switch token In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depositSwitchTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DepositSwitchTokenCreateResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DepositSwitchTokenCreateResponse>> DepositSwitchTokenCreateWithHttpInfoAsync(DepositSwitchTokenCreateRequest depositSwitchTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'depositSwitchTokenCreateRequest' is set
            if (depositSwitchTokenCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'depositSwitchTokenCreateRequest' when calling PlaidApi->DepositSwitchTokenCreate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = depositSwitchTokenCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.DepositSwitchTokenCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DepositSwitchTokenCreateResponse>("/deposit_switch/token/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DepositSwitchTokenCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search employer database &#x60;/employers/search&#x60; allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user&#39;s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employersSearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmployersSearchResponse</returns>
        public EmployersSearchResponse EmployersSearch(EmployersSearchRequest employersSearchRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<EmployersSearchResponse> localVarResponse = EmployersSearchWithHttpInfo(employersSearchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search employer database &#x60;/employers/search&#x60; allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user&#39;s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employersSearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmployersSearchResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<EmployersSearchResponse> EmployersSearchWithHttpInfo(EmployersSearchRequest employersSearchRequest, int operationIndex = 0)
        {
            // verify the required parameter 'employersSearchRequest' is set
            if (employersSearchRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'employersSearchRequest' when calling PlaidApi->EmployersSearch");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = employersSearchRequest;

            localVarRequestOptions.Operation = "PlaidApi.EmployersSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EmployersSearchResponse>("/employers/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmployersSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search employer database &#x60;/employers/search&#x60; allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user&#39;s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employersSearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmployersSearchResponse</returns>
        public async System.Threading.Tasks.Task<EmployersSearchResponse> EmployersSearchAsync(EmployersSearchRequest employersSearchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<EmployersSearchResponse> localVarResponse = await EmployersSearchWithHttpInfoAsync(employersSearchRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search employer database &#x60;/employers/search&#x60; allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user&#39;s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employersSearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmployersSearchResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<EmployersSearchResponse>> EmployersSearchWithHttpInfoAsync(EmployersSearchRequest employersSearchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'employersSearchRequest' is set
            if (employersSearchRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'employersSearchRequest' when calling PlaidApi->EmployersSearch");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = employersSearchRequest;

            localVarRequestOptions.Operation = "PlaidApi.EmployersSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EmployersSearchResponse>("/employers/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmployersSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a summary of an individual&#39;s employment information &#x60;/employment/verification/get&#x60; returns a list of employments through a user payroll that was verified by an end user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentVerificationGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmploymentVerificationGetResponse</returns>
        public EmploymentVerificationGetResponse EmploymentVerificationGet(EmploymentVerificationGetRequest employmentVerificationGetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<EmploymentVerificationGetResponse> localVarResponse = EmploymentVerificationGetWithHttpInfo(employmentVerificationGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a summary of an individual&#39;s employment information &#x60;/employment/verification/get&#x60; returns a list of employments through a user payroll that was verified by an end user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentVerificationGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmploymentVerificationGetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<EmploymentVerificationGetResponse> EmploymentVerificationGetWithHttpInfo(EmploymentVerificationGetRequest employmentVerificationGetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'employmentVerificationGetRequest' is set
            if (employmentVerificationGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'employmentVerificationGetRequest' when calling PlaidApi->EmploymentVerificationGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = employmentVerificationGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.EmploymentVerificationGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EmploymentVerificationGetResponse>("/employment/verification/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmploymentVerificationGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a summary of an individual&#39;s employment information &#x60;/employment/verification/get&#x60; returns a list of employments through a user payroll that was verified by an end user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentVerificationGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmploymentVerificationGetResponse</returns>
        public async System.Threading.Tasks.Task<EmploymentVerificationGetResponse> EmploymentVerificationGetAsync(EmploymentVerificationGetRequest employmentVerificationGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<EmploymentVerificationGetResponse> localVarResponse = await EmploymentVerificationGetWithHttpInfoAsync(employmentVerificationGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a summary of an individual&#39;s employment information &#x60;/employment/verification/get&#x60; returns a list of employments through a user payroll that was verified by an end user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentVerificationGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmploymentVerificationGetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<EmploymentVerificationGetResponse>> EmploymentVerificationGetWithHttpInfoAsync(EmploymentVerificationGetRequest employmentVerificationGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'employmentVerificationGetRequest' is set
            if (employmentVerificationGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'employmentVerificationGetRequest' when calling PlaidApi->EmploymentVerificationGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = employmentVerificationGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.EmploymentVerificationGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EmploymentVerificationGetResponse>("/employment/verification/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmploymentVerificationGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve identity data The &#x60;/identity/get&#x60; endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  Note: This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IdentityGetResponse</returns>
        public IdentityGetResponse IdentityGet(IdentityGetRequest identityGetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<IdentityGetResponse> localVarResponse = IdentityGetWithHttpInfo(identityGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve identity data The &#x60;/identity/get&#x60; endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  Note: This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IdentityGetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<IdentityGetResponse> IdentityGetWithHttpInfo(IdentityGetRequest identityGetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'identityGetRequest' is set
            if (identityGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'identityGetRequest' when calling PlaidApi->IdentityGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = identityGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.IdentityGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<IdentityGetResponse>("/identity/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentityGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve identity data The &#x60;/identity/get&#x60; endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  Note: This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdentityGetResponse</returns>
        public async System.Threading.Tasks.Task<IdentityGetResponse> IdentityGetAsync(IdentityGetRequest identityGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<IdentityGetResponse> localVarResponse = await IdentityGetWithHttpInfoAsync(identityGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve identity data The &#x60;/identity/get&#x60; endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  Note: This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdentityGetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<IdentityGetResponse>> IdentityGetWithHttpInfoAsync(IdentityGetRequest identityGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identityGetRequest' is set
            if (identityGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'identityGetRequest' when calling PlaidApi->IdentityGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = identityGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.IdentityGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IdentityGetResponse>("/identity/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentityGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// (Deprecated) Create an income verification instance &#x60;/income/verification/create&#x60; begins the income verification process by returning an &#x60;income_verification_id&#x60;. You can then provide the &#x60;income_verification_id&#x60; to &#x60;/link/token/create&#x60; under the &#x60;income_verification&#x60; parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an &#x60;INCOME&#x60; webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IncomeVerificationCreateResponse</returns>
        [Obsolete]
        public IncomeVerificationCreateResponse IncomeVerificationCreate(IncomeVerificationCreateRequest incomeVerificationCreateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<IncomeVerificationCreateResponse> localVarResponse = IncomeVerificationCreateWithHttpInfo(incomeVerificationCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// (Deprecated) Create an income verification instance &#x60;/income/verification/create&#x60; begins the income verification process by returning an &#x60;income_verification_id&#x60;. You can then provide the &#x60;income_verification_id&#x60; to &#x60;/link/token/create&#x60; under the &#x60;income_verification&#x60; parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an &#x60;INCOME&#x60; webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IncomeVerificationCreateResponse</returns>
        [Obsolete]
        public Org.OpenAPITools.Client.ApiResponse<IncomeVerificationCreateResponse> IncomeVerificationCreateWithHttpInfo(IncomeVerificationCreateRequest incomeVerificationCreateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'incomeVerificationCreateRequest' is set
            if (incomeVerificationCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'incomeVerificationCreateRequest' when calling PlaidApi->IncomeVerificationCreate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = incomeVerificationCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.IncomeVerificationCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<IncomeVerificationCreateResponse>("/income/verification/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IncomeVerificationCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// (Deprecated) Create an income verification instance &#x60;/income/verification/create&#x60; begins the income verification process by returning an &#x60;income_verification_id&#x60;. You can then provide the &#x60;income_verification_id&#x60; to &#x60;/link/token/create&#x60; under the &#x60;income_verification&#x60; parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an &#x60;INCOME&#x60; webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IncomeVerificationCreateResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<IncomeVerificationCreateResponse> IncomeVerificationCreateAsync(IncomeVerificationCreateRequest incomeVerificationCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<IncomeVerificationCreateResponse> localVarResponse = await IncomeVerificationCreateWithHttpInfoAsync(incomeVerificationCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// (Deprecated) Create an income verification instance &#x60;/income/verification/create&#x60; begins the income verification process by returning an &#x60;income_verification_id&#x60;. You can then provide the &#x60;income_verification_id&#x60; to &#x60;/link/token/create&#x60; under the &#x60;income_verification&#x60; parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an &#x60;INCOME&#x60; webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IncomeVerificationCreateResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<IncomeVerificationCreateResponse>> IncomeVerificationCreateWithHttpInfoAsync(IncomeVerificationCreateRequest incomeVerificationCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'incomeVerificationCreateRequest' is set
            if (incomeVerificationCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'incomeVerificationCreateRequest' when calling PlaidApi->IncomeVerificationCreate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = incomeVerificationCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.IncomeVerificationCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IncomeVerificationCreateResponse>("/income/verification/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IncomeVerificationCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download the original documents used for income verification &#x60;/income/verification/documents/download&#x60; provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to &#x60;/income/verification/documents/download&#x60; is a ZIP file in binary data. If a &#x60;document_id&#x60; is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The &#x60;request_id&#x60; is returned in the &#x60;Plaid-Request-ID&#x60; header.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationDocumentsDownloadRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream IncomeVerificationDocumentsDownload(IncomeVerificationDocumentsDownloadRequest incomeVerificationDocumentsDownloadRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = IncomeVerificationDocumentsDownloadWithHttpInfo(incomeVerificationDocumentsDownloadRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download the original documents used for income verification &#x60;/income/verification/documents/download&#x60; provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to &#x60;/income/verification/documents/download&#x60; is a ZIP file in binary data. If a &#x60;document_id&#x60; is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The &#x60;request_id&#x60; is returned in the &#x60;Plaid-Request-ID&#x60; header.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationDocumentsDownloadRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> IncomeVerificationDocumentsDownloadWithHttpInfo(IncomeVerificationDocumentsDownloadRequest incomeVerificationDocumentsDownloadRequest, int operationIndex = 0)
        {
            // verify the required parameter 'incomeVerificationDocumentsDownloadRequest' is set
            if (incomeVerificationDocumentsDownloadRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'incomeVerificationDocumentsDownloadRequest' when calling PlaidApi->IncomeVerificationDocumentsDownload");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/zip"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = incomeVerificationDocumentsDownloadRequest;

            localVarRequestOptions.Operation = "PlaidApi.IncomeVerificationDocumentsDownload";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<System.IO.Stream>("/income/verification/documents/download", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IncomeVerificationDocumentsDownload", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download the original documents used for income verification &#x60;/income/verification/documents/download&#x60; provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to &#x60;/income/verification/documents/download&#x60; is a ZIP file in binary data. If a &#x60;document_id&#x60; is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The &#x60;request_id&#x60; is returned in the &#x60;Plaid-Request-ID&#x60; header.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationDocumentsDownloadRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> IncomeVerificationDocumentsDownloadAsync(IncomeVerificationDocumentsDownloadRequest incomeVerificationDocumentsDownloadRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = await IncomeVerificationDocumentsDownloadWithHttpInfoAsync(incomeVerificationDocumentsDownloadRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download the original documents used for income verification &#x60;/income/verification/documents/download&#x60; provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to &#x60;/income/verification/documents/download&#x60; is a ZIP file in binary data. If a &#x60;document_id&#x60; is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The &#x60;request_id&#x60; is returned in the &#x60;Plaid-Request-ID&#x60; header.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationDocumentsDownloadRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<System.IO.Stream>> IncomeVerificationDocumentsDownloadWithHttpInfoAsync(IncomeVerificationDocumentsDownloadRequest incomeVerificationDocumentsDownloadRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'incomeVerificationDocumentsDownloadRequest' is set
            if (incomeVerificationDocumentsDownloadRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'incomeVerificationDocumentsDownloadRequest' when calling PlaidApi->IncomeVerificationDocumentsDownload");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/zip"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = incomeVerificationDocumentsDownloadRequest;

            localVarRequestOptions.Operation = "PlaidApi.IncomeVerificationDocumentsDownload";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<System.IO.Stream>("/income/verification/documents/download", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IncomeVerificationDocumentsDownload", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// (Deprecated) Retrieve information from a single paystub used for income verification /income/verification/paystub/get returns information from a single paystub used for income verification
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationPaystubGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IncomeVerificationPaystubGetResponse</returns>
        [Obsolete]
        public IncomeVerificationPaystubGetResponse IncomeVerificationPaystubGet(IncomeVerificationPaystubGetRequest incomeVerificationPaystubGetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<IncomeVerificationPaystubGetResponse> localVarResponse = IncomeVerificationPaystubGetWithHttpInfo(incomeVerificationPaystubGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// (Deprecated) Retrieve information from a single paystub used for income verification /income/verification/paystub/get returns information from a single paystub used for income verification
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationPaystubGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IncomeVerificationPaystubGetResponse</returns>
        [Obsolete]
        public Org.OpenAPITools.Client.ApiResponse<IncomeVerificationPaystubGetResponse> IncomeVerificationPaystubGetWithHttpInfo(IncomeVerificationPaystubGetRequest incomeVerificationPaystubGetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'incomeVerificationPaystubGetRequest' is set
            if (incomeVerificationPaystubGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'incomeVerificationPaystubGetRequest' when calling PlaidApi->IncomeVerificationPaystubGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = incomeVerificationPaystubGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.IncomeVerificationPaystubGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<IncomeVerificationPaystubGetResponse>("/income/verification/paystub/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IncomeVerificationPaystubGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// (Deprecated) Retrieve information from a single paystub used for income verification /income/verification/paystub/get returns information from a single paystub used for income verification
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationPaystubGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IncomeVerificationPaystubGetResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<IncomeVerificationPaystubGetResponse> IncomeVerificationPaystubGetAsync(IncomeVerificationPaystubGetRequest incomeVerificationPaystubGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<IncomeVerificationPaystubGetResponse> localVarResponse = await IncomeVerificationPaystubGetWithHttpInfoAsync(incomeVerificationPaystubGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// (Deprecated) Retrieve information from a single paystub used for income verification /income/verification/paystub/get returns information from a single paystub used for income verification
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationPaystubGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IncomeVerificationPaystubGetResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<IncomeVerificationPaystubGetResponse>> IncomeVerificationPaystubGetWithHttpInfoAsync(IncomeVerificationPaystubGetRequest incomeVerificationPaystubGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'incomeVerificationPaystubGetRequest' is set
            if (incomeVerificationPaystubGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'incomeVerificationPaystubGetRequest' when calling PlaidApi->IncomeVerificationPaystubGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = incomeVerificationPaystubGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.IncomeVerificationPaystubGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IncomeVerificationPaystubGetResponse>("/income/verification/paystub/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IncomeVerificationPaystubGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve information from the paystubs used for income verification &#x60;/income/verification/paystubs/get&#x60; returns the information collected from the paystubs that were used to verify an end user&#39;s income. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationPaystubsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IncomeVerificationPaystubsGetResponse</returns>
        public IncomeVerificationPaystubsGetResponse IncomeVerificationPaystubsGet(IncomeVerificationPaystubsGetRequest incomeVerificationPaystubsGetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<IncomeVerificationPaystubsGetResponse> localVarResponse = IncomeVerificationPaystubsGetWithHttpInfo(incomeVerificationPaystubsGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve information from the paystubs used for income verification &#x60;/income/verification/paystubs/get&#x60; returns the information collected from the paystubs that were used to verify an end user&#39;s income. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationPaystubsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IncomeVerificationPaystubsGetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<IncomeVerificationPaystubsGetResponse> IncomeVerificationPaystubsGetWithHttpInfo(IncomeVerificationPaystubsGetRequest incomeVerificationPaystubsGetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'incomeVerificationPaystubsGetRequest' is set
            if (incomeVerificationPaystubsGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'incomeVerificationPaystubsGetRequest' when calling PlaidApi->IncomeVerificationPaystubsGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = incomeVerificationPaystubsGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.IncomeVerificationPaystubsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<IncomeVerificationPaystubsGetResponse>("/income/verification/paystubs/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IncomeVerificationPaystubsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve information from the paystubs used for income verification &#x60;/income/verification/paystubs/get&#x60; returns the information collected from the paystubs that were used to verify an end user&#39;s income. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationPaystubsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IncomeVerificationPaystubsGetResponse</returns>
        public async System.Threading.Tasks.Task<IncomeVerificationPaystubsGetResponse> IncomeVerificationPaystubsGetAsync(IncomeVerificationPaystubsGetRequest incomeVerificationPaystubsGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<IncomeVerificationPaystubsGetResponse> localVarResponse = await IncomeVerificationPaystubsGetWithHttpInfoAsync(incomeVerificationPaystubsGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve information from the paystubs used for income verification &#x60;/income/verification/paystubs/get&#x60; returns the information collected from the paystubs that were used to verify an end user&#39;s income. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationPaystubsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IncomeVerificationPaystubsGetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<IncomeVerificationPaystubsGetResponse>> IncomeVerificationPaystubsGetWithHttpInfoAsync(IncomeVerificationPaystubsGetRequest incomeVerificationPaystubsGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'incomeVerificationPaystubsGetRequest' is set
            if (incomeVerificationPaystubsGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'incomeVerificationPaystubsGetRequest' when calling PlaidApi->IncomeVerificationPaystubsGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = incomeVerificationPaystubsGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.IncomeVerificationPaystubsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IncomeVerificationPaystubsGetResponse>("/income/verification/paystubs/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IncomeVerificationPaystubsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check digital income verification eligibility and optimize conversion &#x60;/income/verification/precheck&#x60; is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a &#x60;precheck_id&#x60; that can be provided to &#x60;/link/token/create&#x60;. If the user is eligible for digital verification, providing the &#x60;precheck_id&#x60; in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the &#x60;precheck_id&#x60; can still be provided to &#x60;/link/token/create&#x60; and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either &#x60;employer&#x60; or &#x60;transactions_access_tokens&#x60; data will increase the chance of receiving a useful result.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationPrecheckRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IncomeVerificationPrecheckResponse</returns>
        public IncomeVerificationPrecheckResponse IncomeVerificationPrecheck(IncomeVerificationPrecheckRequest incomeVerificationPrecheckRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<IncomeVerificationPrecheckResponse> localVarResponse = IncomeVerificationPrecheckWithHttpInfo(incomeVerificationPrecheckRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check digital income verification eligibility and optimize conversion &#x60;/income/verification/precheck&#x60; is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a &#x60;precheck_id&#x60; that can be provided to &#x60;/link/token/create&#x60;. If the user is eligible for digital verification, providing the &#x60;precheck_id&#x60; in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the &#x60;precheck_id&#x60; can still be provided to &#x60;/link/token/create&#x60; and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either &#x60;employer&#x60; or &#x60;transactions_access_tokens&#x60; data will increase the chance of receiving a useful result.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationPrecheckRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IncomeVerificationPrecheckResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<IncomeVerificationPrecheckResponse> IncomeVerificationPrecheckWithHttpInfo(IncomeVerificationPrecheckRequest incomeVerificationPrecheckRequest, int operationIndex = 0)
        {
            // verify the required parameter 'incomeVerificationPrecheckRequest' is set
            if (incomeVerificationPrecheckRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'incomeVerificationPrecheckRequest' when calling PlaidApi->IncomeVerificationPrecheck");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = incomeVerificationPrecheckRequest;

            localVarRequestOptions.Operation = "PlaidApi.IncomeVerificationPrecheck";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<IncomeVerificationPrecheckResponse>("/income/verification/precheck", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IncomeVerificationPrecheck", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check digital income verification eligibility and optimize conversion &#x60;/income/verification/precheck&#x60; is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a &#x60;precheck_id&#x60; that can be provided to &#x60;/link/token/create&#x60;. If the user is eligible for digital verification, providing the &#x60;precheck_id&#x60; in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the &#x60;precheck_id&#x60; can still be provided to &#x60;/link/token/create&#x60; and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either &#x60;employer&#x60; or &#x60;transactions_access_tokens&#x60; data will increase the chance of receiving a useful result.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationPrecheckRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IncomeVerificationPrecheckResponse</returns>
        public async System.Threading.Tasks.Task<IncomeVerificationPrecheckResponse> IncomeVerificationPrecheckAsync(IncomeVerificationPrecheckRequest incomeVerificationPrecheckRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<IncomeVerificationPrecheckResponse> localVarResponse = await IncomeVerificationPrecheckWithHttpInfoAsync(incomeVerificationPrecheckRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check digital income verification eligibility and optimize conversion &#x60;/income/verification/precheck&#x60; is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a &#x60;precheck_id&#x60; that can be provided to &#x60;/link/token/create&#x60;. If the user is eligible for digital verification, providing the &#x60;precheck_id&#x60; in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the &#x60;precheck_id&#x60; can still be provided to &#x60;/link/token/create&#x60; and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either &#x60;employer&#x60; or &#x60;transactions_access_tokens&#x60; data will increase the chance of receiving a useful result.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationPrecheckRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IncomeVerificationPrecheckResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<IncomeVerificationPrecheckResponse>> IncomeVerificationPrecheckWithHttpInfoAsync(IncomeVerificationPrecheckRequest incomeVerificationPrecheckRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'incomeVerificationPrecheckRequest' is set
            if (incomeVerificationPrecheckRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'incomeVerificationPrecheckRequest' when calling PlaidApi->IncomeVerificationPrecheck");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = incomeVerificationPrecheckRequest;

            localVarRequestOptions.Operation = "PlaidApi.IncomeVerificationPrecheck";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IncomeVerificationPrecheckResponse>("/income/verification/precheck", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IncomeVerificationPrecheck", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refresh an income verification &#x60;/income/verification/refresh&#x60; refreshes a given income verification.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationRefreshRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IncomeVerificationRefreshResponse</returns>
        public IncomeVerificationRefreshResponse IncomeVerificationRefresh(IncomeVerificationRefreshRequest incomeVerificationRefreshRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<IncomeVerificationRefreshResponse> localVarResponse = IncomeVerificationRefreshWithHttpInfo(incomeVerificationRefreshRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh an income verification &#x60;/income/verification/refresh&#x60; refreshes a given income verification.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationRefreshRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IncomeVerificationRefreshResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<IncomeVerificationRefreshResponse> IncomeVerificationRefreshWithHttpInfo(IncomeVerificationRefreshRequest incomeVerificationRefreshRequest, int operationIndex = 0)
        {
            // verify the required parameter 'incomeVerificationRefreshRequest' is set
            if (incomeVerificationRefreshRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'incomeVerificationRefreshRequest' when calling PlaidApi->IncomeVerificationRefresh");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = incomeVerificationRefreshRequest;

            localVarRequestOptions.Operation = "PlaidApi.IncomeVerificationRefresh";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<IncomeVerificationRefreshResponse>("/income/verification/refresh", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IncomeVerificationRefresh", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refresh an income verification &#x60;/income/verification/refresh&#x60; refreshes a given income verification.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationRefreshRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IncomeVerificationRefreshResponse</returns>
        public async System.Threading.Tasks.Task<IncomeVerificationRefreshResponse> IncomeVerificationRefreshAsync(IncomeVerificationRefreshRequest incomeVerificationRefreshRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<IncomeVerificationRefreshResponse> localVarResponse = await IncomeVerificationRefreshWithHttpInfoAsync(incomeVerificationRefreshRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh an income verification &#x60;/income/verification/refresh&#x60; refreshes a given income verification.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationRefreshRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IncomeVerificationRefreshResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<IncomeVerificationRefreshResponse>> IncomeVerificationRefreshWithHttpInfoAsync(IncomeVerificationRefreshRequest incomeVerificationRefreshRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'incomeVerificationRefreshRequest' is set
            if (incomeVerificationRefreshRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'incomeVerificationRefreshRequest' when calling PlaidApi->IncomeVerificationRefresh");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = incomeVerificationRefreshRequest;

            localVarRequestOptions.Operation = "PlaidApi.IncomeVerificationRefresh";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IncomeVerificationRefreshResponse>("/income/verification/refresh", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IncomeVerificationRefresh", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// (Deprecated) Retrieve a summary of information derived from income verification &#x60;/income/verification/summary/get&#x60; returns a verification summary for the income that was verified for an end user. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationSummaryGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IncomeVerificationSummaryGetResponse</returns>
        public IncomeVerificationSummaryGetResponse IncomeVerificationSummaryGet(IncomeVerificationSummaryGetRequest incomeVerificationSummaryGetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<IncomeVerificationSummaryGetResponse> localVarResponse = IncomeVerificationSummaryGetWithHttpInfo(incomeVerificationSummaryGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// (Deprecated) Retrieve a summary of information derived from income verification &#x60;/income/verification/summary/get&#x60; returns a verification summary for the income that was verified for an end user. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationSummaryGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IncomeVerificationSummaryGetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<IncomeVerificationSummaryGetResponse> IncomeVerificationSummaryGetWithHttpInfo(IncomeVerificationSummaryGetRequest incomeVerificationSummaryGetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'incomeVerificationSummaryGetRequest' is set
            if (incomeVerificationSummaryGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'incomeVerificationSummaryGetRequest' when calling PlaidApi->IncomeVerificationSummaryGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = incomeVerificationSummaryGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.IncomeVerificationSummaryGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<IncomeVerificationSummaryGetResponse>("/income/verification/summary/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IncomeVerificationSummaryGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// (Deprecated) Retrieve a summary of information derived from income verification &#x60;/income/verification/summary/get&#x60; returns a verification summary for the income that was verified for an end user. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationSummaryGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IncomeVerificationSummaryGetResponse</returns>
        public async System.Threading.Tasks.Task<IncomeVerificationSummaryGetResponse> IncomeVerificationSummaryGetAsync(IncomeVerificationSummaryGetRequest incomeVerificationSummaryGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<IncomeVerificationSummaryGetResponse> localVarResponse = await IncomeVerificationSummaryGetWithHttpInfoAsync(incomeVerificationSummaryGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// (Deprecated) Retrieve a summary of information derived from income verification &#x60;/income/verification/summary/get&#x60; returns a verification summary for the income that was verified for an end user. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="incomeVerificationSummaryGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IncomeVerificationSummaryGetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<IncomeVerificationSummaryGetResponse>> IncomeVerificationSummaryGetWithHttpInfoAsync(IncomeVerificationSummaryGetRequest incomeVerificationSummaryGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'incomeVerificationSummaryGetRequest' is set
            if (incomeVerificationSummaryGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'incomeVerificationSummaryGetRequest' when calling PlaidApi->IncomeVerificationSummaryGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = incomeVerificationSummaryGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.IncomeVerificationSummaryGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IncomeVerificationSummaryGetResponse>("/income/verification/summary/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IncomeVerificationSummaryGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve information from the tax documents used for income verification &#x60;/income/verification/taxforms/get&#x60; returns the information collected from forms that were used to verify an end user&#39;s income. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IncomeVerificationTaxformsGetResponse</returns>
        public IncomeVerificationTaxformsGetResponse IncomeVerificationTaxformsGet(Dictionary<string, Object> requestBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<IncomeVerificationTaxformsGetResponse> localVarResponse = IncomeVerificationTaxformsGetWithHttpInfo(requestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve information from the tax documents used for income verification &#x60;/income/verification/taxforms/get&#x60; returns the information collected from forms that were used to verify an end user&#39;s income. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IncomeVerificationTaxformsGetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<IncomeVerificationTaxformsGetResponse> IncomeVerificationTaxformsGetWithHttpInfo(Dictionary<string, Object> requestBody, int operationIndex = 0)
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestBody' when calling PlaidApi->IncomeVerificationTaxformsGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "PlaidApi.IncomeVerificationTaxformsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<IncomeVerificationTaxformsGetResponse>("/income/verification/taxforms/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IncomeVerificationTaxformsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve information from the tax documents used for income verification &#x60;/income/verification/taxforms/get&#x60; returns the information collected from forms that were used to verify an end user&#39;s income. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IncomeVerificationTaxformsGetResponse</returns>
        public async System.Threading.Tasks.Task<IncomeVerificationTaxformsGetResponse> IncomeVerificationTaxformsGetAsync(Dictionary<string, Object> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<IncomeVerificationTaxformsGetResponse> localVarResponse = await IncomeVerificationTaxformsGetWithHttpInfoAsync(requestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve information from the tax documents used for income verification &#x60;/income/verification/taxforms/get&#x60; returns the information collected from forms that were used to verify an end user&#39;s income. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IncomeVerificationTaxformsGetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<IncomeVerificationTaxformsGetResponse>> IncomeVerificationTaxformsGetWithHttpInfoAsync(Dictionary<string, Object> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestBody' when calling PlaidApi->IncomeVerificationTaxformsGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "PlaidApi.IncomeVerificationTaxformsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IncomeVerificationTaxformsGetResponse>("/income/verification/taxforms/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IncomeVerificationTaxformsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details of all supported institutions Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InstitutionsGetResponse</returns>
        public InstitutionsGetResponse InstitutionsGet(InstitutionsGetRequest institutionsGetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InstitutionsGetResponse> localVarResponse = InstitutionsGetWithHttpInfo(institutionsGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details of all supported institutions Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InstitutionsGetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<InstitutionsGetResponse> InstitutionsGetWithHttpInfo(InstitutionsGetRequest institutionsGetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'institutionsGetRequest' is set
            if (institutionsGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'institutionsGetRequest' when calling PlaidApi->InstitutionsGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = institutionsGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.InstitutionsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InstitutionsGetResponse>("/institutions/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InstitutionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details of all supported institutions Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InstitutionsGetResponse</returns>
        public async System.Threading.Tasks.Task<InstitutionsGetResponse> InstitutionsGetAsync(InstitutionsGetRequest institutionsGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InstitutionsGetResponse> localVarResponse = await InstitutionsGetWithHttpInfoAsync(institutionsGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details of all supported institutions Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InstitutionsGetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InstitutionsGetResponse>> InstitutionsGetWithHttpInfoAsync(InstitutionsGetRequest institutionsGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'institutionsGetRequest' is set
            if (institutionsGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'institutionsGetRequest' when calling PlaidApi->InstitutionsGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = institutionsGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.InstitutionsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InstitutionsGetResponse>("/institutions/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InstitutionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details of an institution Returns a JSON response containing details on a specified financial institution currently supported by Plaid.   Versioning note: API versions 2019-05-29 and earlier allow use of the &#x60;public_key&#x60; parameter instead of the &#x60;client_id&#x60; and &#x60;secret&#x60; to authenticate to this endpoint. The &#x60;public_key&#x60; has been deprecated; all customers are encouraged to use &#x60;client_id&#x60; and &#x60;secret&#x60; instead. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionsGetByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InstitutionsGetByIdResponse</returns>
        public InstitutionsGetByIdResponse InstitutionsGetById(InstitutionsGetByIdRequest institutionsGetByIdRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InstitutionsGetByIdResponse> localVarResponse = InstitutionsGetByIdWithHttpInfo(institutionsGetByIdRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details of an institution Returns a JSON response containing details on a specified financial institution currently supported by Plaid.   Versioning note: API versions 2019-05-29 and earlier allow use of the &#x60;public_key&#x60; parameter instead of the &#x60;client_id&#x60; and &#x60;secret&#x60; to authenticate to this endpoint. The &#x60;public_key&#x60; has been deprecated; all customers are encouraged to use &#x60;client_id&#x60; and &#x60;secret&#x60; instead. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionsGetByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InstitutionsGetByIdResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<InstitutionsGetByIdResponse> InstitutionsGetByIdWithHttpInfo(InstitutionsGetByIdRequest institutionsGetByIdRequest, int operationIndex = 0)
        {
            // verify the required parameter 'institutionsGetByIdRequest' is set
            if (institutionsGetByIdRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'institutionsGetByIdRequest' when calling PlaidApi->InstitutionsGetById");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = institutionsGetByIdRequest;

            localVarRequestOptions.Operation = "PlaidApi.InstitutionsGetById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InstitutionsGetByIdResponse>("/institutions/get_by_id", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InstitutionsGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details of an institution Returns a JSON response containing details on a specified financial institution currently supported by Plaid.   Versioning note: API versions 2019-05-29 and earlier allow use of the &#x60;public_key&#x60; parameter instead of the &#x60;client_id&#x60; and &#x60;secret&#x60; to authenticate to this endpoint. The &#x60;public_key&#x60; has been deprecated; all customers are encouraged to use &#x60;client_id&#x60; and &#x60;secret&#x60; instead. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionsGetByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InstitutionsGetByIdResponse</returns>
        public async System.Threading.Tasks.Task<InstitutionsGetByIdResponse> InstitutionsGetByIdAsync(InstitutionsGetByIdRequest institutionsGetByIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InstitutionsGetByIdResponse> localVarResponse = await InstitutionsGetByIdWithHttpInfoAsync(institutionsGetByIdRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details of an institution Returns a JSON response containing details on a specified financial institution currently supported by Plaid.   Versioning note: API versions 2019-05-29 and earlier allow use of the &#x60;public_key&#x60; parameter instead of the &#x60;client_id&#x60; and &#x60;secret&#x60; to authenticate to this endpoint. The &#x60;public_key&#x60; has been deprecated; all customers are encouraged to use &#x60;client_id&#x60; and &#x60;secret&#x60; instead. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionsGetByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InstitutionsGetByIdResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InstitutionsGetByIdResponse>> InstitutionsGetByIdWithHttpInfoAsync(InstitutionsGetByIdRequest institutionsGetByIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'institutionsGetByIdRequest' is set
            if (institutionsGetByIdRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'institutionsGetByIdRequest' when calling PlaidApi->InstitutionsGetById");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = institutionsGetByIdRequest;

            localVarRequestOptions.Operation = "PlaidApi.InstitutionsGetById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InstitutionsGetByIdResponse>("/institutions/get_by_id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InstitutionsGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search institutions Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the &#x60;public_key&#x60; parameter instead of the &#x60;client_id&#x60; and &#x60;secret&#x60; parameters to authenticate to this endpoint. The &#x60;public_key&#x60; parameter has since been deprecated; all customers are encouraged to use &#x60;client_id&#x60; and &#x60;secret&#x60; instead. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionsSearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InstitutionsSearchResponse</returns>
        public InstitutionsSearchResponse InstitutionsSearch(InstitutionsSearchRequest institutionsSearchRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InstitutionsSearchResponse> localVarResponse = InstitutionsSearchWithHttpInfo(institutionsSearchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search institutions Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the &#x60;public_key&#x60; parameter instead of the &#x60;client_id&#x60; and &#x60;secret&#x60; parameters to authenticate to this endpoint. The &#x60;public_key&#x60; parameter has since been deprecated; all customers are encouraged to use &#x60;client_id&#x60; and &#x60;secret&#x60; instead. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionsSearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InstitutionsSearchResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<InstitutionsSearchResponse> InstitutionsSearchWithHttpInfo(InstitutionsSearchRequest institutionsSearchRequest, int operationIndex = 0)
        {
            // verify the required parameter 'institutionsSearchRequest' is set
            if (institutionsSearchRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'institutionsSearchRequest' when calling PlaidApi->InstitutionsSearch");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = institutionsSearchRequest;

            localVarRequestOptions.Operation = "PlaidApi.InstitutionsSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InstitutionsSearchResponse>("/institutions/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InstitutionsSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search institutions Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the &#x60;public_key&#x60; parameter instead of the &#x60;client_id&#x60; and &#x60;secret&#x60; parameters to authenticate to this endpoint. The &#x60;public_key&#x60; parameter has since been deprecated; all customers are encouraged to use &#x60;client_id&#x60; and &#x60;secret&#x60; instead. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionsSearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InstitutionsSearchResponse</returns>
        public async System.Threading.Tasks.Task<InstitutionsSearchResponse> InstitutionsSearchAsync(InstitutionsSearchRequest institutionsSearchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InstitutionsSearchResponse> localVarResponse = await InstitutionsSearchWithHttpInfoAsync(institutionsSearchRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search institutions Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the &#x60;public_key&#x60; parameter instead of the &#x60;client_id&#x60; and &#x60;secret&#x60; parameters to authenticate to this endpoint. The &#x60;public_key&#x60; parameter has since been deprecated; all customers are encouraged to use &#x60;client_id&#x60; and &#x60;secret&#x60; instead. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionsSearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InstitutionsSearchResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InstitutionsSearchResponse>> InstitutionsSearchWithHttpInfoAsync(InstitutionsSearchRequest institutionsSearchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'institutionsSearchRequest' is set
            if (institutionsSearchRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'institutionsSearchRequest' when calling PlaidApi->InstitutionsSearch");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = institutionsSearchRequest;

            localVarRequestOptions.Operation = "PlaidApi.InstitutionsSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InstitutionsSearchResponse>("/institutions/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InstitutionsSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Investment holdings The &#x60;/investments/holdings/get&#x60; endpoint allows developers to receive user-authorized stock position data for &#x60;investment&#x60;-type accounts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investmentsHoldingsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InvestmentsHoldingsGetResponse</returns>
        public InvestmentsHoldingsGetResponse InvestmentsHoldingsGet(InvestmentsHoldingsGetRequest investmentsHoldingsGetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InvestmentsHoldingsGetResponse> localVarResponse = InvestmentsHoldingsGetWithHttpInfo(investmentsHoldingsGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Investment holdings The &#x60;/investments/holdings/get&#x60; endpoint allows developers to receive user-authorized stock position data for &#x60;investment&#x60;-type accounts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investmentsHoldingsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InvestmentsHoldingsGetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<InvestmentsHoldingsGetResponse> InvestmentsHoldingsGetWithHttpInfo(InvestmentsHoldingsGetRequest investmentsHoldingsGetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'investmentsHoldingsGetRequest' is set
            if (investmentsHoldingsGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'investmentsHoldingsGetRequest' when calling PlaidApi->InvestmentsHoldingsGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = investmentsHoldingsGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.InvestmentsHoldingsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InvestmentsHoldingsGetResponse>("/investments/holdings/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvestmentsHoldingsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Investment holdings The &#x60;/investments/holdings/get&#x60; endpoint allows developers to receive user-authorized stock position data for &#x60;investment&#x60;-type accounts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investmentsHoldingsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InvestmentsHoldingsGetResponse</returns>
        public async System.Threading.Tasks.Task<InvestmentsHoldingsGetResponse> InvestmentsHoldingsGetAsync(InvestmentsHoldingsGetRequest investmentsHoldingsGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InvestmentsHoldingsGetResponse> localVarResponse = await InvestmentsHoldingsGetWithHttpInfoAsync(investmentsHoldingsGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Investment holdings The &#x60;/investments/holdings/get&#x60; endpoint allows developers to receive user-authorized stock position data for &#x60;investment&#x60;-type accounts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investmentsHoldingsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InvestmentsHoldingsGetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InvestmentsHoldingsGetResponse>> InvestmentsHoldingsGetWithHttpInfoAsync(InvestmentsHoldingsGetRequest investmentsHoldingsGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'investmentsHoldingsGetRequest' is set
            if (investmentsHoldingsGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'investmentsHoldingsGetRequest' when calling PlaidApi->InvestmentsHoldingsGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = investmentsHoldingsGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.InvestmentsHoldingsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InvestmentsHoldingsGetResponse>("/investments/holdings/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvestmentsHoldingsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get investment transactions The &#x60;/investments/transactions/get&#x60; endpoint allows developers to retrieve user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the &#x60;total_investment_transactions&#x60; response body field to fetch all available investment transactions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investmentsTransactionsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InvestmentsTransactionsGetResponse</returns>
        public InvestmentsTransactionsGetResponse InvestmentsTransactionsGet(InvestmentsTransactionsGetRequest investmentsTransactionsGetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InvestmentsTransactionsGetResponse> localVarResponse = InvestmentsTransactionsGetWithHttpInfo(investmentsTransactionsGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get investment transactions The &#x60;/investments/transactions/get&#x60; endpoint allows developers to retrieve user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the &#x60;total_investment_transactions&#x60; response body field to fetch all available investment transactions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investmentsTransactionsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InvestmentsTransactionsGetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<InvestmentsTransactionsGetResponse> InvestmentsTransactionsGetWithHttpInfo(InvestmentsTransactionsGetRequest investmentsTransactionsGetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'investmentsTransactionsGetRequest' is set
            if (investmentsTransactionsGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'investmentsTransactionsGetRequest' when calling PlaidApi->InvestmentsTransactionsGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = investmentsTransactionsGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.InvestmentsTransactionsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InvestmentsTransactionsGetResponse>("/investments/transactions/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvestmentsTransactionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get investment transactions The &#x60;/investments/transactions/get&#x60; endpoint allows developers to retrieve user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the &#x60;total_investment_transactions&#x60; response body field to fetch all available investment transactions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investmentsTransactionsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InvestmentsTransactionsGetResponse</returns>
        public async System.Threading.Tasks.Task<InvestmentsTransactionsGetResponse> InvestmentsTransactionsGetAsync(InvestmentsTransactionsGetRequest investmentsTransactionsGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InvestmentsTransactionsGetResponse> localVarResponse = await InvestmentsTransactionsGetWithHttpInfoAsync(investmentsTransactionsGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get investment transactions The &#x60;/investments/transactions/get&#x60; endpoint allows developers to retrieve user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the &#x60;total_investment_transactions&#x60; response body field to fetch all available investment transactions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investmentsTransactionsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InvestmentsTransactionsGetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InvestmentsTransactionsGetResponse>> InvestmentsTransactionsGetWithHttpInfoAsync(InvestmentsTransactionsGetRequest investmentsTransactionsGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'investmentsTransactionsGetRequest' is set
            if (investmentsTransactionsGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'investmentsTransactionsGetRequest' when calling PlaidApi->InvestmentsTransactionsGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = investmentsTransactionsGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.InvestmentsTransactionsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InvestmentsTransactionsGetResponse>("/investments/transactions/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvestmentsTransactionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invalidate access_token By default, the &#x60;access_token&#x60; associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the &#x60;/item/access_token/invalidate&#x60; endpoint to rotate the &#x60;access_token&#x60; associated with an Item. The endpoint returns a new &#x60;access_token&#x60; and immediately invalidates the previous &#x60;access_token&#x60;. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemAccessTokenInvalidateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ItemAccessTokenInvalidateResponse</returns>
        public ItemAccessTokenInvalidateResponse ItemAccessTokenInvalidate(ItemAccessTokenInvalidateRequest itemAccessTokenInvalidateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ItemAccessTokenInvalidateResponse> localVarResponse = ItemAccessTokenInvalidateWithHttpInfo(itemAccessTokenInvalidateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Invalidate access_token By default, the &#x60;access_token&#x60; associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the &#x60;/item/access_token/invalidate&#x60; endpoint to rotate the &#x60;access_token&#x60; associated with an Item. The endpoint returns a new &#x60;access_token&#x60; and immediately invalidates the previous &#x60;access_token&#x60;. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemAccessTokenInvalidateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ItemAccessTokenInvalidateResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ItemAccessTokenInvalidateResponse> ItemAccessTokenInvalidateWithHttpInfo(ItemAccessTokenInvalidateRequest itemAccessTokenInvalidateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'itemAccessTokenInvalidateRequest' is set
            if (itemAccessTokenInvalidateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'itemAccessTokenInvalidateRequest' when calling PlaidApi->ItemAccessTokenInvalidate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = itemAccessTokenInvalidateRequest;

            localVarRequestOptions.Operation = "PlaidApi.ItemAccessTokenInvalidate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ItemAccessTokenInvalidateResponse>("/item/access_token/invalidate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ItemAccessTokenInvalidate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invalidate access_token By default, the &#x60;access_token&#x60; associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the &#x60;/item/access_token/invalidate&#x60; endpoint to rotate the &#x60;access_token&#x60; associated with an Item. The endpoint returns a new &#x60;access_token&#x60; and immediately invalidates the previous &#x60;access_token&#x60;. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemAccessTokenInvalidateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ItemAccessTokenInvalidateResponse</returns>
        public async System.Threading.Tasks.Task<ItemAccessTokenInvalidateResponse> ItemAccessTokenInvalidateAsync(ItemAccessTokenInvalidateRequest itemAccessTokenInvalidateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ItemAccessTokenInvalidateResponse> localVarResponse = await ItemAccessTokenInvalidateWithHttpInfoAsync(itemAccessTokenInvalidateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Invalidate access_token By default, the &#x60;access_token&#x60; associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the &#x60;/item/access_token/invalidate&#x60; endpoint to rotate the &#x60;access_token&#x60; associated with an Item. The endpoint returns a new &#x60;access_token&#x60; and immediately invalidates the previous &#x60;access_token&#x60;. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemAccessTokenInvalidateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ItemAccessTokenInvalidateResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ItemAccessTokenInvalidateResponse>> ItemAccessTokenInvalidateWithHttpInfoAsync(ItemAccessTokenInvalidateRequest itemAccessTokenInvalidateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'itemAccessTokenInvalidateRequest' is set
            if (itemAccessTokenInvalidateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'itemAccessTokenInvalidateRequest' when calling PlaidApi->ItemAccessTokenInvalidate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = itemAccessTokenInvalidateRequest;

            localVarRequestOptions.Operation = "PlaidApi.ItemAccessTokenInvalidate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ItemAccessTokenInvalidateResponse>("/item/access_token/invalidate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ItemAccessTokenInvalidate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List a user’s connected applications List a user’s connected applications
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemApplicationListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ItemApplicationListResponse</returns>
        public ItemApplicationListResponse ItemApplicationList(ItemApplicationListRequest itemApplicationListRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ItemApplicationListResponse> localVarResponse = ItemApplicationListWithHttpInfo(itemApplicationListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List a user’s connected applications List a user’s connected applications
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemApplicationListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ItemApplicationListResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ItemApplicationListResponse> ItemApplicationListWithHttpInfo(ItemApplicationListRequest itemApplicationListRequest, int operationIndex = 0)
        {
            // verify the required parameter 'itemApplicationListRequest' is set
            if (itemApplicationListRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'itemApplicationListRequest' when calling PlaidApi->ItemApplicationList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = itemApplicationListRequest;

            localVarRequestOptions.Operation = "PlaidApi.ItemApplicationList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ItemApplicationListResponse>("/item/application/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ItemApplicationList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List a user’s connected applications List a user’s connected applications
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemApplicationListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ItemApplicationListResponse</returns>
        public async System.Threading.Tasks.Task<ItemApplicationListResponse> ItemApplicationListAsync(ItemApplicationListRequest itemApplicationListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ItemApplicationListResponse> localVarResponse = await ItemApplicationListWithHttpInfoAsync(itemApplicationListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List a user’s connected applications List a user’s connected applications
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemApplicationListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ItemApplicationListResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ItemApplicationListResponse>> ItemApplicationListWithHttpInfoAsync(ItemApplicationListRequest itemApplicationListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'itemApplicationListRequest' is set
            if (itemApplicationListRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'itemApplicationListRequest' when calling PlaidApi->ItemApplicationList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = itemApplicationListRequest;

            localVarRequestOptions.Operation = "PlaidApi.ItemApplicationList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ItemApplicationListResponse>("/item/application/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ItemApplicationList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the scopes of access for a particular application Enable consumers to update product access on selected accounts for an application.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemApplicationScopesUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ItemApplicationScopesUpdateResponse</returns>
        public ItemApplicationScopesUpdateResponse ItemApplicationScopesUpdate(ItemApplicationScopesUpdateRequest itemApplicationScopesUpdateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ItemApplicationScopesUpdateResponse> localVarResponse = ItemApplicationScopesUpdateWithHttpInfo(itemApplicationScopesUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the scopes of access for a particular application Enable consumers to update product access on selected accounts for an application.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemApplicationScopesUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ItemApplicationScopesUpdateResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ItemApplicationScopesUpdateResponse> ItemApplicationScopesUpdateWithHttpInfo(ItemApplicationScopesUpdateRequest itemApplicationScopesUpdateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'itemApplicationScopesUpdateRequest' is set
            if (itemApplicationScopesUpdateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'itemApplicationScopesUpdateRequest' when calling PlaidApi->ItemApplicationScopesUpdate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = itemApplicationScopesUpdateRequest;

            localVarRequestOptions.Operation = "PlaidApi.ItemApplicationScopesUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ItemApplicationScopesUpdateResponse>("/item/application/scopes/update", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ItemApplicationScopesUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the scopes of access for a particular application Enable consumers to update product access on selected accounts for an application.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemApplicationScopesUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ItemApplicationScopesUpdateResponse</returns>
        public async System.Threading.Tasks.Task<ItemApplicationScopesUpdateResponse> ItemApplicationScopesUpdateAsync(ItemApplicationScopesUpdateRequest itemApplicationScopesUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ItemApplicationScopesUpdateResponse> localVarResponse = await ItemApplicationScopesUpdateWithHttpInfoAsync(itemApplicationScopesUpdateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the scopes of access for a particular application Enable consumers to update product access on selected accounts for an application.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemApplicationScopesUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ItemApplicationScopesUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ItemApplicationScopesUpdateResponse>> ItemApplicationScopesUpdateWithHttpInfoAsync(ItemApplicationScopesUpdateRequest itemApplicationScopesUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'itemApplicationScopesUpdateRequest' is set
            if (itemApplicationScopesUpdateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'itemApplicationScopesUpdateRequest' when calling PlaidApi->ItemApplicationScopesUpdate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = itemApplicationScopesUpdateRequest;

            localVarRequestOptions.Operation = "PlaidApi.ItemApplicationScopesUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ItemApplicationScopesUpdateResponse>("/item/application/scopes/update", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ItemApplicationScopesUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create public token Note: As of July 2020, the &#x60;/item/public_token/create&#x60; endpoint is deprecated. Instead, use &#x60;/link/token/create&#x60; with an &#x60;access_token&#x60; to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the &#x60;/item/public_token/create&#x60; endpoint and then initialize Link with that &#x60;public_token&#x60;.  A &#x60;public_token&#x60; is one-time use and expires after 30 minutes. You use a &#x60;public_token&#x60; to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a &#x60;public_token&#x60; for an Item even if you did not use Link to create the Item originally.  The &#x60;/item/public_token/create&#x60; endpoint is **not** used to create your initial &#x60;public_token&#x60;. If you have not already received an &#x60;access_token&#x60; for a specific Item, use Link to obtain your &#x60;public_token&#x60; instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemPublicTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ItemPublicTokenCreateResponse</returns>
        public ItemPublicTokenCreateResponse ItemCreatePublicToken(ItemPublicTokenCreateRequest itemPublicTokenCreateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ItemPublicTokenCreateResponse> localVarResponse = ItemCreatePublicTokenWithHttpInfo(itemPublicTokenCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create public token Note: As of July 2020, the &#x60;/item/public_token/create&#x60; endpoint is deprecated. Instead, use &#x60;/link/token/create&#x60; with an &#x60;access_token&#x60; to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the &#x60;/item/public_token/create&#x60; endpoint and then initialize Link with that &#x60;public_token&#x60;.  A &#x60;public_token&#x60; is one-time use and expires after 30 minutes. You use a &#x60;public_token&#x60; to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a &#x60;public_token&#x60; for an Item even if you did not use Link to create the Item originally.  The &#x60;/item/public_token/create&#x60; endpoint is **not** used to create your initial &#x60;public_token&#x60;. If you have not already received an &#x60;access_token&#x60; for a specific Item, use Link to obtain your &#x60;public_token&#x60; instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemPublicTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ItemPublicTokenCreateResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ItemPublicTokenCreateResponse> ItemCreatePublicTokenWithHttpInfo(ItemPublicTokenCreateRequest itemPublicTokenCreateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'itemPublicTokenCreateRequest' is set
            if (itemPublicTokenCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'itemPublicTokenCreateRequest' when calling PlaidApi->ItemCreatePublicToken");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = itemPublicTokenCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.ItemCreatePublicToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ItemPublicTokenCreateResponse>("/item/public_token/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ItemCreatePublicToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create public token Note: As of July 2020, the &#x60;/item/public_token/create&#x60; endpoint is deprecated. Instead, use &#x60;/link/token/create&#x60; with an &#x60;access_token&#x60; to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the &#x60;/item/public_token/create&#x60; endpoint and then initialize Link with that &#x60;public_token&#x60;.  A &#x60;public_token&#x60; is one-time use and expires after 30 minutes. You use a &#x60;public_token&#x60; to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a &#x60;public_token&#x60; for an Item even if you did not use Link to create the Item originally.  The &#x60;/item/public_token/create&#x60; endpoint is **not** used to create your initial &#x60;public_token&#x60;. If you have not already received an &#x60;access_token&#x60; for a specific Item, use Link to obtain your &#x60;public_token&#x60; instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemPublicTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ItemPublicTokenCreateResponse</returns>
        public async System.Threading.Tasks.Task<ItemPublicTokenCreateResponse> ItemCreatePublicTokenAsync(ItemPublicTokenCreateRequest itemPublicTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ItemPublicTokenCreateResponse> localVarResponse = await ItemCreatePublicTokenWithHttpInfoAsync(itemPublicTokenCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create public token Note: As of July 2020, the &#x60;/item/public_token/create&#x60; endpoint is deprecated. Instead, use &#x60;/link/token/create&#x60; with an &#x60;access_token&#x60; to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the &#x60;/item/public_token/create&#x60; endpoint and then initialize Link with that &#x60;public_token&#x60;.  A &#x60;public_token&#x60; is one-time use and expires after 30 minutes. You use a &#x60;public_token&#x60; to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a &#x60;public_token&#x60; for an Item even if you did not use Link to create the Item originally.  The &#x60;/item/public_token/create&#x60; endpoint is **not** used to create your initial &#x60;public_token&#x60;. If you have not already received an &#x60;access_token&#x60; for a specific Item, use Link to obtain your &#x60;public_token&#x60; instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemPublicTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ItemPublicTokenCreateResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ItemPublicTokenCreateResponse>> ItemCreatePublicTokenWithHttpInfoAsync(ItemPublicTokenCreateRequest itemPublicTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'itemPublicTokenCreateRequest' is set
            if (itemPublicTokenCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'itemPublicTokenCreateRequest' when calling PlaidApi->ItemCreatePublicToken");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = itemPublicTokenCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.ItemCreatePublicToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ItemPublicTokenCreateResponse>("/item/public_token/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ItemCreatePublicToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Item Returns information about the status of an Item.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ItemGetResponse</returns>
        public ItemGetResponse ItemGet(ItemGetRequest itemGetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ItemGetResponse> localVarResponse = ItemGetWithHttpInfo(itemGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Item Returns information about the status of an Item.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ItemGetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ItemGetResponse> ItemGetWithHttpInfo(ItemGetRequest itemGetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'itemGetRequest' is set
            if (itemGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'itemGetRequest' when calling PlaidApi->ItemGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = itemGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.ItemGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ItemGetResponse>("/item/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ItemGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Item Returns information about the status of an Item.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ItemGetResponse</returns>
        public async System.Threading.Tasks.Task<ItemGetResponse> ItemGetAsync(ItemGetRequest itemGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ItemGetResponse> localVarResponse = await ItemGetWithHttpInfoAsync(itemGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Item Returns information about the status of an Item.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ItemGetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ItemGetResponse>> ItemGetWithHttpInfoAsync(ItemGetRequest itemGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'itemGetRequest' is set
            if (itemGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'itemGetRequest' when calling PlaidApi->ItemGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = itemGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.ItemGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ItemGetResponse>("/item/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ItemGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import Item &#x60;/item/import&#x60; creates an Item via your Plaid Exchange Integration and returns an &#x60;access_token&#x60;. As part of an &#x60;/item/import&#x60; request, you will include a User ID (&#x60;user_auth.user_id&#x60;) and Authentication Token (&#x60;user_auth.auth_token&#x60;) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via &#x60;/item/import&#x60;, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated. This will automatically generate the Plaid native account ID for the account the user will switch their direct deposit to (&#x60;target_account_id&#x60;).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemImportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ItemImportResponse</returns>
        public ItemImportResponse ItemImport(ItemImportRequest itemImportRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ItemImportResponse> localVarResponse = ItemImportWithHttpInfo(itemImportRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import Item &#x60;/item/import&#x60; creates an Item via your Plaid Exchange Integration and returns an &#x60;access_token&#x60;. As part of an &#x60;/item/import&#x60; request, you will include a User ID (&#x60;user_auth.user_id&#x60;) and Authentication Token (&#x60;user_auth.auth_token&#x60;) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via &#x60;/item/import&#x60;, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated. This will automatically generate the Plaid native account ID for the account the user will switch their direct deposit to (&#x60;target_account_id&#x60;).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemImportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ItemImportResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ItemImportResponse> ItemImportWithHttpInfo(ItemImportRequest itemImportRequest, int operationIndex = 0)
        {
            // verify the required parameter 'itemImportRequest' is set
            if (itemImportRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'itemImportRequest' when calling PlaidApi->ItemImport");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = itemImportRequest;

            localVarRequestOptions.Operation = "PlaidApi.ItemImport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ItemImportResponse>("/item/import", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ItemImport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import Item &#x60;/item/import&#x60; creates an Item via your Plaid Exchange Integration and returns an &#x60;access_token&#x60;. As part of an &#x60;/item/import&#x60; request, you will include a User ID (&#x60;user_auth.user_id&#x60;) and Authentication Token (&#x60;user_auth.auth_token&#x60;) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via &#x60;/item/import&#x60;, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated. This will automatically generate the Plaid native account ID for the account the user will switch their direct deposit to (&#x60;target_account_id&#x60;).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemImportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ItemImportResponse</returns>
        public async System.Threading.Tasks.Task<ItemImportResponse> ItemImportAsync(ItemImportRequest itemImportRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ItemImportResponse> localVarResponse = await ItemImportWithHttpInfoAsync(itemImportRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import Item &#x60;/item/import&#x60; creates an Item via your Plaid Exchange Integration and returns an &#x60;access_token&#x60;. As part of an &#x60;/item/import&#x60; request, you will include a User ID (&#x60;user_auth.user_id&#x60;) and Authentication Token (&#x60;user_auth.auth_token&#x60;) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via &#x60;/item/import&#x60;, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated. This will automatically generate the Plaid native account ID for the account the user will switch their direct deposit to (&#x60;target_account_id&#x60;).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemImportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ItemImportResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ItemImportResponse>> ItemImportWithHttpInfoAsync(ItemImportRequest itemImportRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'itemImportRequest' is set
            if (itemImportRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'itemImportRequest' when calling PlaidApi->ItemImport");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = itemImportRequest;

            localVarRequestOptions.Operation = "PlaidApi.ItemImport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ItemImportResponse>("/item/import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ItemImport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Exchange public token for an access token Exchange a Link &#x60;public_token&#x60; for an API &#x60;access_token&#x60;. Link hands off the &#x60;public_token&#x60; client-side via the &#x60;onSuccess&#x60; callback once a user has successfully created an Item. The &#x60;public_token&#x60; is ephemeral and expires after 30 minutes.  The response also includes an &#x60;item_id&#x60; that should be stored with the &#x60;access_token&#x60;. The &#x60;item_id&#x60; is used to identify an Item in a webhook. The &#x60;item_id&#x60; can also be retrieved by making an &#x60;/item/get&#x60; request.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemPublicTokenExchangeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ItemPublicTokenExchangeResponse</returns>
        public ItemPublicTokenExchangeResponse ItemPublicTokenExchange(ItemPublicTokenExchangeRequest itemPublicTokenExchangeRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ItemPublicTokenExchangeResponse> localVarResponse = ItemPublicTokenExchangeWithHttpInfo(itemPublicTokenExchangeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Exchange public token for an access token Exchange a Link &#x60;public_token&#x60; for an API &#x60;access_token&#x60;. Link hands off the &#x60;public_token&#x60; client-side via the &#x60;onSuccess&#x60; callback once a user has successfully created an Item. The &#x60;public_token&#x60; is ephemeral and expires after 30 minutes.  The response also includes an &#x60;item_id&#x60; that should be stored with the &#x60;access_token&#x60;. The &#x60;item_id&#x60; is used to identify an Item in a webhook. The &#x60;item_id&#x60; can also be retrieved by making an &#x60;/item/get&#x60; request.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemPublicTokenExchangeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ItemPublicTokenExchangeResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ItemPublicTokenExchangeResponse> ItemPublicTokenExchangeWithHttpInfo(ItemPublicTokenExchangeRequest itemPublicTokenExchangeRequest, int operationIndex = 0)
        {
            // verify the required parameter 'itemPublicTokenExchangeRequest' is set
            if (itemPublicTokenExchangeRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'itemPublicTokenExchangeRequest' when calling PlaidApi->ItemPublicTokenExchange");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = itemPublicTokenExchangeRequest;

            localVarRequestOptions.Operation = "PlaidApi.ItemPublicTokenExchange";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ItemPublicTokenExchangeResponse>("/item/public_token/exchange", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ItemPublicTokenExchange", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Exchange public token for an access token Exchange a Link &#x60;public_token&#x60; for an API &#x60;access_token&#x60;. Link hands off the &#x60;public_token&#x60; client-side via the &#x60;onSuccess&#x60; callback once a user has successfully created an Item. The &#x60;public_token&#x60; is ephemeral and expires after 30 minutes.  The response also includes an &#x60;item_id&#x60; that should be stored with the &#x60;access_token&#x60;. The &#x60;item_id&#x60; is used to identify an Item in a webhook. The &#x60;item_id&#x60; can also be retrieved by making an &#x60;/item/get&#x60; request.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemPublicTokenExchangeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ItemPublicTokenExchangeResponse</returns>
        public async System.Threading.Tasks.Task<ItemPublicTokenExchangeResponse> ItemPublicTokenExchangeAsync(ItemPublicTokenExchangeRequest itemPublicTokenExchangeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ItemPublicTokenExchangeResponse> localVarResponse = await ItemPublicTokenExchangeWithHttpInfoAsync(itemPublicTokenExchangeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Exchange public token for an access token Exchange a Link &#x60;public_token&#x60; for an API &#x60;access_token&#x60;. Link hands off the &#x60;public_token&#x60; client-side via the &#x60;onSuccess&#x60; callback once a user has successfully created an Item. The &#x60;public_token&#x60; is ephemeral and expires after 30 minutes.  The response also includes an &#x60;item_id&#x60; that should be stored with the &#x60;access_token&#x60;. The &#x60;item_id&#x60; is used to identify an Item in a webhook. The &#x60;item_id&#x60; can also be retrieved by making an &#x60;/item/get&#x60; request.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemPublicTokenExchangeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ItemPublicTokenExchangeResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ItemPublicTokenExchangeResponse>> ItemPublicTokenExchangeWithHttpInfoAsync(ItemPublicTokenExchangeRequest itemPublicTokenExchangeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'itemPublicTokenExchangeRequest' is set
            if (itemPublicTokenExchangeRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'itemPublicTokenExchangeRequest' when calling PlaidApi->ItemPublicTokenExchange");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = itemPublicTokenExchangeRequest;

            localVarRequestOptions.Operation = "PlaidApi.ItemPublicTokenExchange";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ItemPublicTokenExchangeResponse>("/item/public_token/exchange", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ItemPublicTokenExchange", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an Item The &#x60;/item/remove&#x60;  endpoint allows you to remove an Item. Once removed, the &#x60;access_token&#x60;  associated with the Item is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an &#x60;/item/remove&#x60;  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via &#x60;/item/remove&#x60; may still show as an active connection in the institution&#39;s OAuth permission manager.  API versions 2019-05-29 and earlier return a &#x60;removed&#x60; boolean as part of the response.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemRemoveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ItemRemoveResponse</returns>
        public ItemRemoveResponse ItemRemove(ItemRemoveRequest itemRemoveRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ItemRemoveResponse> localVarResponse = ItemRemoveWithHttpInfo(itemRemoveRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove an Item The &#x60;/item/remove&#x60;  endpoint allows you to remove an Item. Once removed, the &#x60;access_token&#x60;  associated with the Item is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an &#x60;/item/remove&#x60;  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via &#x60;/item/remove&#x60; may still show as an active connection in the institution&#39;s OAuth permission manager.  API versions 2019-05-29 and earlier return a &#x60;removed&#x60; boolean as part of the response.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemRemoveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ItemRemoveResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ItemRemoveResponse> ItemRemoveWithHttpInfo(ItemRemoveRequest itemRemoveRequest, int operationIndex = 0)
        {
            // verify the required parameter 'itemRemoveRequest' is set
            if (itemRemoveRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'itemRemoveRequest' when calling PlaidApi->ItemRemove");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = itemRemoveRequest;

            localVarRequestOptions.Operation = "PlaidApi.ItemRemove";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ItemRemoveResponse>("/item/remove", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ItemRemove", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an Item The &#x60;/item/remove&#x60;  endpoint allows you to remove an Item. Once removed, the &#x60;access_token&#x60;  associated with the Item is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an &#x60;/item/remove&#x60;  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via &#x60;/item/remove&#x60; may still show as an active connection in the institution&#39;s OAuth permission manager.  API versions 2019-05-29 and earlier return a &#x60;removed&#x60; boolean as part of the response.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemRemoveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ItemRemoveResponse</returns>
        public async System.Threading.Tasks.Task<ItemRemoveResponse> ItemRemoveAsync(ItemRemoveRequest itemRemoveRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ItemRemoveResponse> localVarResponse = await ItemRemoveWithHttpInfoAsync(itemRemoveRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove an Item The &#x60;/item/remove&#x60;  endpoint allows you to remove an Item. Once removed, the &#x60;access_token&#x60;  associated with the Item is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an &#x60;/item/remove&#x60;  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via &#x60;/item/remove&#x60; may still show as an active connection in the institution&#39;s OAuth permission manager.  API versions 2019-05-29 and earlier return a &#x60;removed&#x60; boolean as part of the response.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemRemoveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ItemRemoveResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ItemRemoveResponse>> ItemRemoveWithHttpInfoAsync(ItemRemoveRequest itemRemoveRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'itemRemoveRequest' is set
            if (itemRemoveRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'itemRemoveRequest' when calling PlaidApi->ItemRemove");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = itemRemoveRequest;

            localVarRequestOptions.Operation = "PlaidApi.ItemRemove";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ItemRemoveResponse>("/item/remove", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ItemRemove", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Webhook URL The POST &#x60;/item/webhook/update&#x60; allows you to update the webhook URL associated with an Item. This request triggers a [&#x60;WEBHOOK_UPDATE_ACKNOWLEDGED&#x60;](https://plaid.com/docs/api/webhooks/#item-webhook-update-acknowledged) webhook to the newly specified webhook URL.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemWebhookUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ItemWebhookUpdateResponse</returns>
        public ItemWebhookUpdateResponse ItemWebhookUpdate(ItemWebhookUpdateRequest itemWebhookUpdateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ItemWebhookUpdateResponse> localVarResponse = ItemWebhookUpdateWithHttpInfo(itemWebhookUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Webhook URL The POST &#x60;/item/webhook/update&#x60; allows you to update the webhook URL associated with an Item. This request triggers a [&#x60;WEBHOOK_UPDATE_ACKNOWLEDGED&#x60;](https://plaid.com/docs/api/webhooks/#item-webhook-update-acknowledged) webhook to the newly specified webhook URL.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemWebhookUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ItemWebhookUpdateResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ItemWebhookUpdateResponse> ItemWebhookUpdateWithHttpInfo(ItemWebhookUpdateRequest itemWebhookUpdateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'itemWebhookUpdateRequest' is set
            if (itemWebhookUpdateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'itemWebhookUpdateRequest' when calling PlaidApi->ItemWebhookUpdate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = itemWebhookUpdateRequest;

            localVarRequestOptions.Operation = "PlaidApi.ItemWebhookUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ItemWebhookUpdateResponse>("/item/webhook/update", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ItemWebhookUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Webhook URL The POST &#x60;/item/webhook/update&#x60; allows you to update the webhook URL associated with an Item. This request triggers a [&#x60;WEBHOOK_UPDATE_ACKNOWLEDGED&#x60;](https://plaid.com/docs/api/webhooks/#item-webhook-update-acknowledged) webhook to the newly specified webhook URL.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemWebhookUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ItemWebhookUpdateResponse</returns>
        public async System.Threading.Tasks.Task<ItemWebhookUpdateResponse> ItemWebhookUpdateAsync(ItemWebhookUpdateRequest itemWebhookUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ItemWebhookUpdateResponse> localVarResponse = await ItemWebhookUpdateWithHttpInfoAsync(itemWebhookUpdateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Webhook URL The POST &#x60;/item/webhook/update&#x60; allows you to update the webhook URL associated with an Item. This request triggers a [&#x60;WEBHOOK_UPDATE_ACKNOWLEDGED&#x60;](https://plaid.com/docs/api/webhooks/#item-webhook-update-acknowledged) webhook to the newly specified webhook URL.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemWebhookUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ItemWebhookUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ItemWebhookUpdateResponse>> ItemWebhookUpdateWithHttpInfoAsync(ItemWebhookUpdateRequest itemWebhookUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'itemWebhookUpdateRequest' is set
            if (itemWebhookUpdateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'itemWebhookUpdateRequest' when calling PlaidApi->ItemWebhookUpdate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = itemWebhookUpdateRequest;

            localVarRequestOptions.Operation = "PlaidApi.ItemWebhookUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ItemWebhookUpdateResponse>("/item/webhook/update", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ItemWebhookUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Liabilities data The &#x60;/liabilities/get&#x60; endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type &#x60;credit&#x60; with account subtype &#x60;credit card&#x60; or &#x60;paypal&#x60;, and account type &#x60;loan&#x60; with account subtype &#x60;student&#x60; or &#x60;mortgage&#x60;. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the &#x60;account_filters&#x60; parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling &#x60;/liabilities/get&#x60;.  Note: This request may take some time to complete if &#x60;liabilities&#x60; was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liabilitiesGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LiabilitiesGetResponse</returns>
        public LiabilitiesGetResponse LiabilitiesGet(LiabilitiesGetRequest liabilitiesGetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<LiabilitiesGetResponse> localVarResponse = LiabilitiesGetWithHttpInfo(liabilitiesGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Liabilities data The &#x60;/liabilities/get&#x60; endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type &#x60;credit&#x60; with account subtype &#x60;credit card&#x60; or &#x60;paypal&#x60;, and account type &#x60;loan&#x60; with account subtype &#x60;student&#x60; or &#x60;mortgage&#x60;. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the &#x60;account_filters&#x60; parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling &#x60;/liabilities/get&#x60;.  Note: This request may take some time to complete if &#x60;liabilities&#x60; was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liabilitiesGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LiabilitiesGetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<LiabilitiesGetResponse> LiabilitiesGetWithHttpInfo(LiabilitiesGetRequest liabilitiesGetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'liabilitiesGetRequest' is set
            if (liabilitiesGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'liabilitiesGetRequest' when calling PlaidApi->LiabilitiesGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = liabilitiesGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.LiabilitiesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LiabilitiesGetResponse>("/liabilities/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LiabilitiesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Liabilities data The &#x60;/liabilities/get&#x60; endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type &#x60;credit&#x60; with account subtype &#x60;credit card&#x60; or &#x60;paypal&#x60;, and account type &#x60;loan&#x60; with account subtype &#x60;student&#x60; or &#x60;mortgage&#x60;. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the &#x60;account_filters&#x60; parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling &#x60;/liabilities/get&#x60;.  Note: This request may take some time to complete if &#x60;liabilities&#x60; was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liabilitiesGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LiabilitiesGetResponse</returns>
        public async System.Threading.Tasks.Task<LiabilitiesGetResponse> LiabilitiesGetAsync(LiabilitiesGetRequest liabilitiesGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<LiabilitiesGetResponse> localVarResponse = await LiabilitiesGetWithHttpInfoAsync(liabilitiesGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Liabilities data The &#x60;/liabilities/get&#x60; endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type &#x60;credit&#x60; with account subtype &#x60;credit card&#x60; or &#x60;paypal&#x60;, and account type &#x60;loan&#x60; with account subtype &#x60;student&#x60; or &#x60;mortgage&#x60;. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the &#x60;account_filters&#x60; parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling &#x60;/liabilities/get&#x60;.  Note: This request may take some time to complete if &#x60;liabilities&#x60; was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liabilitiesGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LiabilitiesGetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<LiabilitiesGetResponse>> LiabilitiesGetWithHttpInfoAsync(LiabilitiesGetRequest liabilitiesGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'liabilitiesGetRequest' is set
            if (liabilitiesGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'liabilitiesGetRequest' when calling PlaidApi->LiabilitiesGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = liabilitiesGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.LiabilitiesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LiabilitiesGetResponse>("/liabilities/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LiabilitiesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Link Token The &#x60;/link/token/create&#x60; endpoint creates a &#x60;link_token&#x60;, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a &#x60;public_token&#x60;, which can then be exchanged for an &#x60;access_token&#x60; via &#x60;/item/public_token/exchange&#x60; as part of the main Link flow.  A &#x60;link_token&#x60; generated by &#x60;/link/token/create&#x60; is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LinkTokenCreateResponse</returns>
        public LinkTokenCreateResponse LinkTokenCreate(LinkTokenCreateRequest linkTokenCreateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<LinkTokenCreateResponse> localVarResponse = LinkTokenCreateWithHttpInfo(linkTokenCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Link Token The &#x60;/link/token/create&#x60; endpoint creates a &#x60;link_token&#x60;, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a &#x60;public_token&#x60;, which can then be exchanged for an &#x60;access_token&#x60; via &#x60;/item/public_token/exchange&#x60; as part of the main Link flow.  A &#x60;link_token&#x60; generated by &#x60;/link/token/create&#x60; is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LinkTokenCreateResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<LinkTokenCreateResponse> LinkTokenCreateWithHttpInfo(LinkTokenCreateRequest linkTokenCreateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'linkTokenCreateRequest' is set
            if (linkTokenCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'linkTokenCreateRequest' when calling PlaidApi->LinkTokenCreate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = linkTokenCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.LinkTokenCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LinkTokenCreateResponse>("/link/token/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LinkTokenCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Link Token The &#x60;/link/token/create&#x60; endpoint creates a &#x60;link_token&#x60;, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a &#x60;public_token&#x60;, which can then be exchanged for an &#x60;access_token&#x60; via &#x60;/item/public_token/exchange&#x60; as part of the main Link flow.  A &#x60;link_token&#x60; generated by &#x60;/link/token/create&#x60; is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LinkTokenCreateResponse</returns>
        public async System.Threading.Tasks.Task<LinkTokenCreateResponse> LinkTokenCreateAsync(LinkTokenCreateRequest linkTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<LinkTokenCreateResponse> localVarResponse = await LinkTokenCreateWithHttpInfoAsync(linkTokenCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Link Token The &#x60;/link/token/create&#x60; endpoint creates a &#x60;link_token&#x60;, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a &#x60;public_token&#x60;, which can then be exchanged for an &#x60;access_token&#x60; via &#x60;/item/public_token/exchange&#x60; as part of the main Link flow.  A &#x60;link_token&#x60; generated by &#x60;/link/token/create&#x60; is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LinkTokenCreateResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<LinkTokenCreateResponse>> LinkTokenCreateWithHttpInfoAsync(LinkTokenCreateRequest linkTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'linkTokenCreateRequest' is set
            if (linkTokenCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'linkTokenCreateRequest' when calling PlaidApi->LinkTokenCreate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = linkTokenCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.LinkTokenCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LinkTokenCreateResponse>("/link/token/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LinkTokenCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Link Token The &#x60;/link/token/get&#x60; endpoint gets information about a previously-created &#x60;link_token&#x60; using the &#x60;/link/token/create&#x60; endpoint. It can be useful for debugging purposes.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkTokenGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LinkTokenGetResponse</returns>
        public LinkTokenGetResponse LinkTokenGet(LinkTokenGetRequest linkTokenGetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<LinkTokenGetResponse> localVarResponse = LinkTokenGetWithHttpInfo(linkTokenGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Link Token The &#x60;/link/token/get&#x60; endpoint gets information about a previously-created &#x60;link_token&#x60; using the &#x60;/link/token/create&#x60; endpoint. It can be useful for debugging purposes.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkTokenGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LinkTokenGetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<LinkTokenGetResponse> LinkTokenGetWithHttpInfo(LinkTokenGetRequest linkTokenGetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'linkTokenGetRequest' is set
            if (linkTokenGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'linkTokenGetRequest' when calling PlaidApi->LinkTokenGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = linkTokenGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.LinkTokenGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LinkTokenGetResponse>("/link/token/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LinkTokenGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Link Token The &#x60;/link/token/get&#x60; endpoint gets information about a previously-created &#x60;link_token&#x60; using the &#x60;/link/token/create&#x60; endpoint. It can be useful for debugging purposes.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkTokenGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LinkTokenGetResponse</returns>
        public async System.Threading.Tasks.Task<LinkTokenGetResponse> LinkTokenGetAsync(LinkTokenGetRequest linkTokenGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<LinkTokenGetResponse> localVarResponse = await LinkTokenGetWithHttpInfoAsync(linkTokenGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Link Token The &#x60;/link/token/get&#x60; endpoint gets information about a previously-created &#x60;link_token&#x60; using the &#x60;/link/token/create&#x60; endpoint. It can be useful for debugging purposes.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkTokenGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LinkTokenGetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<LinkTokenGetResponse>> LinkTokenGetWithHttpInfoAsync(LinkTokenGetRequest linkTokenGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'linkTokenGetRequest' is set
            if (linkTokenGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'linkTokenGetRequest' when calling PlaidApi->LinkTokenGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = linkTokenGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.LinkTokenGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LinkTokenGetResponse>("/link/token/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LinkTokenGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a payment After creating a payment recipient, you can use the &#x60;/payment_initiation/payment/create&#x60; endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR or GBP.  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer and GBP-denominated payments will be sent via the Faster Payments network, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP / EUR. For details on any payment limits in Production, contact your Plaid Account Manager.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentInitiationPaymentCreateResponse</returns>
        public PaymentInitiationPaymentCreateResponse PaymentInitiationPaymentCreate(PaymentInitiationPaymentCreateRequest paymentInitiationPaymentCreateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PaymentInitiationPaymentCreateResponse> localVarResponse = PaymentInitiationPaymentCreateWithHttpInfo(paymentInitiationPaymentCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a payment After creating a payment recipient, you can use the &#x60;/payment_initiation/payment/create&#x60; endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR or GBP.  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer and GBP-denominated payments will be sent via the Faster Payments network, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP / EUR. For details on any payment limits in Production, contact your Plaid Account Manager.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentInitiationPaymentCreateResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<PaymentInitiationPaymentCreateResponse> PaymentInitiationPaymentCreateWithHttpInfo(PaymentInitiationPaymentCreateRequest paymentInitiationPaymentCreateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'paymentInitiationPaymentCreateRequest' is set
            if (paymentInitiationPaymentCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'paymentInitiationPaymentCreateRequest' when calling PlaidApi->PaymentInitiationPaymentCreate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = paymentInitiationPaymentCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.PaymentInitiationPaymentCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PaymentInitiationPaymentCreateResponse>("/payment_initiation/payment/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentInitiationPaymentCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a payment After creating a payment recipient, you can use the &#x60;/payment_initiation/payment/create&#x60; endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR or GBP.  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer and GBP-denominated payments will be sent via the Faster Payments network, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP / EUR. For details on any payment limits in Production, contact your Plaid Account Manager.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentInitiationPaymentCreateResponse</returns>
        public async System.Threading.Tasks.Task<PaymentInitiationPaymentCreateResponse> PaymentInitiationPaymentCreateAsync(PaymentInitiationPaymentCreateRequest paymentInitiationPaymentCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PaymentInitiationPaymentCreateResponse> localVarResponse = await PaymentInitiationPaymentCreateWithHttpInfoAsync(paymentInitiationPaymentCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a payment After creating a payment recipient, you can use the &#x60;/payment_initiation/payment/create&#x60; endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR or GBP.  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer and GBP-denominated payments will be sent via the Faster Payments network, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP / EUR. For details on any payment limits in Production, contact your Plaid Account Manager.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentInitiationPaymentCreateResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PaymentInitiationPaymentCreateResponse>> PaymentInitiationPaymentCreateWithHttpInfoAsync(PaymentInitiationPaymentCreateRequest paymentInitiationPaymentCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'paymentInitiationPaymentCreateRequest' is set
            if (paymentInitiationPaymentCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'paymentInitiationPaymentCreateRequest' when calling PlaidApi->PaymentInitiationPaymentCreate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = paymentInitiationPaymentCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.PaymentInitiationPaymentCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PaymentInitiationPaymentCreateResponse>("/payment_initiation/payment/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentInitiationPaymentCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get payment details The &#x60;/payment_initiation/payment/get&#x60; endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the &#x60;/payment_initiation/payment/get&#x60; endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentInitiationPaymentGetResponse</returns>
        public PaymentInitiationPaymentGetResponse PaymentInitiationPaymentGet(PaymentInitiationPaymentGetRequest paymentInitiationPaymentGetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PaymentInitiationPaymentGetResponse> localVarResponse = PaymentInitiationPaymentGetWithHttpInfo(paymentInitiationPaymentGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get payment details The &#x60;/payment_initiation/payment/get&#x60; endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the &#x60;/payment_initiation/payment/get&#x60; endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentInitiationPaymentGetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<PaymentInitiationPaymentGetResponse> PaymentInitiationPaymentGetWithHttpInfo(PaymentInitiationPaymentGetRequest paymentInitiationPaymentGetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'paymentInitiationPaymentGetRequest' is set
            if (paymentInitiationPaymentGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'paymentInitiationPaymentGetRequest' when calling PlaidApi->PaymentInitiationPaymentGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = paymentInitiationPaymentGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.PaymentInitiationPaymentGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PaymentInitiationPaymentGetResponse>("/payment_initiation/payment/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentInitiationPaymentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get payment details The &#x60;/payment_initiation/payment/get&#x60; endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the &#x60;/payment_initiation/payment/get&#x60; endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentInitiationPaymentGetResponse</returns>
        public async System.Threading.Tasks.Task<PaymentInitiationPaymentGetResponse> PaymentInitiationPaymentGetAsync(PaymentInitiationPaymentGetRequest paymentInitiationPaymentGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PaymentInitiationPaymentGetResponse> localVarResponse = await PaymentInitiationPaymentGetWithHttpInfoAsync(paymentInitiationPaymentGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get payment details The &#x60;/payment_initiation/payment/get&#x60; endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the &#x60;/payment_initiation/payment/get&#x60; endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentInitiationPaymentGetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PaymentInitiationPaymentGetResponse>> PaymentInitiationPaymentGetWithHttpInfoAsync(PaymentInitiationPaymentGetRequest paymentInitiationPaymentGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'paymentInitiationPaymentGetRequest' is set
            if (paymentInitiationPaymentGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'paymentInitiationPaymentGetRequest' when calling PlaidApi->PaymentInitiationPaymentGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = paymentInitiationPaymentGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.PaymentInitiationPaymentGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PaymentInitiationPaymentGetResponse>("/payment_initiation/payment/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentInitiationPaymentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List payments The &#x60;/payment_initiation/payment/list&#x60; endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional &#x60;count&#x60; and &#x60;cursor&#x60; parameters.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentInitiationPaymentListResponse</returns>
        public PaymentInitiationPaymentListResponse PaymentInitiationPaymentList(PaymentInitiationPaymentListRequest paymentInitiationPaymentListRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PaymentInitiationPaymentListResponse> localVarResponse = PaymentInitiationPaymentListWithHttpInfo(paymentInitiationPaymentListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List payments The &#x60;/payment_initiation/payment/list&#x60; endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional &#x60;count&#x60; and &#x60;cursor&#x60; parameters.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentInitiationPaymentListResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<PaymentInitiationPaymentListResponse> PaymentInitiationPaymentListWithHttpInfo(PaymentInitiationPaymentListRequest paymentInitiationPaymentListRequest, int operationIndex = 0)
        {
            // verify the required parameter 'paymentInitiationPaymentListRequest' is set
            if (paymentInitiationPaymentListRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'paymentInitiationPaymentListRequest' when calling PlaidApi->PaymentInitiationPaymentList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = paymentInitiationPaymentListRequest;

            localVarRequestOptions.Operation = "PlaidApi.PaymentInitiationPaymentList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PaymentInitiationPaymentListResponse>("/payment_initiation/payment/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentInitiationPaymentList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List payments The &#x60;/payment_initiation/payment/list&#x60; endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional &#x60;count&#x60; and &#x60;cursor&#x60; parameters.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentInitiationPaymentListResponse</returns>
        public async System.Threading.Tasks.Task<PaymentInitiationPaymentListResponse> PaymentInitiationPaymentListAsync(PaymentInitiationPaymentListRequest paymentInitiationPaymentListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PaymentInitiationPaymentListResponse> localVarResponse = await PaymentInitiationPaymentListWithHttpInfoAsync(paymentInitiationPaymentListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List payments The &#x60;/payment_initiation/payment/list&#x60; endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional &#x60;count&#x60; and &#x60;cursor&#x60; parameters.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentInitiationPaymentListResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PaymentInitiationPaymentListResponse>> PaymentInitiationPaymentListWithHttpInfoAsync(PaymentInitiationPaymentListRequest paymentInitiationPaymentListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'paymentInitiationPaymentListRequest' is set
            if (paymentInitiationPaymentListRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'paymentInitiationPaymentListRequest' when calling PlaidApi->PaymentInitiationPaymentList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = paymentInitiationPaymentListRequest;

            localVarRequestOptions.Operation = "PlaidApi.PaymentInitiationPaymentList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PaymentInitiationPaymentListResponse>("/payment_initiation/payment/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentInitiationPaymentList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reverse an existing payment Reverse a previously initiated payment.  A payment can only be reversed once and will be refunded to the original sender&#39;s account. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentReverseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentInitiationPaymentReverseResponse</returns>
        public PaymentInitiationPaymentReverseResponse PaymentInitiationPaymentReverse(PaymentInitiationPaymentReverseRequest paymentInitiationPaymentReverseRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PaymentInitiationPaymentReverseResponse> localVarResponse = PaymentInitiationPaymentReverseWithHttpInfo(paymentInitiationPaymentReverseRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reverse an existing payment Reverse a previously initiated payment.  A payment can only be reversed once and will be refunded to the original sender&#39;s account. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentReverseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentInitiationPaymentReverseResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<PaymentInitiationPaymentReverseResponse> PaymentInitiationPaymentReverseWithHttpInfo(PaymentInitiationPaymentReverseRequest paymentInitiationPaymentReverseRequest, int operationIndex = 0)
        {
            // verify the required parameter 'paymentInitiationPaymentReverseRequest' is set
            if (paymentInitiationPaymentReverseRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'paymentInitiationPaymentReverseRequest' when calling PlaidApi->PaymentInitiationPaymentReverse");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = paymentInitiationPaymentReverseRequest;

            localVarRequestOptions.Operation = "PlaidApi.PaymentInitiationPaymentReverse";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PaymentInitiationPaymentReverseResponse>("/payment_initiation/payment/reverse", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentInitiationPaymentReverse", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reverse an existing payment Reverse a previously initiated payment.  A payment can only be reversed once and will be refunded to the original sender&#39;s account. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentReverseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentInitiationPaymentReverseResponse</returns>
        public async System.Threading.Tasks.Task<PaymentInitiationPaymentReverseResponse> PaymentInitiationPaymentReverseAsync(PaymentInitiationPaymentReverseRequest paymentInitiationPaymentReverseRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PaymentInitiationPaymentReverseResponse> localVarResponse = await PaymentInitiationPaymentReverseWithHttpInfoAsync(paymentInitiationPaymentReverseRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reverse an existing payment Reverse a previously initiated payment.  A payment can only be reversed once and will be refunded to the original sender&#39;s account. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationPaymentReverseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentInitiationPaymentReverseResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PaymentInitiationPaymentReverseResponse>> PaymentInitiationPaymentReverseWithHttpInfoAsync(PaymentInitiationPaymentReverseRequest paymentInitiationPaymentReverseRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'paymentInitiationPaymentReverseRequest' is set
            if (paymentInitiationPaymentReverseRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'paymentInitiationPaymentReverseRequest' when calling PlaidApi->PaymentInitiationPaymentReverse");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = paymentInitiationPaymentReverseRequest;

            localVarRequestOptions.Operation = "PlaidApi.PaymentInitiationPaymentReverse";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PaymentInitiationPaymentReverseResponse>("/payment_initiation/payment/reverse", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentInitiationPaymentReverse", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create payment recipient Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA).  For a standing order (recurring) payment, the recipient must be in the UK.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same &#x60;recipient_id&#x60;. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationRecipientCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentInitiationRecipientCreateResponse</returns>
        public PaymentInitiationRecipientCreateResponse PaymentInitiationRecipientCreate(PaymentInitiationRecipientCreateRequest paymentInitiationRecipientCreateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PaymentInitiationRecipientCreateResponse> localVarResponse = PaymentInitiationRecipientCreateWithHttpInfo(paymentInitiationRecipientCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create payment recipient Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA).  For a standing order (recurring) payment, the recipient must be in the UK.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same &#x60;recipient_id&#x60;. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationRecipientCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentInitiationRecipientCreateResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<PaymentInitiationRecipientCreateResponse> PaymentInitiationRecipientCreateWithHttpInfo(PaymentInitiationRecipientCreateRequest paymentInitiationRecipientCreateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'paymentInitiationRecipientCreateRequest' is set
            if (paymentInitiationRecipientCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'paymentInitiationRecipientCreateRequest' when calling PlaidApi->PaymentInitiationRecipientCreate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = paymentInitiationRecipientCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.PaymentInitiationRecipientCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PaymentInitiationRecipientCreateResponse>("/payment_initiation/recipient/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentInitiationRecipientCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create payment recipient Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA).  For a standing order (recurring) payment, the recipient must be in the UK.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same &#x60;recipient_id&#x60;. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationRecipientCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentInitiationRecipientCreateResponse</returns>
        public async System.Threading.Tasks.Task<PaymentInitiationRecipientCreateResponse> PaymentInitiationRecipientCreateAsync(PaymentInitiationRecipientCreateRequest paymentInitiationRecipientCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PaymentInitiationRecipientCreateResponse> localVarResponse = await PaymentInitiationRecipientCreateWithHttpInfoAsync(paymentInitiationRecipientCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create payment recipient Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA).  For a standing order (recurring) payment, the recipient must be in the UK.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same &#x60;recipient_id&#x60;. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationRecipientCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentInitiationRecipientCreateResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PaymentInitiationRecipientCreateResponse>> PaymentInitiationRecipientCreateWithHttpInfoAsync(PaymentInitiationRecipientCreateRequest paymentInitiationRecipientCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'paymentInitiationRecipientCreateRequest' is set
            if (paymentInitiationRecipientCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'paymentInitiationRecipientCreateRequest' when calling PlaidApi->PaymentInitiationRecipientCreate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = paymentInitiationRecipientCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.PaymentInitiationRecipientCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PaymentInitiationRecipientCreateResponse>("/payment_initiation/recipient/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentInitiationRecipientCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get payment recipient Get details about a payment recipient you have previously created.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationRecipientGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentInitiationRecipientGetResponse</returns>
        public PaymentInitiationRecipientGetResponse PaymentInitiationRecipientGet(PaymentInitiationRecipientGetRequest paymentInitiationRecipientGetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PaymentInitiationRecipientGetResponse> localVarResponse = PaymentInitiationRecipientGetWithHttpInfo(paymentInitiationRecipientGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get payment recipient Get details about a payment recipient you have previously created.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationRecipientGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentInitiationRecipientGetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<PaymentInitiationRecipientGetResponse> PaymentInitiationRecipientGetWithHttpInfo(PaymentInitiationRecipientGetRequest paymentInitiationRecipientGetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'paymentInitiationRecipientGetRequest' is set
            if (paymentInitiationRecipientGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'paymentInitiationRecipientGetRequest' when calling PlaidApi->PaymentInitiationRecipientGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = paymentInitiationRecipientGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.PaymentInitiationRecipientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PaymentInitiationRecipientGetResponse>("/payment_initiation/recipient/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentInitiationRecipientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get payment recipient Get details about a payment recipient you have previously created.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationRecipientGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentInitiationRecipientGetResponse</returns>
        public async System.Threading.Tasks.Task<PaymentInitiationRecipientGetResponse> PaymentInitiationRecipientGetAsync(PaymentInitiationRecipientGetRequest paymentInitiationRecipientGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PaymentInitiationRecipientGetResponse> localVarResponse = await PaymentInitiationRecipientGetWithHttpInfoAsync(paymentInitiationRecipientGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get payment recipient Get details about a payment recipient you have previously created.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationRecipientGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentInitiationRecipientGetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PaymentInitiationRecipientGetResponse>> PaymentInitiationRecipientGetWithHttpInfoAsync(PaymentInitiationRecipientGetRequest paymentInitiationRecipientGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'paymentInitiationRecipientGetRequest' is set
            if (paymentInitiationRecipientGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'paymentInitiationRecipientGetRequest' when calling PlaidApi->PaymentInitiationRecipientGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = paymentInitiationRecipientGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.PaymentInitiationRecipientGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PaymentInitiationRecipientGetResponse>("/payment_initiation/recipient/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentInitiationRecipientGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List payment recipients The &#x60;/payment_initiation/recipient/list&#x60; endpoint list the payment recipients that you have previously created.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationRecipientListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentInitiationRecipientListResponse</returns>
        public PaymentInitiationRecipientListResponse PaymentInitiationRecipientList(PaymentInitiationRecipientListRequest paymentInitiationRecipientListRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PaymentInitiationRecipientListResponse> localVarResponse = PaymentInitiationRecipientListWithHttpInfo(paymentInitiationRecipientListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List payment recipients The &#x60;/payment_initiation/recipient/list&#x60; endpoint list the payment recipients that you have previously created.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationRecipientListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentInitiationRecipientListResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<PaymentInitiationRecipientListResponse> PaymentInitiationRecipientListWithHttpInfo(PaymentInitiationRecipientListRequest paymentInitiationRecipientListRequest, int operationIndex = 0)
        {
            // verify the required parameter 'paymentInitiationRecipientListRequest' is set
            if (paymentInitiationRecipientListRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'paymentInitiationRecipientListRequest' when calling PlaidApi->PaymentInitiationRecipientList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = paymentInitiationRecipientListRequest;

            localVarRequestOptions.Operation = "PlaidApi.PaymentInitiationRecipientList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PaymentInitiationRecipientListResponse>("/payment_initiation/recipient/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentInitiationRecipientList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List payment recipients The &#x60;/payment_initiation/recipient/list&#x60; endpoint list the payment recipients that you have previously created.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationRecipientListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentInitiationRecipientListResponse</returns>
        public async System.Threading.Tasks.Task<PaymentInitiationRecipientListResponse> PaymentInitiationRecipientListAsync(PaymentInitiationRecipientListRequest paymentInitiationRecipientListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PaymentInitiationRecipientListResponse> localVarResponse = await PaymentInitiationRecipientListWithHttpInfoAsync(paymentInitiationRecipientListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List payment recipients The &#x60;/payment_initiation/recipient/list&#x60; endpoint list the payment recipients that you have previously created.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentInitiationRecipientListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentInitiationRecipientListResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PaymentInitiationRecipientListResponse>> PaymentInitiationRecipientListWithHttpInfoAsync(PaymentInitiationRecipientListRequest paymentInitiationRecipientListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'paymentInitiationRecipientListRequest' is set
            if (paymentInitiationRecipientListRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'paymentInitiationRecipientListRequest' when calling PlaidApi->PaymentInitiationRecipientList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = paymentInitiationRecipientListRequest;

            localVarRequestOptions.Operation = "PlaidApi.PaymentInitiationRecipientList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PaymentInitiationRecipientListResponse>("/payment_initiation/recipient/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PaymentInitiationRecipientList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Apex bank account token Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorApexProcessorTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProcessorTokenCreateResponse</returns>
        public ProcessorTokenCreateResponse ProcessorApexProcessorTokenCreate(ProcessorApexProcessorTokenCreateRequest processorApexProcessorTokenCreateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProcessorTokenCreateResponse> localVarResponse = ProcessorApexProcessorTokenCreateWithHttpInfo(processorApexProcessorTokenCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Apex bank account token Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorApexProcessorTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProcessorTokenCreateResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProcessorTokenCreateResponse> ProcessorApexProcessorTokenCreateWithHttpInfo(ProcessorApexProcessorTokenCreateRequest processorApexProcessorTokenCreateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'processorApexProcessorTokenCreateRequest' is set
            if (processorApexProcessorTokenCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'processorApexProcessorTokenCreateRequest' when calling PlaidApi->ProcessorApexProcessorTokenCreate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = processorApexProcessorTokenCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.ProcessorApexProcessorTokenCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProcessorTokenCreateResponse>("/processor/apex/processor_token/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProcessorApexProcessorTokenCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Apex bank account token Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorApexProcessorTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessorTokenCreateResponse</returns>
        public async System.Threading.Tasks.Task<ProcessorTokenCreateResponse> ProcessorApexProcessorTokenCreateAsync(ProcessorApexProcessorTokenCreateRequest processorApexProcessorTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ProcessorTokenCreateResponse> localVarResponse = await ProcessorApexProcessorTokenCreateWithHttpInfoAsync(processorApexProcessorTokenCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Apex bank account token Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorApexProcessorTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessorTokenCreateResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProcessorTokenCreateResponse>> ProcessorApexProcessorTokenCreateWithHttpInfoAsync(ProcessorApexProcessorTokenCreateRequest processorApexProcessorTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'processorApexProcessorTokenCreateRequest' is set
            if (processorApexProcessorTokenCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'processorApexProcessorTokenCreateRequest' when calling PlaidApi->ProcessorApexProcessorTokenCreate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = processorApexProcessorTokenCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.ProcessorApexProcessorTokenCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProcessorTokenCreateResponse>("/processor/apex/processor_token/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProcessorApexProcessorTokenCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Auth data The &#x60;/processor/auth/get&#x60; endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that&#39;&#39;s associated with a given &#x60;processor_token&#x60;. The endpoint also returns high-level account data and balances when available.   Versioning note: API versions 2019-05-29 and earlier use a different schema for the &#x60;numbers&#x60; object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorAuthGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProcessorAuthGetResponse</returns>
        public ProcessorAuthGetResponse ProcessorAuthGet(ProcessorAuthGetRequest processorAuthGetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProcessorAuthGetResponse> localVarResponse = ProcessorAuthGetWithHttpInfo(processorAuthGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Auth data The &#x60;/processor/auth/get&#x60; endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that&#39;&#39;s associated with a given &#x60;processor_token&#x60;. The endpoint also returns high-level account data and balances when available.   Versioning note: API versions 2019-05-29 and earlier use a different schema for the &#x60;numbers&#x60; object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorAuthGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProcessorAuthGetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProcessorAuthGetResponse> ProcessorAuthGetWithHttpInfo(ProcessorAuthGetRequest processorAuthGetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'processorAuthGetRequest' is set
            if (processorAuthGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'processorAuthGetRequest' when calling PlaidApi->ProcessorAuthGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = processorAuthGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.ProcessorAuthGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProcessorAuthGetResponse>("/processor/auth/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProcessorAuthGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Auth data The &#x60;/processor/auth/get&#x60; endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that&#39;&#39;s associated with a given &#x60;processor_token&#x60;. The endpoint also returns high-level account data and balances when available.   Versioning note: API versions 2019-05-29 and earlier use a different schema for the &#x60;numbers&#x60; object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorAuthGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessorAuthGetResponse</returns>
        public async System.Threading.Tasks.Task<ProcessorAuthGetResponse> ProcessorAuthGetAsync(ProcessorAuthGetRequest processorAuthGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ProcessorAuthGetResponse> localVarResponse = await ProcessorAuthGetWithHttpInfoAsync(processorAuthGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Auth data The &#x60;/processor/auth/get&#x60; endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that&#39;&#39;s associated with a given &#x60;processor_token&#x60;. The endpoint also returns high-level account data and balances when available.   Versioning note: API versions 2019-05-29 and earlier use a different schema for the &#x60;numbers&#x60; object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorAuthGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessorAuthGetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProcessorAuthGetResponse>> ProcessorAuthGetWithHttpInfoAsync(ProcessorAuthGetRequest processorAuthGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'processorAuthGetRequest' is set
            if (processorAuthGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'processorAuthGetRequest' when calling PlaidApi->ProcessorAuthGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = processorAuthGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.ProcessorAuthGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProcessorAuthGetResponse>("/processor/auth/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProcessorAuthGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Balance data The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for each of an Item&#39;s accounts. While other endpoints may return a balance object, only &#x60;/processor/balance/get&#x60; forces the available and current balance fields to be refreshed rather than cached. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorBalanceGetRequest">The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProcessorBalanceGetResponse</returns>
        public ProcessorBalanceGetResponse ProcessorBalanceGet(ProcessorBalanceGetRequest processorBalanceGetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProcessorBalanceGetResponse> localVarResponse = ProcessorBalanceGetWithHttpInfo(processorBalanceGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Balance data The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for each of an Item&#39;s accounts. While other endpoints may return a balance object, only &#x60;/processor/balance/get&#x60; forces the available and current balance fields to be refreshed rather than cached. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorBalanceGetRequest">The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProcessorBalanceGetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProcessorBalanceGetResponse> ProcessorBalanceGetWithHttpInfo(ProcessorBalanceGetRequest processorBalanceGetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'processorBalanceGetRequest' is set
            if (processorBalanceGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'processorBalanceGetRequest' when calling PlaidApi->ProcessorBalanceGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = processorBalanceGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.ProcessorBalanceGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProcessorBalanceGetResponse>("/processor/balance/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProcessorBalanceGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Balance data The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for each of an Item&#39;s accounts. While other endpoints may return a balance object, only &#x60;/processor/balance/get&#x60; forces the available and current balance fields to be refreshed rather than cached. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorBalanceGetRequest">The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessorBalanceGetResponse</returns>
        public async System.Threading.Tasks.Task<ProcessorBalanceGetResponse> ProcessorBalanceGetAsync(ProcessorBalanceGetRequest processorBalanceGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ProcessorBalanceGetResponse> localVarResponse = await ProcessorBalanceGetWithHttpInfoAsync(processorBalanceGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Balance data The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for each of an Item&#39;s accounts. While other endpoints may return a balance object, only &#x60;/processor/balance/get&#x60; forces the available and current balance fields to be refreshed rather than cached. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorBalanceGetRequest">The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessorBalanceGetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProcessorBalanceGetResponse>> ProcessorBalanceGetWithHttpInfoAsync(ProcessorBalanceGetRequest processorBalanceGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'processorBalanceGetRequest' is set
            if (processorBalanceGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'processorBalanceGetRequest' when calling PlaidApi->ProcessorBalanceGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = processorBalanceGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.ProcessorBalanceGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProcessorBalanceGetResponse>("/processor/balance/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProcessorBalanceGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a bank transfer as a processor Use the &#x60;/processor/bank_transfer/create&#x60; endpoint to initiate a new bank transfer as a processor
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorBankTransferCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProcessorBankTransferCreateResponse</returns>
        public ProcessorBankTransferCreateResponse ProcessorBankTransferCreate(ProcessorBankTransferCreateRequest processorBankTransferCreateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProcessorBankTransferCreateResponse> localVarResponse = ProcessorBankTransferCreateWithHttpInfo(processorBankTransferCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a bank transfer as a processor Use the &#x60;/processor/bank_transfer/create&#x60; endpoint to initiate a new bank transfer as a processor
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorBankTransferCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProcessorBankTransferCreateResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProcessorBankTransferCreateResponse> ProcessorBankTransferCreateWithHttpInfo(ProcessorBankTransferCreateRequest processorBankTransferCreateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'processorBankTransferCreateRequest' is set
            if (processorBankTransferCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'processorBankTransferCreateRequest' when calling PlaidApi->ProcessorBankTransferCreate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = processorBankTransferCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.ProcessorBankTransferCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProcessorBankTransferCreateResponse>("/processor/bank_transfer/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProcessorBankTransferCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a bank transfer as a processor Use the &#x60;/processor/bank_transfer/create&#x60; endpoint to initiate a new bank transfer as a processor
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorBankTransferCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessorBankTransferCreateResponse</returns>
        public async System.Threading.Tasks.Task<ProcessorBankTransferCreateResponse> ProcessorBankTransferCreateAsync(ProcessorBankTransferCreateRequest processorBankTransferCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ProcessorBankTransferCreateResponse> localVarResponse = await ProcessorBankTransferCreateWithHttpInfoAsync(processorBankTransferCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a bank transfer as a processor Use the &#x60;/processor/bank_transfer/create&#x60; endpoint to initiate a new bank transfer as a processor
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorBankTransferCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessorBankTransferCreateResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProcessorBankTransferCreateResponse>> ProcessorBankTransferCreateWithHttpInfoAsync(ProcessorBankTransferCreateRequest processorBankTransferCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'processorBankTransferCreateRequest' is set
            if (processorBankTransferCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'processorBankTransferCreateRequest' when calling PlaidApi->ProcessorBankTransferCreate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = processorBankTransferCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.ProcessorBankTransferCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProcessorBankTransferCreateResponse>("/processor/bank_transfer/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProcessorBankTransferCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Identity data The &#x60;/processor/identity/get&#x60; endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorIdentityGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProcessorIdentityGetResponse</returns>
        public ProcessorIdentityGetResponse ProcessorIdentityGet(ProcessorIdentityGetRequest processorIdentityGetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProcessorIdentityGetResponse> localVarResponse = ProcessorIdentityGetWithHttpInfo(processorIdentityGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Identity data The &#x60;/processor/identity/get&#x60; endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorIdentityGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProcessorIdentityGetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProcessorIdentityGetResponse> ProcessorIdentityGetWithHttpInfo(ProcessorIdentityGetRequest processorIdentityGetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'processorIdentityGetRequest' is set
            if (processorIdentityGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'processorIdentityGetRequest' when calling PlaidApi->ProcessorIdentityGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = processorIdentityGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.ProcessorIdentityGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProcessorIdentityGetResponse>("/processor/identity/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProcessorIdentityGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Identity data The &#x60;/processor/identity/get&#x60; endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorIdentityGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessorIdentityGetResponse</returns>
        public async System.Threading.Tasks.Task<ProcessorIdentityGetResponse> ProcessorIdentityGetAsync(ProcessorIdentityGetRequest processorIdentityGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ProcessorIdentityGetResponse> localVarResponse = await ProcessorIdentityGetWithHttpInfoAsync(processorIdentityGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Identity data The &#x60;/processor/identity/get&#x60; endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorIdentityGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessorIdentityGetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProcessorIdentityGetResponse>> ProcessorIdentityGetWithHttpInfoAsync(ProcessorIdentityGetRequest processorIdentityGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'processorIdentityGetRequest' is set
            if (processorIdentityGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'processorIdentityGetRequest' when calling PlaidApi->ProcessorIdentityGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = processorIdentityGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.ProcessorIdentityGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProcessorIdentityGetResponse>("/processor/identity/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProcessorIdentityGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Stripe bank account token Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorStripeBankAccountTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProcessorStripeBankAccountTokenCreateResponse</returns>
        public ProcessorStripeBankAccountTokenCreateResponse ProcessorStripeBankAccountTokenCreate(ProcessorStripeBankAccountTokenCreateRequest processorStripeBankAccountTokenCreateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProcessorStripeBankAccountTokenCreateResponse> localVarResponse = ProcessorStripeBankAccountTokenCreateWithHttpInfo(processorStripeBankAccountTokenCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Stripe bank account token Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorStripeBankAccountTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProcessorStripeBankAccountTokenCreateResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProcessorStripeBankAccountTokenCreateResponse> ProcessorStripeBankAccountTokenCreateWithHttpInfo(ProcessorStripeBankAccountTokenCreateRequest processorStripeBankAccountTokenCreateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'processorStripeBankAccountTokenCreateRequest' is set
            if (processorStripeBankAccountTokenCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'processorStripeBankAccountTokenCreateRequest' when calling PlaidApi->ProcessorStripeBankAccountTokenCreate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = processorStripeBankAccountTokenCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.ProcessorStripeBankAccountTokenCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProcessorStripeBankAccountTokenCreateResponse>("/processor/stripe/bank_account_token/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProcessorStripeBankAccountTokenCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Stripe bank account token Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorStripeBankAccountTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessorStripeBankAccountTokenCreateResponse</returns>
        public async System.Threading.Tasks.Task<ProcessorStripeBankAccountTokenCreateResponse> ProcessorStripeBankAccountTokenCreateAsync(ProcessorStripeBankAccountTokenCreateRequest processorStripeBankAccountTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ProcessorStripeBankAccountTokenCreateResponse> localVarResponse = await ProcessorStripeBankAccountTokenCreateWithHttpInfoAsync(processorStripeBankAccountTokenCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Stripe bank account token Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorStripeBankAccountTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessorStripeBankAccountTokenCreateResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProcessorStripeBankAccountTokenCreateResponse>> ProcessorStripeBankAccountTokenCreateWithHttpInfoAsync(ProcessorStripeBankAccountTokenCreateRequest processorStripeBankAccountTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'processorStripeBankAccountTokenCreateRequest' is set
            if (processorStripeBankAccountTokenCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'processorStripeBankAccountTokenCreateRequest' when calling PlaidApi->ProcessorStripeBankAccountTokenCreate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = processorStripeBankAccountTokenCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.ProcessorStripeBankAccountTokenCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProcessorStripeBankAccountTokenCreateResponse>("/processor/stripe/bank_account_token/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProcessorStripeBankAccountTokenCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create processor token Used to create a token suitable for sending to one of Plaid&#39;s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see &#x60;/processor/stripe/bank_account_token/create&#x60; for creating tokens for use with Stripe integrations.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProcessorTokenCreateResponse</returns>
        public ProcessorTokenCreateResponse ProcessorTokenCreate(ProcessorTokenCreateRequest processorTokenCreateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ProcessorTokenCreateResponse> localVarResponse = ProcessorTokenCreateWithHttpInfo(processorTokenCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create processor token Used to create a token suitable for sending to one of Plaid&#39;s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see &#x60;/processor/stripe/bank_account_token/create&#x60; for creating tokens for use with Stripe integrations.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProcessorTokenCreateResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ProcessorTokenCreateResponse> ProcessorTokenCreateWithHttpInfo(ProcessorTokenCreateRequest processorTokenCreateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'processorTokenCreateRequest' is set
            if (processorTokenCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'processorTokenCreateRequest' when calling PlaidApi->ProcessorTokenCreate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = processorTokenCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.ProcessorTokenCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProcessorTokenCreateResponse>("/processor/token/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProcessorTokenCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create processor token Used to create a token suitable for sending to one of Plaid&#39;s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see &#x60;/processor/stripe/bank_account_token/create&#x60; for creating tokens for use with Stripe integrations.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessorTokenCreateResponse</returns>
        public async System.Threading.Tasks.Task<ProcessorTokenCreateResponse> ProcessorTokenCreateAsync(ProcessorTokenCreateRequest processorTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ProcessorTokenCreateResponse> localVarResponse = await ProcessorTokenCreateWithHttpInfoAsync(processorTokenCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create processor token Used to create a token suitable for sending to one of Plaid&#39;s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see &#x60;/processor/stripe/bank_account_token/create&#x60; for creating tokens for use with Stripe integrations.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessorTokenCreateResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ProcessorTokenCreateResponse>> ProcessorTokenCreateWithHttpInfoAsync(ProcessorTokenCreateRequest processorTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'processorTokenCreateRequest' is set
            if (processorTokenCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'processorTokenCreateRequest' when calling PlaidApi->ProcessorTokenCreate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = processorTokenCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.ProcessorTokenCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProcessorTokenCreateResponse>("/processor/token/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProcessorTokenCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manually fire a Bank Transfer webhook Use the &#x60;/sandbox/bank_transfer/fire_webhook&#x60; endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxBankTransferFireWebhookRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SandboxBankTransferFireWebhookResponse</returns>
        public SandboxBankTransferFireWebhookResponse SandboxBankTransferFireWebhook(SandboxBankTransferFireWebhookRequest sandboxBankTransferFireWebhookRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<SandboxBankTransferFireWebhookResponse> localVarResponse = SandboxBankTransferFireWebhookWithHttpInfo(sandboxBankTransferFireWebhookRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Manually fire a Bank Transfer webhook Use the &#x60;/sandbox/bank_transfer/fire_webhook&#x60; endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxBankTransferFireWebhookRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SandboxBankTransferFireWebhookResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<SandboxBankTransferFireWebhookResponse> SandboxBankTransferFireWebhookWithHttpInfo(SandboxBankTransferFireWebhookRequest sandboxBankTransferFireWebhookRequest, int operationIndex = 0)
        {
            // verify the required parameter 'sandboxBankTransferFireWebhookRequest' is set
            if (sandboxBankTransferFireWebhookRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sandboxBankTransferFireWebhookRequest' when calling PlaidApi->SandboxBankTransferFireWebhook");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sandboxBankTransferFireWebhookRequest;

            localVarRequestOptions.Operation = "PlaidApi.SandboxBankTransferFireWebhook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SandboxBankTransferFireWebhookResponse>("/sandbox/bank_transfer/fire_webhook", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SandboxBankTransferFireWebhook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manually fire a Bank Transfer webhook Use the &#x60;/sandbox/bank_transfer/fire_webhook&#x60; endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxBankTransferFireWebhookRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SandboxBankTransferFireWebhookResponse</returns>
        public async System.Threading.Tasks.Task<SandboxBankTransferFireWebhookResponse> SandboxBankTransferFireWebhookAsync(SandboxBankTransferFireWebhookRequest sandboxBankTransferFireWebhookRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SandboxBankTransferFireWebhookResponse> localVarResponse = await SandboxBankTransferFireWebhookWithHttpInfoAsync(sandboxBankTransferFireWebhookRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Manually fire a Bank Transfer webhook Use the &#x60;/sandbox/bank_transfer/fire_webhook&#x60; endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxBankTransferFireWebhookRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SandboxBankTransferFireWebhookResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SandboxBankTransferFireWebhookResponse>> SandboxBankTransferFireWebhookWithHttpInfoAsync(SandboxBankTransferFireWebhookRequest sandboxBankTransferFireWebhookRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sandboxBankTransferFireWebhookRequest' is set
            if (sandboxBankTransferFireWebhookRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sandboxBankTransferFireWebhookRequest' when calling PlaidApi->SandboxBankTransferFireWebhook");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sandboxBankTransferFireWebhookRequest;

            localVarRequestOptions.Operation = "PlaidApi.SandboxBankTransferFireWebhook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SandboxBankTransferFireWebhookResponse>("/sandbox/bank_transfer/fire_webhook", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SandboxBankTransferFireWebhook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Simulate a bank transfer event in Sandbox Use the &#x60;/sandbox/bank_transfer/simulate&#x60; endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/bank_transfer/event/sync&#x60; or &#x60;/bank_transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxBankTransferSimulateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SandboxBankTransferSimulateResponse</returns>
        public SandboxBankTransferSimulateResponse SandboxBankTransferSimulate(SandboxBankTransferSimulateRequest sandboxBankTransferSimulateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<SandboxBankTransferSimulateResponse> localVarResponse = SandboxBankTransferSimulateWithHttpInfo(sandboxBankTransferSimulateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Simulate a bank transfer event in Sandbox Use the &#x60;/sandbox/bank_transfer/simulate&#x60; endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/bank_transfer/event/sync&#x60; or &#x60;/bank_transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxBankTransferSimulateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SandboxBankTransferSimulateResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<SandboxBankTransferSimulateResponse> SandboxBankTransferSimulateWithHttpInfo(SandboxBankTransferSimulateRequest sandboxBankTransferSimulateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'sandboxBankTransferSimulateRequest' is set
            if (sandboxBankTransferSimulateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sandboxBankTransferSimulateRequest' when calling PlaidApi->SandboxBankTransferSimulate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sandboxBankTransferSimulateRequest;

            localVarRequestOptions.Operation = "PlaidApi.SandboxBankTransferSimulate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SandboxBankTransferSimulateResponse>("/sandbox/bank_transfer/simulate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SandboxBankTransferSimulate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Simulate a bank transfer event in Sandbox Use the &#x60;/sandbox/bank_transfer/simulate&#x60; endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/bank_transfer/event/sync&#x60; or &#x60;/bank_transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxBankTransferSimulateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SandboxBankTransferSimulateResponse</returns>
        public async System.Threading.Tasks.Task<SandboxBankTransferSimulateResponse> SandboxBankTransferSimulateAsync(SandboxBankTransferSimulateRequest sandboxBankTransferSimulateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SandboxBankTransferSimulateResponse> localVarResponse = await SandboxBankTransferSimulateWithHttpInfoAsync(sandboxBankTransferSimulateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Simulate a bank transfer event in Sandbox Use the &#x60;/sandbox/bank_transfer/simulate&#x60; endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/bank_transfer/event/sync&#x60; or &#x60;/bank_transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxBankTransferSimulateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SandboxBankTransferSimulateResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SandboxBankTransferSimulateResponse>> SandboxBankTransferSimulateWithHttpInfoAsync(SandboxBankTransferSimulateRequest sandboxBankTransferSimulateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sandboxBankTransferSimulateRequest' is set
            if (sandboxBankTransferSimulateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sandboxBankTransferSimulateRequest' when calling PlaidApi->SandboxBankTransferSimulate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sandboxBankTransferSimulateRequest;

            localVarRequestOptions.Operation = "PlaidApi.SandboxBankTransferSimulate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SandboxBankTransferSimulateResponse>("/sandbox/bank_transfer/simulate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SandboxBankTransferSimulate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manually fire an Income webhook Use the &#x60;/sandbox/income/fire_webhook&#x60; endpoint to manually trigger an Income webhook in the Sandbox environment.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxIncomeFireWebhookRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SandboxIncomeFireWebhookResponse</returns>
        public SandboxIncomeFireWebhookResponse SandboxIncomeFireWebhook(SandboxIncomeFireWebhookRequest sandboxIncomeFireWebhookRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<SandboxIncomeFireWebhookResponse> localVarResponse = SandboxIncomeFireWebhookWithHttpInfo(sandboxIncomeFireWebhookRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Manually fire an Income webhook Use the &#x60;/sandbox/income/fire_webhook&#x60; endpoint to manually trigger an Income webhook in the Sandbox environment.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxIncomeFireWebhookRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SandboxIncomeFireWebhookResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<SandboxIncomeFireWebhookResponse> SandboxIncomeFireWebhookWithHttpInfo(SandboxIncomeFireWebhookRequest sandboxIncomeFireWebhookRequest, int operationIndex = 0)
        {
            // verify the required parameter 'sandboxIncomeFireWebhookRequest' is set
            if (sandboxIncomeFireWebhookRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sandboxIncomeFireWebhookRequest' when calling PlaidApi->SandboxIncomeFireWebhook");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sandboxIncomeFireWebhookRequest;

            localVarRequestOptions.Operation = "PlaidApi.SandboxIncomeFireWebhook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SandboxIncomeFireWebhookResponse>("/sandbox/income/fire_webhook", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SandboxIncomeFireWebhook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manually fire an Income webhook Use the &#x60;/sandbox/income/fire_webhook&#x60; endpoint to manually trigger an Income webhook in the Sandbox environment.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxIncomeFireWebhookRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SandboxIncomeFireWebhookResponse</returns>
        public async System.Threading.Tasks.Task<SandboxIncomeFireWebhookResponse> SandboxIncomeFireWebhookAsync(SandboxIncomeFireWebhookRequest sandboxIncomeFireWebhookRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SandboxIncomeFireWebhookResponse> localVarResponse = await SandboxIncomeFireWebhookWithHttpInfoAsync(sandboxIncomeFireWebhookRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Manually fire an Income webhook Use the &#x60;/sandbox/income/fire_webhook&#x60; endpoint to manually trigger an Income webhook in the Sandbox environment.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxIncomeFireWebhookRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SandboxIncomeFireWebhookResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SandboxIncomeFireWebhookResponse>> SandboxIncomeFireWebhookWithHttpInfoAsync(SandboxIncomeFireWebhookRequest sandboxIncomeFireWebhookRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sandboxIncomeFireWebhookRequest' is set
            if (sandboxIncomeFireWebhookRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sandboxIncomeFireWebhookRequest' when calling PlaidApi->SandboxIncomeFireWebhook");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sandboxIncomeFireWebhookRequest;

            localVarRequestOptions.Operation = "PlaidApi.SandboxIncomeFireWebhook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SandboxIncomeFireWebhookResponse>("/sandbox/income/fire_webhook", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SandboxIncomeFireWebhook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fire a test webhook The &#x60;/sandbox/item/fire_webhook&#x60; endpoint is used to test that code correctly handles webhooks. This endpoint can trigger a Transactions &#x60;DEFAULT_UPDATE&#x60; webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a &#x60;SANDBOX_PRODUCT_NOT_ENABLED&#x60; error will result. This endpoint can also trigger a &#x60;NEW_ACCOUNTS_AVAILABLE&#x60; webhook to be fired for a given Sandbox Item created with Account Select v2. Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxItemFireWebhookRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SandboxItemFireWebhookResponse</returns>
        public SandboxItemFireWebhookResponse SandboxItemFireWebhook(SandboxItemFireWebhookRequest sandboxItemFireWebhookRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<SandboxItemFireWebhookResponse> localVarResponse = SandboxItemFireWebhookWithHttpInfo(sandboxItemFireWebhookRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fire a test webhook The &#x60;/sandbox/item/fire_webhook&#x60; endpoint is used to test that code correctly handles webhooks. This endpoint can trigger a Transactions &#x60;DEFAULT_UPDATE&#x60; webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a &#x60;SANDBOX_PRODUCT_NOT_ENABLED&#x60; error will result. This endpoint can also trigger a &#x60;NEW_ACCOUNTS_AVAILABLE&#x60; webhook to be fired for a given Sandbox Item created with Account Select v2. Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxItemFireWebhookRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SandboxItemFireWebhookResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<SandboxItemFireWebhookResponse> SandboxItemFireWebhookWithHttpInfo(SandboxItemFireWebhookRequest sandboxItemFireWebhookRequest, int operationIndex = 0)
        {
            // verify the required parameter 'sandboxItemFireWebhookRequest' is set
            if (sandboxItemFireWebhookRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sandboxItemFireWebhookRequest' when calling PlaidApi->SandboxItemFireWebhook");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sandboxItemFireWebhookRequest;

            localVarRequestOptions.Operation = "PlaidApi.SandboxItemFireWebhook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SandboxItemFireWebhookResponse>("/sandbox/item/fire_webhook", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SandboxItemFireWebhook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fire a test webhook The &#x60;/sandbox/item/fire_webhook&#x60; endpoint is used to test that code correctly handles webhooks. This endpoint can trigger a Transactions &#x60;DEFAULT_UPDATE&#x60; webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a &#x60;SANDBOX_PRODUCT_NOT_ENABLED&#x60; error will result. This endpoint can also trigger a &#x60;NEW_ACCOUNTS_AVAILABLE&#x60; webhook to be fired for a given Sandbox Item created with Account Select v2. Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxItemFireWebhookRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SandboxItemFireWebhookResponse</returns>
        public async System.Threading.Tasks.Task<SandboxItemFireWebhookResponse> SandboxItemFireWebhookAsync(SandboxItemFireWebhookRequest sandboxItemFireWebhookRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SandboxItemFireWebhookResponse> localVarResponse = await SandboxItemFireWebhookWithHttpInfoAsync(sandboxItemFireWebhookRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fire a test webhook The &#x60;/sandbox/item/fire_webhook&#x60; endpoint is used to test that code correctly handles webhooks. This endpoint can trigger a Transactions &#x60;DEFAULT_UPDATE&#x60; webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a &#x60;SANDBOX_PRODUCT_NOT_ENABLED&#x60; error will result. This endpoint can also trigger a &#x60;NEW_ACCOUNTS_AVAILABLE&#x60; webhook to be fired for a given Sandbox Item created with Account Select v2. Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxItemFireWebhookRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SandboxItemFireWebhookResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SandboxItemFireWebhookResponse>> SandboxItemFireWebhookWithHttpInfoAsync(SandboxItemFireWebhookRequest sandboxItemFireWebhookRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sandboxItemFireWebhookRequest' is set
            if (sandboxItemFireWebhookRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sandboxItemFireWebhookRequest' when calling PlaidApi->SandboxItemFireWebhook");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sandboxItemFireWebhookRequest;

            localVarRequestOptions.Operation = "PlaidApi.SandboxItemFireWebhook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SandboxItemFireWebhookResponse>("/sandbox/item/fire_webhook", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SandboxItemFireWebhook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Force a Sandbox Item into an error state &#x60;/sandbox/item/reset_login/&#x60; forces an Item into an &#x60;ITEM_LOGIN_REQUIRED&#x60; state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link&#39;s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling &#x60;/sandbox/item/reset_login&#x60;, You can then use Plaid Link update mode to restore the Item to a good state. An &#x60;ITEM_LOGIN_REQUIRED&#x60; webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an &#x60;ITEM_LOGIN_REQUIRED&#x60; error state automatically after 30 days, even if this endpoint is not called.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxItemResetLoginRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SandboxItemResetLoginResponse</returns>
        public SandboxItemResetLoginResponse SandboxItemResetLogin(SandboxItemResetLoginRequest sandboxItemResetLoginRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<SandboxItemResetLoginResponse> localVarResponse = SandboxItemResetLoginWithHttpInfo(sandboxItemResetLoginRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Force a Sandbox Item into an error state &#x60;/sandbox/item/reset_login/&#x60; forces an Item into an &#x60;ITEM_LOGIN_REQUIRED&#x60; state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link&#39;s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling &#x60;/sandbox/item/reset_login&#x60;, You can then use Plaid Link update mode to restore the Item to a good state. An &#x60;ITEM_LOGIN_REQUIRED&#x60; webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an &#x60;ITEM_LOGIN_REQUIRED&#x60; error state automatically after 30 days, even if this endpoint is not called.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxItemResetLoginRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SandboxItemResetLoginResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<SandboxItemResetLoginResponse> SandboxItemResetLoginWithHttpInfo(SandboxItemResetLoginRequest sandboxItemResetLoginRequest, int operationIndex = 0)
        {
            // verify the required parameter 'sandboxItemResetLoginRequest' is set
            if (sandboxItemResetLoginRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sandboxItemResetLoginRequest' when calling PlaidApi->SandboxItemResetLogin");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sandboxItemResetLoginRequest;

            localVarRequestOptions.Operation = "PlaidApi.SandboxItemResetLogin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SandboxItemResetLoginResponse>("/sandbox/item/reset_login", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SandboxItemResetLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Force a Sandbox Item into an error state &#x60;/sandbox/item/reset_login/&#x60; forces an Item into an &#x60;ITEM_LOGIN_REQUIRED&#x60; state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link&#39;s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling &#x60;/sandbox/item/reset_login&#x60;, You can then use Plaid Link update mode to restore the Item to a good state. An &#x60;ITEM_LOGIN_REQUIRED&#x60; webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an &#x60;ITEM_LOGIN_REQUIRED&#x60; error state automatically after 30 days, even if this endpoint is not called.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxItemResetLoginRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SandboxItemResetLoginResponse</returns>
        public async System.Threading.Tasks.Task<SandboxItemResetLoginResponse> SandboxItemResetLoginAsync(SandboxItemResetLoginRequest sandboxItemResetLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SandboxItemResetLoginResponse> localVarResponse = await SandboxItemResetLoginWithHttpInfoAsync(sandboxItemResetLoginRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Force a Sandbox Item into an error state &#x60;/sandbox/item/reset_login/&#x60; forces an Item into an &#x60;ITEM_LOGIN_REQUIRED&#x60; state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link&#39;s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling &#x60;/sandbox/item/reset_login&#x60;, You can then use Plaid Link update mode to restore the Item to a good state. An &#x60;ITEM_LOGIN_REQUIRED&#x60; webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an &#x60;ITEM_LOGIN_REQUIRED&#x60; error state automatically after 30 days, even if this endpoint is not called.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxItemResetLoginRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SandboxItemResetLoginResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SandboxItemResetLoginResponse>> SandboxItemResetLoginWithHttpInfoAsync(SandboxItemResetLoginRequest sandboxItemResetLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sandboxItemResetLoginRequest' is set
            if (sandboxItemResetLoginRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sandboxItemResetLoginRequest' when calling PlaidApi->SandboxItemResetLogin");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sandboxItemResetLoginRequest;

            localVarRequestOptions.Operation = "PlaidApi.SandboxItemResetLogin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SandboxItemResetLoginResponse>("/sandbox/item/reset_login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SandboxItemResetLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set verification status for Sandbox account The &#x60;/sandbox/item/set_verification_status&#x60; endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxItemSetVerificationStatusRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SandboxItemSetVerificationStatusResponse</returns>
        public SandboxItemSetVerificationStatusResponse SandboxItemSetVerificationStatus(SandboxItemSetVerificationStatusRequest sandboxItemSetVerificationStatusRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<SandboxItemSetVerificationStatusResponse> localVarResponse = SandboxItemSetVerificationStatusWithHttpInfo(sandboxItemSetVerificationStatusRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set verification status for Sandbox account The &#x60;/sandbox/item/set_verification_status&#x60; endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxItemSetVerificationStatusRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SandboxItemSetVerificationStatusResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<SandboxItemSetVerificationStatusResponse> SandboxItemSetVerificationStatusWithHttpInfo(SandboxItemSetVerificationStatusRequest sandboxItemSetVerificationStatusRequest, int operationIndex = 0)
        {
            // verify the required parameter 'sandboxItemSetVerificationStatusRequest' is set
            if (sandboxItemSetVerificationStatusRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sandboxItemSetVerificationStatusRequest' when calling PlaidApi->SandboxItemSetVerificationStatus");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sandboxItemSetVerificationStatusRequest;

            localVarRequestOptions.Operation = "PlaidApi.SandboxItemSetVerificationStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SandboxItemSetVerificationStatusResponse>("/sandbox/item/set_verification_status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SandboxItemSetVerificationStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set verification status for Sandbox account The &#x60;/sandbox/item/set_verification_status&#x60; endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxItemSetVerificationStatusRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SandboxItemSetVerificationStatusResponse</returns>
        public async System.Threading.Tasks.Task<SandboxItemSetVerificationStatusResponse> SandboxItemSetVerificationStatusAsync(SandboxItemSetVerificationStatusRequest sandboxItemSetVerificationStatusRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SandboxItemSetVerificationStatusResponse> localVarResponse = await SandboxItemSetVerificationStatusWithHttpInfoAsync(sandboxItemSetVerificationStatusRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set verification status for Sandbox account The &#x60;/sandbox/item/set_verification_status&#x60; endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxItemSetVerificationStatusRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SandboxItemSetVerificationStatusResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SandboxItemSetVerificationStatusResponse>> SandboxItemSetVerificationStatusWithHttpInfoAsync(SandboxItemSetVerificationStatusRequest sandboxItemSetVerificationStatusRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sandboxItemSetVerificationStatusRequest' is set
            if (sandboxItemSetVerificationStatusRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sandboxItemSetVerificationStatusRequest' when calling PlaidApi->SandboxItemSetVerificationStatus");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sandboxItemSetVerificationStatusRequest;

            localVarRequestOptions.Operation = "PlaidApi.SandboxItemSetVerificationStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SandboxItemSetVerificationStatusResponse>("/sandbox/item/set_verification_status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SandboxItemSetVerificationStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save the selected accounts when connecting to the Platypus Oauth institution Save the selected accounts when connecting to the Platypus Oauth institution
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxOauthSelectAccountsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> SandboxOauthSelectAccounts(SandboxOauthSelectAccountsRequest sandboxOauthSelectAccountsRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Dictionary<string, Object>> localVarResponse = SandboxOauthSelectAccountsWithHttpInfo(sandboxOauthSelectAccountsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save the selected accounts when connecting to the Platypus Oauth institution Save the selected accounts when connecting to the Platypus Oauth institution
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxOauthSelectAccountsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<Dictionary<string, Object>> SandboxOauthSelectAccountsWithHttpInfo(SandboxOauthSelectAccountsRequest sandboxOauthSelectAccountsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'sandboxOauthSelectAccountsRequest' is set
            if (sandboxOauthSelectAccountsRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sandboxOauthSelectAccountsRequest' when calling PlaidApi->SandboxOauthSelectAccounts");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sandboxOauthSelectAccountsRequest;

            localVarRequestOptions.Operation = "PlaidApi.SandboxOauthSelectAccounts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Dictionary<string, Object>>("/sandbox/oauth/select_accounts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SandboxOauthSelectAccounts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save the selected accounts when connecting to the Platypus Oauth institution Save the selected accounts when connecting to the Platypus Oauth institution
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxOauthSelectAccountsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> SandboxOauthSelectAccountsAsync(SandboxOauthSelectAccountsRequest sandboxOauthSelectAccountsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Dictionary<string, Object>> localVarResponse = await SandboxOauthSelectAccountsWithHttpInfoAsync(sandboxOauthSelectAccountsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save the selected accounts when connecting to the Platypus Oauth institution Save the selected accounts when connecting to the Platypus Oauth institution
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxOauthSelectAccountsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Dictionary<string, Object>>> SandboxOauthSelectAccountsWithHttpInfoAsync(SandboxOauthSelectAccountsRequest sandboxOauthSelectAccountsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sandboxOauthSelectAccountsRequest' is set
            if (sandboxOauthSelectAccountsRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sandboxOauthSelectAccountsRequest' when calling PlaidApi->SandboxOauthSelectAccounts");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sandboxOauthSelectAccountsRequest;

            localVarRequestOptions.Operation = "PlaidApi.SandboxOauthSelectAccounts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Dictionary<string, Object>>("/sandbox/oauth/select_accounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SandboxOauthSelectAccounts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a test Item and processor token Use the &#x60;/sandbox/processor_token/create&#x60; endpoint to create a valid &#x60;processor_token&#x60; for an arbitrary institution ID and test credentials. The created &#x60;processor_token&#x60; corresponds to a new Sandbox Item. You can then use this &#x60;processor_token&#x60; with the &#x60;/processor/&#x60; API endpoints in Sandbox. You can also use &#x60;/sandbox/processor_token/create&#x60; with the [&#x60;user_custom&#x60; test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxProcessorTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SandboxProcessorTokenCreateResponse</returns>
        public SandboxProcessorTokenCreateResponse SandboxProcessorTokenCreate(SandboxProcessorTokenCreateRequest sandboxProcessorTokenCreateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<SandboxProcessorTokenCreateResponse> localVarResponse = SandboxProcessorTokenCreateWithHttpInfo(sandboxProcessorTokenCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a test Item and processor token Use the &#x60;/sandbox/processor_token/create&#x60; endpoint to create a valid &#x60;processor_token&#x60; for an arbitrary institution ID and test credentials. The created &#x60;processor_token&#x60; corresponds to a new Sandbox Item. You can then use this &#x60;processor_token&#x60; with the &#x60;/processor/&#x60; API endpoints in Sandbox. You can also use &#x60;/sandbox/processor_token/create&#x60; with the [&#x60;user_custom&#x60; test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxProcessorTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SandboxProcessorTokenCreateResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<SandboxProcessorTokenCreateResponse> SandboxProcessorTokenCreateWithHttpInfo(SandboxProcessorTokenCreateRequest sandboxProcessorTokenCreateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'sandboxProcessorTokenCreateRequest' is set
            if (sandboxProcessorTokenCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sandboxProcessorTokenCreateRequest' when calling PlaidApi->SandboxProcessorTokenCreate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sandboxProcessorTokenCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.SandboxProcessorTokenCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SandboxProcessorTokenCreateResponse>("/sandbox/processor_token/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SandboxProcessorTokenCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a test Item and processor token Use the &#x60;/sandbox/processor_token/create&#x60; endpoint to create a valid &#x60;processor_token&#x60; for an arbitrary institution ID and test credentials. The created &#x60;processor_token&#x60; corresponds to a new Sandbox Item. You can then use this &#x60;processor_token&#x60; with the &#x60;/processor/&#x60; API endpoints in Sandbox. You can also use &#x60;/sandbox/processor_token/create&#x60; with the [&#x60;user_custom&#x60; test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxProcessorTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SandboxProcessorTokenCreateResponse</returns>
        public async System.Threading.Tasks.Task<SandboxProcessorTokenCreateResponse> SandboxProcessorTokenCreateAsync(SandboxProcessorTokenCreateRequest sandboxProcessorTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SandboxProcessorTokenCreateResponse> localVarResponse = await SandboxProcessorTokenCreateWithHttpInfoAsync(sandboxProcessorTokenCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a test Item and processor token Use the &#x60;/sandbox/processor_token/create&#x60; endpoint to create a valid &#x60;processor_token&#x60; for an arbitrary institution ID and test credentials. The created &#x60;processor_token&#x60; corresponds to a new Sandbox Item. You can then use this &#x60;processor_token&#x60; with the &#x60;/processor/&#x60; API endpoints in Sandbox. You can also use &#x60;/sandbox/processor_token/create&#x60; with the [&#x60;user_custom&#x60; test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxProcessorTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SandboxProcessorTokenCreateResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SandboxProcessorTokenCreateResponse>> SandboxProcessorTokenCreateWithHttpInfoAsync(SandboxProcessorTokenCreateRequest sandboxProcessorTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sandboxProcessorTokenCreateRequest' is set
            if (sandboxProcessorTokenCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sandboxProcessorTokenCreateRequest' when calling PlaidApi->SandboxProcessorTokenCreate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sandboxProcessorTokenCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.SandboxProcessorTokenCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SandboxProcessorTokenCreateResponse>("/sandbox/processor_token/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SandboxProcessorTokenCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a test Item Use the &#x60;/sandbox/public_token/create&#x60; endpoint to create a valid &#x60;public_token&#x60;  for an arbitrary institution ID, initial products, and test credentials. The created &#x60;public_token&#x60; maps to a new Sandbox Item. You can then call &#x60;/item/public_token/exchange&#x60; to exchange the &#x60;public_token&#x60; for an &#x60;access_token&#x60; and perform all API actions. &#x60;/sandbox/public_token/create&#x60; can also be used with the [&#x60;user_custom&#x60; test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. &#x60;/sandbox/public_token/create&#x60; cannot be used with OAuth institutions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxPublicTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SandboxPublicTokenCreateResponse</returns>
        public SandboxPublicTokenCreateResponse SandboxPublicTokenCreate(SandboxPublicTokenCreateRequest sandboxPublicTokenCreateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<SandboxPublicTokenCreateResponse> localVarResponse = SandboxPublicTokenCreateWithHttpInfo(sandboxPublicTokenCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a test Item Use the &#x60;/sandbox/public_token/create&#x60; endpoint to create a valid &#x60;public_token&#x60;  for an arbitrary institution ID, initial products, and test credentials. The created &#x60;public_token&#x60; maps to a new Sandbox Item. You can then call &#x60;/item/public_token/exchange&#x60; to exchange the &#x60;public_token&#x60; for an &#x60;access_token&#x60; and perform all API actions. &#x60;/sandbox/public_token/create&#x60; can also be used with the [&#x60;user_custom&#x60; test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. &#x60;/sandbox/public_token/create&#x60; cannot be used with OAuth institutions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxPublicTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SandboxPublicTokenCreateResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<SandboxPublicTokenCreateResponse> SandboxPublicTokenCreateWithHttpInfo(SandboxPublicTokenCreateRequest sandboxPublicTokenCreateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'sandboxPublicTokenCreateRequest' is set
            if (sandboxPublicTokenCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sandboxPublicTokenCreateRequest' when calling PlaidApi->SandboxPublicTokenCreate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sandboxPublicTokenCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.SandboxPublicTokenCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SandboxPublicTokenCreateResponse>("/sandbox/public_token/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SandboxPublicTokenCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a test Item Use the &#x60;/sandbox/public_token/create&#x60; endpoint to create a valid &#x60;public_token&#x60;  for an arbitrary institution ID, initial products, and test credentials. The created &#x60;public_token&#x60; maps to a new Sandbox Item. You can then call &#x60;/item/public_token/exchange&#x60; to exchange the &#x60;public_token&#x60; for an &#x60;access_token&#x60; and perform all API actions. &#x60;/sandbox/public_token/create&#x60; can also be used with the [&#x60;user_custom&#x60; test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. &#x60;/sandbox/public_token/create&#x60; cannot be used with OAuth institutions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxPublicTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SandboxPublicTokenCreateResponse</returns>
        public async System.Threading.Tasks.Task<SandboxPublicTokenCreateResponse> SandboxPublicTokenCreateAsync(SandboxPublicTokenCreateRequest sandboxPublicTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SandboxPublicTokenCreateResponse> localVarResponse = await SandboxPublicTokenCreateWithHttpInfoAsync(sandboxPublicTokenCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a test Item Use the &#x60;/sandbox/public_token/create&#x60; endpoint to create a valid &#x60;public_token&#x60;  for an arbitrary institution ID, initial products, and test credentials. The created &#x60;public_token&#x60; maps to a new Sandbox Item. You can then call &#x60;/item/public_token/exchange&#x60; to exchange the &#x60;public_token&#x60; for an &#x60;access_token&#x60; and perform all API actions. &#x60;/sandbox/public_token/create&#x60; can also be used with the [&#x60;user_custom&#x60; test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. &#x60;/sandbox/public_token/create&#x60; cannot be used with OAuth institutions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxPublicTokenCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SandboxPublicTokenCreateResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SandboxPublicTokenCreateResponse>> SandboxPublicTokenCreateWithHttpInfoAsync(SandboxPublicTokenCreateRequest sandboxPublicTokenCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sandboxPublicTokenCreateRequest' is set
            if (sandboxPublicTokenCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sandboxPublicTokenCreateRequest' when calling PlaidApi->SandboxPublicTokenCreate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sandboxPublicTokenCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.SandboxPublicTokenCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SandboxPublicTokenCreateResponse>("/sandbox/public_token/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SandboxPublicTokenCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the creation of a repayment Use the &#x60;/sandbox/transfer/repayment/simulate&#x60; endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxTransferRepaymentSimulateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SandboxTransferRepaymentSimulateResponse</returns>
        public SandboxTransferRepaymentSimulateResponse SandboxTransferRepaymentSimulate(SandboxTransferRepaymentSimulateRequest sandboxTransferRepaymentSimulateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<SandboxTransferRepaymentSimulateResponse> localVarResponse = SandboxTransferRepaymentSimulateWithHttpInfo(sandboxTransferRepaymentSimulateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the creation of a repayment Use the &#x60;/sandbox/transfer/repayment/simulate&#x60; endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxTransferRepaymentSimulateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SandboxTransferRepaymentSimulateResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<SandboxTransferRepaymentSimulateResponse> SandboxTransferRepaymentSimulateWithHttpInfo(SandboxTransferRepaymentSimulateRequest sandboxTransferRepaymentSimulateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'sandboxTransferRepaymentSimulateRequest' is set
            if (sandboxTransferRepaymentSimulateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sandboxTransferRepaymentSimulateRequest' when calling PlaidApi->SandboxTransferRepaymentSimulate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sandboxTransferRepaymentSimulateRequest;

            localVarRequestOptions.Operation = "PlaidApi.SandboxTransferRepaymentSimulate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SandboxTransferRepaymentSimulateResponse>("/sandbox/transfer/repayment/simulate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SandboxTransferRepaymentSimulate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the creation of a repayment Use the &#x60;/sandbox/transfer/repayment/simulate&#x60; endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxTransferRepaymentSimulateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SandboxTransferRepaymentSimulateResponse</returns>
        public async System.Threading.Tasks.Task<SandboxTransferRepaymentSimulateResponse> SandboxTransferRepaymentSimulateAsync(SandboxTransferRepaymentSimulateRequest sandboxTransferRepaymentSimulateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SandboxTransferRepaymentSimulateResponse> localVarResponse = await SandboxTransferRepaymentSimulateWithHttpInfoAsync(sandboxTransferRepaymentSimulateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the creation of a repayment Use the &#x60;/sandbox/transfer/repayment/simulate&#x60; endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxTransferRepaymentSimulateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SandboxTransferRepaymentSimulateResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SandboxTransferRepaymentSimulateResponse>> SandboxTransferRepaymentSimulateWithHttpInfoAsync(SandboxTransferRepaymentSimulateRequest sandboxTransferRepaymentSimulateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sandboxTransferRepaymentSimulateRequest' is set
            if (sandboxTransferRepaymentSimulateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sandboxTransferRepaymentSimulateRequest' when calling PlaidApi->SandboxTransferRepaymentSimulate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sandboxTransferRepaymentSimulateRequest;

            localVarRequestOptions.Operation = "PlaidApi.SandboxTransferRepaymentSimulate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SandboxTransferRepaymentSimulateResponse>("/sandbox/transfer/repayment/simulate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SandboxTransferRepaymentSimulate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Simulate a transfer event in Sandbox Use the &#x60;/sandbox/transfer/simulate&#x60; endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/transfer/event/sync&#x60; or &#x60;/transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxTransferSimulateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SandboxTransferSimulateResponse</returns>
        public SandboxTransferSimulateResponse SandboxTransferSimulate(SandboxTransferSimulateRequest sandboxTransferSimulateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<SandboxTransferSimulateResponse> localVarResponse = SandboxTransferSimulateWithHttpInfo(sandboxTransferSimulateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Simulate a transfer event in Sandbox Use the &#x60;/sandbox/transfer/simulate&#x60; endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/transfer/event/sync&#x60; or &#x60;/transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxTransferSimulateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SandboxTransferSimulateResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<SandboxTransferSimulateResponse> SandboxTransferSimulateWithHttpInfo(SandboxTransferSimulateRequest sandboxTransferSimulateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'sandboxTransferSimulateRequest' is set
            if (sandboxTransferSimulateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sandboxTransferSimulateRequest' when calling PlaidApi->SandboxTransferSimulate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sandboxTransferSimulateRequest;

            localVarRequestOptions.Operation = "PlaidApi.SandboxTransferSimulate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SandboxTransferSimulateResponse>("/sandbox/transfer/simulate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SandboxTransferSimulate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Simulate a transfer event in Sandbox Use the &#x60;/sandbox/transfer/simulate&#x60; endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/transfer/event/sync&#x60; or &#x60;/transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxTransferSimulateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SandboxTransferSimulateResponse</returns>
        public async System.Threading.Tasks.Task<SandboxTransferSimulateResponse> SandboxTransferSimulateAsync(SandboxTransferSimulateRequest sandboxTransferSimulateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SandboxTransferSimulateResponse> localVarResponse = await SandboxTransferSimulateWithHttpInfoAsync(sandboxTransferSimulateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Simulate a transfer event in Sandbox Use the &#x60;/sandbox/transfer/simulate&#x60; endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/transfer/event/sync&#x60; or &#x60;/transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxTransferSimulateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SandboxTransferSimulateResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SandboxTransferSimulateResponse>> SandboxTransferSimulateWithHttpInfoAsync(SandboxTransferSimulateRequest sandboxTransferSimulateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sandboxTransferSimulateRequest' is set
            if (sandboxTransferSimulateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sandboxTransferSimulateRequest' when calling PlaidApi->SandboxTransferSimulate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sandboxTransferSimulateRequest;

            localVarRequestOptions.Operation = "PlaidApi.SandboxTransferSimulate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SandboxTransferSimulateResponse>("/sandbox/transfer/simulate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SandboxTransferSimulate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Simulate creating a sweep Use the &#x60;/sandbox/transfer/sweep/simulate&#x60; endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all &#x60;posted&#x60; or &#x60;pending&#x60; transfers with a sweep status of &#x60;unswept&#x60; will become &#x60;swept&#x60;, and all &#x60;reversed&#x60; transfers with a sweep status of &#x60;swept&#x60; will become &#x60;reverse_swept&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxTransferSweepSimulateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SandboxTransferSweepSimulateResponse</returns>
        public SandboxTransferSweepSimulateResponse SandboxTransferSweepSimulate(SandboxTransferSweepSimulateRequest sandboxTransferSweepSimulateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<SandboxTransferSweepSimulateResponse> localVarResponse = SandboxTransferSweepSimulateWithHttpInfo(sandboxTransferSweepSimulateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Simulate creating a sweep Use the &#x60;/sandbox/transfer/sweep/simulate&#x60; endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all &#x60;posted&#x60; or &#x60;pending&#x60; transfers with a sweep status of &#x60;unswept&#x60; will become &#x60;swept&#x60;, and all &#x60;reversed&#x60; transfers with a sweep status of &#x60;swept&#x60; will become &#x60;reverse_swept&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxTransferSweepSimulateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SandboxTransferSweepSimulateResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<SandboxTransferSweepSimulateResponse> SandboxTransferSweepSimulateWithHttpInfo(SandboxTransferSweepSimulateRequest sandboxTransferSweepSimulateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'sandboxTransferSweepSimulateRequest' is set
            if (sandboxTransferSweepSimulateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sandboxTransferSweepSimulateRequest' when calling PlaidApi->SandboxTransferSweepSimulate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sandboxTransferSweepSimulateRequest;

            localVarRequestOptions.Operation = "PlaidApi.SandboxTransferSweepSimulate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SandboxTransferSweepSimulateResponse>("/sandbox/transfer/sweep/simulate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SandboxTransferSweepSimulate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Simulate creating a sweep Use the &#x60;/sandbox/transfer/sweep/simulate&#x60; endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all &#x60;posted&#x60; or &#x60;pending&#x60; transfers with a sweep status of &#x60;unswept&#x60; will become &#x60;swept&#x60;, and all &#x60;reversed&#x60; transfers with a sweep status of &#x60;swept&#x60; will become &#x60;reverse_swept&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxTransferSweepSimulateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SandboxTransferSweepSimulateResponse</returns>
        public async System.Threading.Tasks.Task<SandboxTransferSweepSimulateResponse> SandboxTransferSweepSimulateAsync(SandboxTransferSweepSimulateRequest sandboxTransferSweepSimulateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SandboxTransferSweepSimulateResponse> localVarResponse = await SandboxTransferSweepSimulateWithHttpInfoAsync(sandboxTransferSweepSimulateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Simulate creating a sweep Use the &#x60;/sandbox/transfer/sweep/simulate&#x60; endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all &#x60;posted&#x60; or &#x60;pending&#x60; transfers with a sweep status of &#x60;unswept&#x60; will become &#x60;swept&#x60;, and all &#x60;reversed&#x60; transfers with a sweep status of &#x60;swept&#x60; will become &#x60;reverse_swept&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sandboxTransferSweepSimulateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SandboxTransferSweepSimulateResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SandboxTransferSweepSimulateResponse>> SandboxTransferSweepSimulateWithHttpInfoAsync(SandboxTransferSweepSimulateRequest sandboxTransferSweepSimulateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sandboxTransferSweepSimulateRequest' is set
            if (sandboxTransferSweepSimulateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'sandboxTransferSweepSimulateRequest' when calling PlaidApi->SandboxTransferSweepSimulate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sandboxTransferSweepSimulateRequest;

            localVarRequestOptions.Operation = "PlaidApi.SandboxTransferSweepSimulate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SandboxTransferSweepSimulateResponse>("/sandbox/transfer/sweep/simulate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SandboxTransferSweepSimulate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Report whether you initiated an ACH transaction After calling &#x60;/signal/evaluate&#x60;, call &#x60;/signal/decision/report&#x60; to report whether the transaction was initiated. This endpoint will return an &#x60;INVALID_REQUEST&#x60; error if called a second time with a different value for &#x60;initiated&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signalDecisionReportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SignalDecisionReportResponse</returns>
        public SignalDecisionReportResponse SignalDecisionReport(SignalDecisionReportRequest signalDecisionReportRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<SignalDecisionReportResponse> localVarResponse = SignalDecisionReportWithHttpInfo(signalDecisionReportRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Report whether you initiated an ACH transaction After calling &#x60;/signal/evaluate&#x60;, call &#x60;/signal/decision/report&#x60; to report whether the transaction was initiated. This endpoint will return an &#x60;INVALID_REQUEST&#x60; error if called a second time with a different value for &#x60;initiated&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signalDecisionReportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SignalDecisionReportResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<SignalDecisionReportResponse> SignalDecisionReportWithHttpInfo(SignalDecisionReportRequest signalDecisionReportRequest, int operationIndex = 0)
        {
            // verify the required parameter 'signalDecisionReportRequest' is set
            if (signalDecisionReportRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'signalDecisionReportRequest' when calling PlaidApi->SignalDecisionReport");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = signalDecisionReportRequest;

            localVarRequestOptions.Operation = "PlaidApi.SignalDecisionReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SignalDecisionReportResponse>("/signal/decision/report", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignalDecisionReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Report whether you initiated an ACH transaction After calling &#x60;/signal/evaluate&#x60;, call &#x60;/signal/decision/report&#x60; to report whether the transaction was initiated. This endpoint will return an &#x60;INVALID_REQUEST&#x60; error if called a second time with a different value for &#x60;initiated&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signalDecisionReportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SignalDecisionReportResponse</returns>
        public async System.Threading.Tasks.Task<SignalDecisionReportResponse> SignalDecisionReportAsync(SignalDecisionReportRequest signalDecisionReportRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SignalDecisionReportResponse> localVarResponse = await SignalDecisionReportWithHttpInfoAsync(signalDecisionReportRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Report whether you initiated an ACH transaction After calling &#x60;/signal/evaluate&#x60;, call &#x60;/signal/decision/report&#x60; to report whether the transaction was initiated. This endpoint will return an &#x60;INVALID_REQUEST&#x60; error if called a second time with a different value for &#x60;initiated&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signalDecisionReportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SignalDecisionReportResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SignalDecisionReportResponse>> SignalDecisionReportWithHttpInfoAsync(SignalDecisionReportRequest signalDecisionReportRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'signalDecisionReportRequest' is set
            if (signalDecisionReportRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'signalDecisionReportRequest' when calling PlaidApi->SignalDecisionReport");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = signalDecisionReportRequest;

            localVarRequestOptions.Operation = "PlaidApi.SignalDecisionReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SignalDecisionReportResponse>("/signal/decision/report", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignalDecisionReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Evaluate a planned ACH transaction Use &#x60;/signal/evaluate&#x60; to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If &#x60;/signal/evaluate&#x60; is called on the same transaction multiple times within a 24-hour period, cached results may be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signalEvaluateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SignalEvaluateResponse</returns>
        public SignalEvaluateResponse SignalEvaluate(SignalEvaluateRequest signalEvaluateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<SignalEvaluateResponse> localVarResponse = SignalEvaluateWithHttpInfo(signalEvaluateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Evaluate a planned ACH transaction Use &#x60;/signal/evaluate&#x60; to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If &#x60;/signal/evaluate&#x60; is called on the same transaction multiple times within a 24-hour period, cached results may be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signalEvaluateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SignalEvaluateResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<SignalEvaluateResponse> SignalEvaluateWithHttpInfo(SignalEvaluateRequest signalEvaluateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'signalEvaluateRequest' is set
            if (signalEvaluateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'signalEvaluateRequest' when calling PlaidApi->SignalEvaluate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = signalEvaluateRequest;

            localVarRequestOptions.Operation = "PlaidApi.SignalEvaluate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SignalEvaluateResponse>("/signal/evaluate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignalEvaluate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Evaluate a planned ACH transaction Use &#x60;/signal/evaluate&#x60; to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If &#x60;/signal/evaluate&#x60; is called on the same transaction multiple times within a 24-hour period, cached results may be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signalEvaluateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SignalEvaluateResponse</returns>
        public async System.Threading.Tasks.Task<SignalEvaluateResponse> SignalEvaluateAsync(SignalEvaluateRequest signalEvaluateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SignalEvaluateResponse> localVarResponse = await SignalEvaluateWithHttpInfoAsync(signalEvaluateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Evaluate a planned ACH transaction Use &#x60;/signal/evaluate&#x60; to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If &#x60;/signal/evaluate&#x60; is called on the same transaction multiple times within a 24-hour period, cached results may be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signalEvaluateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SignalEvaluateResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SignalEvaluateResponse>> SignalEvaluateWithHttpInfoAsync(SignalEvaluateRequest signalEvaluateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'signalEvaluateRequest' is set
            if (signalEvaluateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'signalEvaluateRequest' when calling PlaidApi->SignalEvaluate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = signalEvaluateRequest;

            localVarRequestOptions.Operation = "PlaidApi.SignalEvaluate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SignalEvaluateResponse>("/signal/evaluate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignalEvaluate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Report a return for an ACH transaction Call the &#x60;/signal/return/report&#x60; endpoint to report a returned transaction that was previously sent to the &#x60;/signal/evaluate&#x60; endpoint. Your feedback will be used by the foo to incorporate the latest risk trend in your portfolio.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signalReturnReportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SignalReturnReportResponse</returns>
        public SignalReturnReportResponse SignalReturnReport(SignalReturnReportRequest signalReturnReportRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<SignalReturnReportResponse> localVarResponse = SignalReturnReportWithHttpInfo(signalReturnReportRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Report a return for an ACH transaction Call the &#x60;/signal/return/report&#x60; endpoint to report a returned transaction that was previously sent to the &#x60;/signal/evaluate&#x60; endpoint. Your feedback will be used by the foo to incorporate the latest risk trend in your portfolio.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signalReturnReportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SignalReturnReportResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<SignalReturnReportResponse> SignalReturnReportWithHttpInfo(SignalReturnReportRequest signalReturnReportRequest, int operationIndex = 0)
        {
            // verify the required parameter 'signalReturnReportRequest' is set
            if (signalReturnReportRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'signalReturnReportRequest' when calling PlaidApi->SignalReturnReport");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = signalReturnReportRequest;

            localVarRequestOptions.Operation = "PlaidApi.SignalReturnReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SignalReturnReportResponse>("/signal/return/report", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignalReturnReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Report a return for an ACH transaction Call the &#x60;/signal/return/report&#x60; endpoint to report a returned transaction that was previously sent to the &#x60;/signal/evaluate&#x60; endpoint. Your feedback will be used by the foo to incorporate the latest risk trend in your portfolio.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signalReturnReportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SignalReturnReportResponse</returns>
        public async System.Threading.Tasks.Task<SignalReturnReportResponse> SignalReturnReportAsync(SignalReturnReportRequest signalReturnReportRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SignalReturnReportResponse> localVarResponse = await SignalReturnReportWithHttpInfoAsync(signalReturnReportRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Report a return for an ACH transaction Call the &#x60;/signal/return/report&#x60; endpoint to report a returned transaction that was previously sent to the &#x60;/signal/evaluate&#x60; endpoint. Your feedback will be used by the foo to incorporate the latest risk trend in your portfolio.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signalReturnReportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SignalReturnReportResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SignalReturnReportResponse>> SignalReturnReportWithHttpInfoAsync(SignalReturnReportRequest signalReturnReportRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'signalReturnReportRequest' is set
            if (signalReturnReportRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'signalReturnReportRequest' when calling PlaidApi->SignalReturnReport");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = signalReturnReportRequest;

            localVarRequestOptions.Operation = "PlaidApi.SignalReturnReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SignalReturnReportResponse>("/signal/return/report", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignalReturnReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get transaction data The &#x60;/transactions/get&#x60; endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype &#x60;student&#x60;; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products#investments) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in &#x60;/transactions/get&#x60;.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the &#x60;count&#x60; and &#x60;offset&#x60; parameters in conjunction with the &#x60;total_transactions&#x60; response body field to fetch all available transactions.  Data returned by &#x60;/transactions/get&#x60; will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item&#39;s &#x60;status.transactions.last_successful_update&#x60; field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the &#x60;/transactions/refresh&#x60; endpoint.  Note that data may not be immediately available to &#x60;/transactions/get&#x60;. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with &#x60;transactions&#x60;, or upon the first call to &#x60;/transactions/get&#x60;, if it wasn&#39;t. To be alerted when transaction data is ready to be fetched, listen for the [&#x60;INITIAL_UPDATE&#x60;](https://plaid.com/docs/api/webhooks#transactions-initial_update) and [&#x60;HISTORICAL_UPDATE&#x60;](https://plaid.com/docs/api/webhooks#transactions-historical_update) webhooks. If no transaction history is ready when &#x60;/transactions/get&#x60; is called, it will return a &#x60;PRODUCT_NOT_READY&#x60; error.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionsGetResponse</returns>
        public TransactionsGetResponse TransactionsGet(TransactionsGetRequest transactionsGetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TransactionsGetResponse> localVarResponse = TransactionsGetWithHttpInfo(transactionsGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get transaction data The &#x60;/transactions/get&#x60; endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype &#x60;student&#x60;; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products#investments) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in &#x60;/transactions/get&#x60;.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the &#x60;count&#x60; and &#x60;offset&#x60; parameters in conjunction with the &#x60;total_transactions&#x60; response body field to fetch all available transactions.  Data returned by &#x60;/transactions/get&#x60; will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item&#39;s &#x60;status.transactions.last_successful_update&#x60; field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the &#x60;/transactions/refresh&#x60; endpoint.  Note that data may not be immediately available to &#x60;/transactions/get&#x60;. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with &#x60;transactions&#x60;, or upon the first call to &#x60;/transactions/get&#x60;, if it wasn&#39;t. To be alerted when transaction data is ready to be fetched, listen for the [&#x60;INITIAL_UPDATE&#x60;](https://plaid.com/docs/api/webhooks#transactions-initial_update) and [&#x60;HISTORICAL_UPDATE&#x60;](https://plaid.com/docs/api/webhooks#transactions-historical_update) webhooks. If no transaction history is ready when &#x60;/transactions/get&#x60; is called, it will return a &#x60;PRODUCT_NOT_READY&#x60; error.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionsGetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<TransactionsGetResponse> TransactionsGetWithHttpInfo(TransactionsGetRequest transactionsGetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'transactionsGetRequest' is set
            if (transactionsGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transactionsGetRequest' when calling PlaidApi->TransactionsGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transactionsGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.TransactionsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionsGetResponse>("/transactions/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransactionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get transaction data The &#x60;/transactions/get&#x60; endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype &#x60;student&#x60;; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products#investments) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in &#x60;/transactions/get&#x60;.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the &#x60;count&#x60; and &#x60;offset&#x60; parameters in conjunction with the &#x60;total_transactions&#x60; response body field to fetch all available transactions.  Data returned by &#x60;/transactions/get&#x60; will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item&#39;s &#x60;status.transactions.last_successful_update&#x60; field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the &#x60;/transactions/refresh&#x60; endpoint.  Note that data may not be immediately available to &#x60;/transactions/get&#x60;. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with &#x60;transactions&#x60;, or upon the first call to &#x60;/transactions/get&#x60;, if it wasn&#39;t. To be alerted when transaction data is ready to be fetched, listen for the [&#x60;INITIAL_UPDATE&#x60;](https://plaid.com/docs/api/webhooks#transactions-initial_update) and [&#x60;HISTORICAL_UPDATE&#x60;](https://plaid.com/docs/api/webhooks#transactions-historical_update) webhooks. If no transaction history is ready when &#x60;/transactions/get&#x60; is called, it will return a &#x60;PRODUCT_NOT_READY&#x60; error.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionsGetResponse</returns>
        public async System.Threading.Tasks.Task<TransactionsGetResponse> TransactionsGetAsync(TransactionsGetRequest transactionsGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TransactionsGetResponse> localVarResponse = await TransactionsGetWithHttpInfoAsync(transactionsGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get transaction data The &#x60;/transactions/get&#x60; endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype &#x60;student&#x60;; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products#investments) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in &#x60;/transactions/get&#x60;.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the &#x60;count&#x60; and &#x60;offset&#x60; parameters in conjunction with the &#x60;total_transactions&#x60; response body field to fetch all available transactions.  Data returned by &#x60;/transactions/get&#x60; will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item&#39;s &#x60;status.transactions.last_successful_update&#x60; field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the &#x60;/transactions/refresh&#x60; endpoint.  Note that data may not be immediately available to &#x60;/transactions/get&#x60;. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with &#x60;transactions&#x60;, or upon the first call to &#x60;/transactions/get&#x60;, if it wasn&#39;t. To be alerted when transaction data is ready to be fetched, listen for the [&#x60;INITIAL_UPDATE&#x60;](https://plaid.com/docs/api/webhooks#transactions-initial_update) and [&#x60;HISTORICAL_UPDATE&#x60;](https://plaid.com/docs/api/webhooks#transactions-historical_update) webhooks. If no transaction history is ready when &#x60;/transactions/get&#x60; is called, it will return a &#x60;PRODUCT_NOT_READY&#x60; error.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionsGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionsGetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TransactionsGetResponse>> TransactionsGetWithHttpInfoAsync(TransactionsGetRequest transactionsGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionsGetRequest' is set
            if (transactionsGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transactionsGetRequest' when calling PlaidApi->TransactionsGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transactionsGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.TransactionsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionsGetResponse>("/transactions/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransactionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get streams of recurring transactions The &#x60;/transactions/recurring/get&#x60; endpoint identifies and returns groups of transactions that occur on a regular basis for the inputted Item and accounts.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionsRecurringGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionsRecurringGetResponse</returns>
        public TransactionsRecurringGetResponse TransactionsRecurringGet(TransactionsRecurringGetRequest transactionsRecurringGetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TransactionsRecurringGetResponse> localVarResponse = TransactionsRecurringGetWithHttpInfo(transactionsRecurringGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get streams of recurring transactions The &#x60;/transactions/recurring/get&#x60; endpoint identifies and returns groups of transactions that occur on a regular basis for the inputted Item and accounts.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionsRecurringGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionsRecurringGetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<TransactionsRecurringGetResponse> TransactionsRecurringGetWithHttpInfo(TransactionsRecurringGetRequest transactionsRecurringGetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'transactionsRecurringGetRequest' is set
            if (transactionsRecurringGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transactionsRecurringGetRequest' when calling PlaidApi->TransactionsRecurringGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transactionsRecurringGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.TransactionsRecurringGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionsRecurringGetResponse>("/transactions/recurring/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransactionsRecurringGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get streams of recurring transactions The &#x60;/transactions/recurring/get&#x60; endpoint identifies and returns groups of transactions that occur on a regular basis for the inputted Item and accounts.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionsRecurringGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionsRecurringGetResponse</returns>
        public async System.Threading.Tasks.Task<TransactionsRecurringGetResponse> TransactionsRecurringGetAsync(TransactionsRecurringGetRequest transactionsRecurringGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TransactionsRecurringGetResponse> localVarResponse = await TransactionsRecurringGetWithHttpInfoAsync(transactionsRecurringGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get streams of recurring transactions The &#x60;/transactions/recurring/get&#x60; endpoint identifies and returns groups of transactions that occur on a regular basis for the inputted Item and accounts.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionsRecurringGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionsRecurringGetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TransactionsRecurringGetResponse>> TransactionsRecurringGetWithHttpInfoAsync(TransactionsRecurringGetRequest transactionsRecurringGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionsRecurringGetRequest' is set
            if (transactionsRecurringGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transactionsRecurringGetRequest' when calling PlaidApi->TransactionsRecurringGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transactionsRecurringGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.TransactionsRecurringGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionsRecurringGetResponse>("/transactions/recurring/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransactionsRecurringGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refresh transaction data &#x60;/transactions/refresh&#x60; is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling &#x60;/transactions/refresh&#x60;, Plaid will fire a webhook: [&#x60;TRANSACTIONS_REMOVED&#x60;](https://plaid.com/docs/api/webhooks#deleted-transactions-detected) will be fired if any removed transactions are detected, and [&#x60;DEFAULT_UPDATE&#x60;](https://plaid.com/docs/api/webhooks#transactions-default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling &#x60;/transactions/get&#x60;.  Access to &#x60;/transactions/refresh&#x60; in Production is specific to certain pricing plans. If you cannot access &#x60;/transactions/refresh&#x60; in Production, [contact Sales](https://www.plaid.com/contact) for assistance.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionsRefreshRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionsRefreshResponse</returns>
        public TransactionsRefreshResponse TransactionsRefresh(TransactionsRefreshRequest transactionsRefreshRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TransactionsRefreshResponse> localVarResponse = TransactionsRefreshWithHttpInfo(transactionsRefreshRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh transaction data &#x60;/transactions/refresh&#x60; is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling &#x60;/transactions/refresh&#x60;, Plaid will fire a webhook: [&#x60;TRANSACTIONS_REMOVED&#x60;](https://plaid.com/docs/api/webhooks#deleted-transactions-detected) will be fired if any removed transactions are detected, and [&#x60;DEFAULT_UPDATE&#x60;](https://plaid.com/docs/api/webhooks#transactions-default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling &#x60;/transactions/get&#x60;.  Access to &#x60;/transactions/refresh&#x60; in Production is specific to certain pricing plans. If you cannot access &#x60;/transactions/refresh&#x60; in Production, [contact Sales](https://www.plaid.com/contact) for assistance.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionsRefreshRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionsRefreshResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<TransactionsRefreshResponse> TransactionsRefreshWithHttpInfo(TransactionsRefreshRequest transactionsRefreshRequest, int operationIndex = 0)
        {
            // verify the required parameter 'transactionsRefreshRequest' is set
            if (transactionsRefreshRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transactionsRefreshRequest' when calling PlaidApi->TransactionsRefresh");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transactionsRefreshRequest;

            localVarRequestOptions.Operation = "PlaidApi.TransactionsRefresh";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionsRefreshResponse>("/transactions/refresh", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransactionsRefresh", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refresh transaction data &#x60;/transactions/refresh&#x60; is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling &#x60;/transactions/refresh&#x60;, Plaid will fire a webhook: [&#x60;TRANSACTIONS_REMOVED&#x60;](https://plaid.com/docs/api/webhooks#deleted-transactions-detected) will be fired if any removed transactions are detected, and [&#x60;DEFAULT_UPDATE&#x60;](https://plaid.com/docs/api/webhooks#transactions-default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling &#x60;/transactions/get&#x60;.  Access to &#x60;/transactions/refresh&#x60; in Production is specific to certain pricing plans. If you cannot access &#x60;/transactions/refresh&#x60; in Production, [contact Sales](https://www.plaid.com/contact) for assistance.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionsRefreshRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionsRefreshResponse</returns>
        public async System.Threading.Tasks.Task<TransactionsRefreshResponse> TransactionsRefreshAsync(TransactionsRefreshRequest transactionsRefreshRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TransactionsRefreshResponse> localVarResponse = await TransactionsRefreshWithHttpInfoAsync(transactionsRefreshRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh transaction data &#x60;/transactions/refresh&#x60; is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling &#x60;/transactions/refresh&#x60;, Plaid will fire a webhook: [&#x60;TRANSACTIONS_REMOVED&#x60;](https://plaid.com/docs/api/webhooks#deleted-transactions-detected) will be fired if any removed transactions are detected, and [&#x60;DEFAULT_UPDATE&#x60;](https://plaid.com/docs/api/webhooks#transactions-default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling &#x60;/transactions/get&#x60;.  Access to &#x60;/transactions/refresh&#x60; in Production is specific to certain pricing plans. If you cannot access &#x60;/transactions/refresh&#x60; in Production, [contact Sales](https://www.plaid.com/contact) for assistance.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionsRefreshRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionsRefreshResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TransactionsRefreshResponse>> TransactionsRefreshWithHttpInfoAsync(TransactionsRefreshRequest transactionsRefreshRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionsRefreshRequest' is set
            if (transactionsRefreshRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transactionsRefreshRequest' when calling PlaidApi->TransactionsRefresh");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transactionsRefreshRequest;

            localVarRequestOptions.Operation = "PlaidApi.TransactionsRefresh";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionsRefreshResponse>("/transactions/refresh", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransactionsRefresh", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get incremental transaction updates on an Item The &#x60;/transactions/sync&#x60; endpoint returns item transactions as a set of delta updates. Subsequent calls to the endpoint using the cursor returned in the response will return new added, modified, and removed transactions since the last call to the endpoint  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionsSyncRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionsSyncResponse</returns>
        public TransactionsSyncResponse TransactionsSync(TransactionsSyncRequest transactionsSyncRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TransactionsSyncResponse> localVarResponse = TransactionsSyncWithHttpInfo(transactionsSyncRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get incremental transaction updates on an Item The &#x60;/transactions/sync&#x60; endpoint returns item transactions as a set of delta updates. Subsequent calls to the endpoint using the cursor returned in the response will return new added, modified, and removed transactions since the last call to the endpoint  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionsSyncRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionsSyncResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<TransactionsSyncResponse> TransactionsSyncWithHttpInfo(TransactionsSyncRequest transactionsSyncRequest, int operationIndex = 0)
        {
            // verify the required parameter 'transactionsSyncRequest' is set
            if (transactionsSyncRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transactionsSyncRequest' when calling PlaidApi->TransactionsSync");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transactionsSyncRequest;

            localVarRequestOptions.Operation = "PlaidApi.TransactionsSync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionsSyncResponse>("/transactions/sync", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransactionsSync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get incremental transaction updates on an Item The &#x60;/transactions/sync&#x60; endpoint returns item transactions as a set of delta updates. Subsequent calls to the endpoint using the cursor returned in the response will return new added, modified, and removed transactions since the last call to the endpoint  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionsSyncRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionsSyncResponse</returns>
        public async System.Threading.Tasks.Task<TransactionsSyncResponse> TransactionsSyncAsync(TransactionsSyncRequest transactionsSyncRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TransactionsSyncResponse> localVarResponse = await TransactionsSyncWithHttpInfoAsync(transactionsSyncRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get incremental transaction updates on an Item The &#x60;/transactions/sync&#x60; endpoint returns item transactions as a set of delta updates. Subsequent calls to the endpoint using the cursor returned in the response will return new added, modified, and removed transactions since the last call to the endpoint  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionsSyncRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionsSyncResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TransactionsSyncResponse>> TransactionsSyncWithHttpInfoAsync(TransactionsSyncRequest transactionsSyncRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionsSyncRequest' is set
            if (transactionsSyncRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transactionsSyncRequest' when calling PlaidApi->TransactionsSync");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transactionsSyncRequest;

            localVarRequestOptions.Operation = "PlaidApi.TransactionsSync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionsSyncResponse>("/transactions/sync", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransactionsSync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a transfer authorization Use the &#x60;/transfer/authorization/create&#x60; endpoint to determine transfer failure risk.  In Plaid&#39;s sandbox environment the decisions will be returned as follows:    - To approve a transfer, make an authorization request with an &#x60;amount&#x60; less than the available balance in the account.    - To decline a transfer with the rationale code &#x60;NSF&#x60;, the available balance on the account must be less than the authorization &#x60;amount&#x60;. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code &#x60;RISK&#x60;, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To permit a transfer with the rationale code &#x60;MANUALLY_VERIFIED_ITEM&#x60;, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To permit a transfer with the rationale code &#x60;LOGIN_REQUIRED&#x60;, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).  All username/password combinations other than the ones listed above will result in a decision of permitted and rationale code &#x60;ERROR&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferAuthorizationCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferAuthorizationCreateResponse</returns>
        public TransferAuthorizationCreateResponse TransferAuthorizationCreate(TransferAuthorizationCreateRequest transferAuthorizationCreateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TransferAuthorizationCreateResponse> localVarResponse = TransferAuthorizationCreateWithHttpInfo(transferAuthorizationCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a transfer authorization Use the &#x60;/transfer/authorization/create&#x60; endpoint to determine transfer failure risk.  In Plaid&#39;s sandbox environment the decisions will be returned as follows:    - To approve a transfer, make an authorization request with an &#x60;amount&#x60; less than the available balance in the account.    - To decline a transfer with the rationale code &#x60;NSF&#x60;, the available balance on the account must be less than the authorization &#x60;amount&#x60;. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code &#x60;RISK&#x60;, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To permit a transfer with the rationale code &#x60;MANUALLY_VERIFIED_ITEM&#x60;, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To permit a transfer with the rationale code &#x60;LOGIN_REQUIRED&#x60;, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).  All username/password combinations other than the ones listed above will result in a decision of permitted and rationale code &#x60;ERROR&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferAuthorizationCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferAuthorizationCreateResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<TransferAuthorizationCreateResponse> TransferAuthorizationCreateWithHttpInfo(TransferAuthorizationCreateRequest transferAuthorizationCreateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'transferAuthorizationCreateRequest' is set
            if (transferAuthorizationCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transferAuthorizationCreateRequest' when calling PlaidApi->TransferAuthorizationCreate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transferAuthorizationCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.TransferAuthorizationCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransferAuthorizationCreateResponse>("/transfer/authorization/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferAuthorizationCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a transfer authorization Use the &#x60;/transfer/authorization/create&#x60; endpoint to determine transfer failure risk.  In Plaid&#39;s sandbox environment the decisions will be returned as follows:    - To approve a transfer, make an authorization request with an &#x60;amount&#x60; less than the available balance in the account.    - To decline a transfer with the rationale code &#x60;NSF&#x60;, the available balance on the account must be less than the authorization &#x60;amount&#x60;. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code &#x60;RISK&#x60;, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To permit a transfer with the rationale code &#x60;MANUALLY_VERIFIED_ITEM&#x60;, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To permit a transfer with the rationale code &#x60;LOGIN_REQUIRED&#x60;, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).  All username/password combinations other than the ones listed above will result in a decision of permitted and rationale code &#x60;ERROR&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferAuthorizationCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferAuthorizationCreateResponse</returns>
        public async System.Threading.Tasks.Task<TransferAuthorizationCreateResponse> TransferAuthorizationCreateAsync(TransferAuthorizationCreateRequest transferAuthorizationCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TransferAuthorizationCreateResponse> localVarResponse = await TransferAuthorizationCreateWithHttpInfoAsync(transferAuthorizationCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a transfer authorization Use the &#x60;/transfer/authorization/create&#x60; endpoint to determine transfer failure risk.  In Plaid&#39;s sandbox environment the decisions will be returned as follows:    - To approve a transfer, make an authorization request with an &#x60;amount&#x60; less than the available balance in the account.    - To decline a transfer with the rationale code &#x60;NSF&#x60;, the available balance on the account must be less than the authorization &#x60;amount&#x60;. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code &#x60;RISK&#x60;, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To permit a transfer with the rationale code &#x60;MANUALLY_VERIFIED_ITEM&#x60;, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To permit a transfer with the rationale code &#x60;LOGIN_REQUIRED&#x60;, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).  All username/password combinations other than the ones listed above will result in a decision of permitted and rationale code &#x60;ERROR&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferAuthorizationCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferAuthorizationCreateResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TransferAuthorizationCreateResponse>> TransferAuthorizationCreateWithHttpInfoAsync(TransferAuthorizationCreateRequest transferAuthorizationCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transferAuthorizationCreateRequest' is set
            if (transferAuthorizationCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transferAuthorizationCreateRequest' when calling PlaidApi->TransferAuthorizationCreate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transferAuthorizationCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.TransferAuthorizationCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TransferAuthorizationCreateResponse>("/transfer/authorization/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferAuthorizationCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel a transfer Use the &#x60;/transfer/cancel&#x60; endpoint to cancel a transfer.  A transfer is eligible for cancelation if the &#x60;cancellable&#x60; property returned by &#x60;/transfer/get&#x60; is &#x60;true&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferCancelRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferCancelResponse</returns>
        public TransferCancelResponse TransferCancel(TransferCancelRequest transferCancelRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TransferCancelResponse> localVarResponse = TransferCancelWithHttpInfo(transferCancelRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel a transfer Use the &#x60;/transfer/cancel&#x60; endpoint to cancel a transfer.  A transfer is eligible for cancelation if the &#x60;cancellable&#x60; property returned by &#x60;/transfer/get&#x60; is &#x60;true&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferCancelRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferCancelResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<TransferCancelResponse> TransferCancelWithHttpInfo(TransferCancelRequest transferCancelRequest, int operationIndex = 0)
        {
            // verify the required parameter 'transferCancelRequest' is set
            if (transferCancelRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transferCancelRequest' when calling PlaidApi->TransferCancel");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transferCancelRequest;

            localVarRequestOptions.Operation = "PlaidApi.TransferCancel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransferCancelResponse>("/transfer/cancel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferCancel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel a transfer Use the &#x60;/transfer/cancel&#x60; endpoint to cancel a transfer.  A transfer is eligible for cancelation if the &#x60;cancellable&#x60; property returned by &#x60;/transfer/get&#x60; is &#x60;true&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferCancelRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferCancelResponse</returns>
        public async System.Threading.Tasks.Task<TransferCancelResponse> TransferCancelAsync(TransferCancelRequest transferCancelRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TransferCancelResponse> localVarResponse = await TransferCancelWithHttpInfoAsync(transferCancelRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel a transfer Use the &#x60;/transfer/cancel&#x60; endpoint to cancel a transfer.  A transfer is eligible for cancelation if the &#x60;cancellable&#x60; property returned by &#x60;/transfer/get&#x60; is &#x60;true&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferCancelRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferCancelResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TransferCancelResponse>> TransferCancelWithHttpInfoAsync(TransferCancelRequest transferCancelRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transferCancelRequest' is set
            if (transferCancelRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transferCancelRequest' when calling PlaidApi->TransferCancel");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transferCancelRequest;

            localVarRequestOptions.Operation = "PlaidApi.TransferCancel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TransferCancelResponse>("/transfer/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferCancel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a transfer Use the &#x60;/transfer/create&#x60; endpoint to initiate a new transfer.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferCreateResponse</returns>
        public TransferCreateResponse TransferCreate(TransferCreateRequest transferCreateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TransferCreateResponse> localVarResponse = TransferCreateWithHttpInfo(transferCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a transfer Use the &#x60;/transfer/create&#x60; endpoint to initiate a new transfer.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferCreateResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<TransferCreateResponse> TransferCreateWithHttpInfo(TransferCreateRequest transferCreateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'transferCreateRequest' is set
            if (transferCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transferCreateRequest' when calling PlaidApi->TransferCreate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transferCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.TransferCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransferCreateResponse>("/transfer/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a transfer Use the &#x60;/transfer/create&#x60; endpoint to initiate a new transfer.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferCreateResponse</returns>
        public async System.Threading.Tasks.Task<TransferCreateResponse> TransferCreateAsync(TransferCreateRequest transferCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TransferCreateResponse> localVarResponse = await TransferCreateWithHttpInfoAsync(transferCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a transfer Use the &#x60;/transfer/create&#x60; endpoint to initiate a new transfer.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferCreateResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TransferCreateResponse>> TransferCreateWithHttpInfoAsync(TransferCreateRequest transferCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transferCreateRequest' is set
            if (transferCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transferCreateRequest' when calling PlaidApi->TransferCreate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transferCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.TransferCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TransferCreateResponse>("/transfer/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List transfer events Use the &#x60;/transfer/event/list&#x60; endpoint to get a list of transfer events based on specified filter criteria.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferEventListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferEventListResponse</returns>
        public TransferEventListResponse TransferEventList(TransferEventListRequest transferEventListRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TransferEventListResponse> localVarResponse = TransferEventListWithHttpInfo(transferEventListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List transfer events Use the &#x60;/transfer/event/list&#x60; endpoint to get a list of transfer events based on specified filter criteria.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferEventListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferEventListResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<TransferEventListResponse> TransferEventListWithHttpInfo(TransferEventListRequest transferEventListRequest, int operationIndex = 0)
        {
            // verify the required parameter 'transferEventListRequest' is set
            if (transferEventListRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transferEventListRequest' when calling PlaidApi->TransferEventList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transferEventListRequest;

            localVarRequestOptions.Operation = "PlaidApi.TransferEventList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransferEventListResponse>("/transfer/event/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferEventList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List transfer events Use the &#x60;/transfer/event/list&#x60; endpoint to get a list of transfer events based on specified filter criteria.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferEventListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferEventListResponse</returns>
        public async System.Threading.Tasks.Task<TransferEventListResponse> TransferEventListAsync(TransferEventListRequest transferEventListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TransferEventListResponse> localVarResponse = await TransferEventListWithHttpInfoAsync(transferEventListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List transfer events Use the &#x60;/transfer/event/list&#x60; endpoint to get a list of transfer events based on specified filter criteria.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferEventListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferEventListResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TransferEventListResponse>> TransferEventListWithHttpInfoAsync(TransferEventListRequest transferEventListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transferEventListRequest' is set
            if (transferEventListRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transferEventListRequest' when calling PlaidApi->TransferEventList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transferEventListRequest;

            localVarRequestOptions.Operation = "PlaidApi.TransferEventList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TransferEventListResponse>("/transfer/event/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferEventList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sync transfer events &#x60;/transfer/event/sync&#x60; allows you to request up to the next 25 transfer events that happened after a specific &#x60;event_id&#x60;. Use the &#x60;/transfer/event/sync&#x60; endpoint to guarantee you have seen all transfer events.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferEventSyncRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferEventSyncResponse</returns>
        public TransferEventSyncResponse TransferEventSync(TransferEventSyncRequest transferEventSyncRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TransferEventSyncResponse> localVarResponse = TransferEventSyncWithHttpInfo(transferEventSyncRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sync transfer events &#x60;/transfer/event/sync&#x60; allows you to request up to the next 25 transfer events that happened after a specific &#x60;event_id&#x60;. Use the &#x60;/transfer/event/sync&#x60; endpoint to guarantee you have seen all transfer events.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferEventSyncRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferEventSyncResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<TransferEventSyncResponse> TransferEventSyncWithHttpInfo(TransferEventSyncRequest transferEventSyncRequest, int operationIndex = 0)
        {
            // verify the required parameter 'transferEventSyncRequest' is set
            if (transferEventSyncRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transferEventSyncRequest' when calling PlaidApi->TransferEventSync");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transferEventSyncRequest;

            localVarRequestOptions.Operation = "PlaidApi.TransferEventSync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransferEventSyncResponse>("/transfer/event/sync", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferEventSync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sync transfer events &#x60;/transfer/event/sync&#x60; allows you to request up to the next 25 transfer events that happened after a specific &#x60;event_id&#x60;. Use the &#x60;/transfer/event/sync&#x60; endpoint to guarantee you have seen all transfer events.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferEventSyncRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferEventSyncResponse</returns>
        public async System.Threading.Tasks.Task<TransferEventSyncResponse> TransferEventSyncAsync(TransferEventSyncRequest transferEventSyncRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TransferEventSyncResponse> localVarResponse = await TransferEventSyncWithHttpInfoAsync(transferEventSyncRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sync transfer events &#x60;/transfer/event/sync&#x60; allows you to request up to the next 25 transfer events that happened after a specific &#x60;event_id&#x60;. Use the &#x60;/transfer/event/sync&#x60; endpoint to guarantee you have seen all transfer events.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferEventSyncRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferEventSyncResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TransferEventSyncResponse>> TransferEventSyncWithHttpInfoAsync(TransferEventSyncRequest transferEventSyncRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transferEventSyncRequest' is set
            if (transferEventSyncRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transferEventSyncRequest' when calling PlaidApi->TransferEventSync");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transferEventSyncRequest;

            localVarRequestOptions.Operation = "PlaidApi.TransferEventSync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TransferEventSyncResponse>("/transfer/event/sync", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferEventSync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a transfer The &#x60;/transfer/get&#x60; fetches information about the transfer corresponding to the given &#x60;transfer_id&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferGetResponse</returns>
        public TransferGetResponse TransferGet(TransferGetRequest transferGetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TransferGetResponse> localVarResponse = TransferGetWithHttpInfo(transferGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a transfer The &#x60;/transfer/get&#x60; fetches information about the transfer corresponding to the given &#x60;transfer_id&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferGetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<TransferGetResponse> TransferGetWithHttpInfo(TransferGetRequest transferGetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'transferGetRequest' is set
            if (transferGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transferGetRequest' when calling PlaidApi->TransferGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transferGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.TransferGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransferGetResponse>("/transfer/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a transfer The &#x60;/transfer/get&#x60; fetches information about the transfer corresponding to the given &#x60;transfer_id&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferGetResponse</returns>
        public async System.Threading.Tasks.Task<TransferGetResponse> TransferGetAsync(TransferGetRequest transferGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TransferGetResponse> localVarResponse = await TransferGetWithHttpInfoAsync(transferGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a transfer The &#x60;/transfer/get&#x60; fetches information about the transfer corresponding to the given &#x60;transfer_id&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferGetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TransferGetResponse>> TransferGetWithHttpInfoAsync(TransferGetRequest transferGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transferGetRequest' is set
            if (transferGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transferGetRequest' when calling PlaidApi->TransferGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transferGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.TransferGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TransferGetResponse>("/transfer/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a transfer intent object to invoke the Transfer UI Use the &#x60;/transfer/intent/create&#x60; endpoint to generate a transfer intent object and invoke the Transfer UI.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferIntentCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferIntentCreateResponse</returns>
        public TransferIntentCreateResponse TransferIntentCreate(TransferIntentCreateRequest transferIntentCreateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TransferIntentCreateResponse> localVarResponse = TransferIntentCreateWithHttpInfo(transferIntentCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a transfer intent object to invoke the Transfer UI Use the &#x60;/transfer/intent/create&#x60; endpoint to generate a transfer intent object and invoke the Transfer UI.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferIntentCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferIntentCreateResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<TransferIntentCreateResponse> TransferIntentCreateWithHttpInfo(TransferIntentCreateRequest transferIntentCreateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'transferIntentCreateRequest' is set
            if (transferIntentCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transferIntentCreateRequest' when calling PlaidApi->TransferIntentCreate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transferIntentCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.TransferIntentCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransferIntentCreateResponse>("/transfer/intent/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferIntentCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a transfer intent object to invoke the Transfer UI Use the &#x60;/transfer/intent/create&#x60; endpoint to generate a transfer intent object and invoke the Transfer UI.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferIntentCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferIntentCreateResponse</returns>
        public async System.Threading.Tasks.Task<TransferIntentCreateResponse> TransferIntentCreateAsync(TransferIntentCreateRequest transferIntentCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TransferIntentCreateResponse> localVarResponse = await TransferIntentCreateWithHttpInfoAsync(transferIntentCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a transfer intent object to invoke the Transfer UI Use the &#x60;/transfer/intent/create&#x60; endpoint to generate a transfer intent object and invoke the Transfer UI.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferIntentCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferIntentCreateResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TransferIntentCreateResponse>> TransferIntentCreateWithHttpInfoAsync(TransferIntentCreateRequest transferIntentCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transferIntentCreateRequest' is set
            if (transferIntentCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transferIntentCreateRequest' when calling PlaidApi->TransferIntentCreate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transferIntentCreateRequest;

            localVarRequestOptions.Operation = "PlaidApi.TransferIntentCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TransferIntentCreateResponse>("/transfer/intent/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferIntentCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve more information about a transfer intent Use the &#x60;/transfer/intent/get&#x60; endpoint to retrieve more information about a transfer intent.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferIntentGetResponse</returns>
        public TransferIntentGetResponse TransferIntentGet(Dictionary<string, Object> requestBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TransferIntentGetResponse> localVarResponse = TransferIntentGetWithHttpInfo(requestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve more information about a transfer intent Use the &#x60;/transfer/intent/get&#x60; endpoint to retrieve more information about a transfer intent.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferIntentGetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<TransferIntentGetResponse> TransferIntentGetWithHttpInfo(Dictionary<string, Object> requestBody, int operationIndex = 0)
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestBody' when calling PlaidApi->TransferIntentGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "PlaidApi.TransferIntentGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransferIntentGetResponse>("/transfer/intent/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferIntentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve more information about a transfer intent Use the &#x60;/transfer/intent/get&#x60; endpoint to retrieve more information about a transfer intent.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferIntentGetResponse</returns>
        public async System.Threading.Tasks.Task<TransferIntentGetResponse> TransferIntentGetAsync(Dictionary<string, Object> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TransferIntentGetResponse> localVarResponse = await TransferIntentGetWithHttpInfoAsync(requestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve more information about a transfer intent Use the &#x60;/transfer/intent/get&#x60; endpoint to retrieve more information about a transfer intent.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferIntentGetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TransferIntentGetResponse>> TransferIntentGetWithHttpInfoAsync(Dictionary<string, Object> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestBody' when calling PlaidApi->TransferIntentGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "PlaidApi.TransferIntentGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TransferIntentGetResponse>("/transfer/intent/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferIntentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List transfers Use the &#x60;/transfer/list&#x60; endpoint to see a list of all your transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired transfers. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferListResponse</returns>
        public TransferListResponse TransferList(TransferListRequest transferListRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TransferListResponse> localVarResponse = TransferListWithHttpInfo(transferListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List transfers Use the &#x60;/transfer/list&#x60; endpoint to see a list of all your transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired transfers. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferListResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<TransferListResponse> TransferListWithHttpInfo(TransferListRequest transferListRequest, int operationIndex = 0)
        {
            // verify the required parameter 'transferListRequest' is set
            if (transferListRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transferListRequest' when calling PlaidApi->TransferList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transferListRequest;

            localVarRequestOptions.Operation = "PlaidApi.TransferList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransferListResponse>("/transfer/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List transfers Use the &#x60;/transfer/list&#x60; endpoint to see a list of all your transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired transfers. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferListResponse</returns>
        public async System.Threading.Tasks.Task<TransferListResponse> TransferListAsync(TransferListRequest transferListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TransferListResponse> localVarResponse = await TransferListWithHttpInfoAsync(transferListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List transfers Use the &#x60;/transfer/list&#x60; endpoint to see a list of all your transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired transfers. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferListResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TransferListResponse>> TransferListWithHttpInfoAsync(TransferListRequest transferListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transferListRequest' is set
            if (transferListRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transferListRequest' when calling PlaidApi->TransferList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transferListRequest;

            localVarRequestOptions.Operation = "PlaidApi.TransferList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TransferListResponse>("/transfer/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists historical repayments The &#x60;/transfer/repayment/list&#x60; endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given &#x60;start_time&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRepaymentListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferRepaymentListResponse</returns>
        public TransferRepaymentListResponse TransferRepaymentList(TransferRepaymentListRequest transferRepaymentListRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TransferRepaymentListResponse> localVarResponse = TransferRepaymentListWithHttpInfo(transferRepaymentListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lists historical repayments The &#x60;/transfer/repayment/list&#x60; endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given &#x60;start_time&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRepaymentListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferRepaymentListResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<TransferRepaymentListResponse> TransferRepaymentListWithHttpInfo(TransferRepaymentListRequest transferRepaymentListRequest, int operationIndex = 0)
        {
            // verify the required parameter 'transferRepaymentListRequest' is set
            if (transferRepaymentListRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transferRepaymentListRequest' when calling PlaidApi->TransferRepaymentList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transferRepaymentListRequest;

            localVarRequestOptions.Operation = "PlaidApi.TransferRepaymentList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransferRepaymentListResponse>("/transfer/repayment/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferRepaymentList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists historical repayments The &#x60;/transfer/repayment/list&#x60; endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given &#x60;start_time&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRepaymentListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferRepaymentListResponse</returns>
        public async System.Threading.Tasks.Task<TransferRepaymentListResponse> TransferRepaymentListAsync(TransferRepaymentListRequest transferRepaymentListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TransferRepaymentListResponse> localVarResponse = await TransferRepaymentListWithHttpInfoAsync(transferRepaymentListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lists historical repayments The &#x60;/transfer/repayment/list&#x60; endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given &#x60;start_time&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRepaymentListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferRepaymentListResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TransferRepaymentListResponse>> TransferRepaymentListWithHttpInfoAsync(TransferRepaymentListRequest transferRepaymentListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transferRepaymentListRequest' is set
            if (transferRepaymentListRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transferRepaymentListRequest' when calling PlaidApi->TransferRepaymentList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transferRepaymentListRequest;

            localVarRequestOptions.Operation = "PlaidApi.TransferRepaymentList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TransferRepaymentListResponse>("/transfer/repayment/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferRepaymentList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the returns included in a repayment The &#x60;/transfer/repayment/return/list&#x60; endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRepaymentReturnListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferRepaymentReturnListResponse</returns>
        public TransferRepaymentReturnListResponse TransferRepaymentReturnList(TransferRepaymentReturnListRequest transferRepaymentReturnListRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TransferRepaymentReturnListResponse> localVarResponse = TransferRepaymentReturnListWithHttpInfo(transferRepaymentReturnListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the returns included in a repayment The &#x60;/transfer/repayment/return/list&#x60; endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRepaymentReturnListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferRepaymentReturnListResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<TransferRepaymentReturnListResponse> TransferRepaymentReturnListWithHttpInfo(TransferRepaymentReturnListRequest transferRepaymentReturnListRequest, int operationIndex = 0)
        {
            // verify the required parameter 'transferRepaymentReturnListRequest' is set
            if (transferRepaymentReturnListRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transferRepaymentReturnListRequest' when calling PlaidApi->TransferRepaymentReturnList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transferRepaymentReturnListRequest;

            localVarRequestOptions.Operation = "PlaidApi.TransferRepaymentReturnList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransferRepaymentReturnListResponse>("/transfer/repayment/return/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferRepaymentReturnList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the returns included in a repayment The &#x60;/transfer/repayment/return/list&#x60; endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRepaymentReturnListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferRepaymentReturnListResponse</returns>
        public async System.Threading.Tasks.Task<TransferRepaymentReturnListResponse> TransferRepaymentReturnListAsync(TransferRepaymentReturnListRequest transferRepaymentReturnListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TransferRepaymentReturnListResponse> localVarResponse = await TransferRepaymentReturnListWithHttpInfoAsync(transferRepaymentReturnListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the returns included in a repayment The &#x60;/transfer/repayment/return/list&#x60; endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferRepaymentReturnListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferRepaymentReturnListResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TransferRepaymentReturnListResponse>> TransferRepaymentReturnListWithHttpInfoAsync(TransferRepaymentReturnListRequest transferRepaymentReturnListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transferRepaymentReturnListRequest' is set
            if (transferRepaymentReturnListRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transferRepaymentReturnListRequest' when calling PlaidApi->TransferRepaymentReturnList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transferRepaymentReturnListRequest;

            localVarRequestOptions.Operation = "PlaidApi.TransferRepaymentReturnList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TransferRepaymentReturnListResponse>("/transfer/repayment/return/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferRepaymentReturnList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a sweep The &#x60;/transfer/sweep/get&#x60; endpoint fetches a sweep corresponding to the given &#x60;sweep_id&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSweepGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferSweepGetResponse</returns>
        public TransferSweepGetResponse TransferSweepGet(TransferSweepGetRequest transferSweepGetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TransferSweepGetResponse> localVarResponse = TransferSweepGetWithHttpInfo(transferSweepGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a sweep The &#x60;/transfer/sweep/get&#x60; endpoint fetches a sweep corresponding to the given &#x60;sweep_id&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSweepGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferSweepGetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<TransferSweepGetResponse> TransferSweepGetWithHttpInfo(TransferSweepGetRequest transferSweepGetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'transferSweepGetRequest' is set
            if (transferSweepGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transferSweepGetRequest' when calling PlaidApi->TransferSweepGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transferSweepGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.TransferSweepGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransferSweepGetResponse>("/transfer/sweep/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferSweepGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a sweep The &#x60;/transfer/sweep/get&#x60; endpoint fetches a sweep corresponding to the given &#x60;sweep_id&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSweepGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferSweepGetResponse</returns>
        public async System.Threading.Tasks.Task<TransferSweepGetResponse> TransferSweepGetAsync(TransferSweepGetRequest transferSweepGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TransferSweepGetResponse> localVarResponse = await TransferSweepGetWithHttpInfoAsync(transferSweepGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a sweep The &#x60;/transfer/sweep/get&#x60; endpoint fetches a sweep corresponding to the given &#x60;sweep_id&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSweepGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferSweepGetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TransferSweepGetResponse>> TransferSweepGetWithHttpInfoAsync(TransferSweepGetRequest transferSweepGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transferSweepGetRequest' is set
            if (transferSweepGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transferSweepGetRequest' when calling PlaidApi->TransferSweepGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transferSweepGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.TransferSweepGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TransferSweepGetResponse>("/transfer/sweep/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferSweepGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List sweeps The &#x60;/transfer/sweep/list&#x60; endpoint fetches sweeps matching the given filters.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSweepListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferSweepListResponse</returns>
        public TransferSweepListResponse TransferSweepList(TransferSweepListRequest transferSweepListRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TransferSweepListResponse> localVarResponse = TransferSweepListWithHttpInfo(transferSweepListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List sweeps The &#x60;/transfer/sweep/list&#x60; endpoint fetches sweeps matching the given filters.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSweepListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferSweepListResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<TransferSweepListResponse> TransferSweepListWithHttpInfo(TransferSweepListRequest transferSweepListRequest, int operationIndex = 0)
        {
            // verify the required parameter 'transferSweepListRequest' is set
            if (transferSweepListRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transferSweepListRequest' when calling PlaidApi->TransferSweepList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transferSweepListRequest;

            localVarRequestOptions.Operation = "PlaidApi.TransferSweepList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransferSweepListResponse>("/transfer/sweep/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferSweepList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List sweeps The &#x60;/transfer/sweep/list&#x60; endpoint fetches sweeps matching the given filters.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSweepListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferSweepListResponse</returns>
        public async System.Threading.Tasks.Task<TransferSweepListResponse> TransferSweepListAsync(TransferSweepListRequest transferSweepListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TransferSweepListResponse> localVarResponse = await TransferSweepListWithHttpInfoAsync(transferSweepListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List sweeps The &#x60;/transfer/sweep/list&#x60; endpoint fetches sweeps matching the given filters.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSweepListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferSweepListResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TransferSweepListResponse>> TransferSweepListWithHttpInfoAsync(TransferSweepListRequest transferSweepListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transferSweepListRequest' is set
            if (transferSweepListRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transferSweepListRequest' when calling PlaidApi->TransferSweepList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transferSweepListRequest;

            localVarRequestOptions.Operation = "PlaidApi.TransferSweepList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TransferSweepListResponse>("/transfer/sweep/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferSweepList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch an e-wallet Fetch an e-wallet. The response includes the current balance. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WalletGetResponse</returns>
        public WalletGetResponse WalletGet(WalletGetRequest walletGetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<WalletGetResponse> localVarResponse = WalletGetWithHttpInfo(walletGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch an e-wallet Fetch an e-wallet. The response includes the current balance. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WalletGetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<WalletGetResponse> WalletGetWithHttpInfo(WalletGetRequest walletGetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'walletGetRequest' is set
            if (walletGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'walletGetRequest' when calling PlaidApi->WalletGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = walletGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.WalletGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<WalletGetResponse>("/wallet/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch an e-wallet Fetch an e-wallet. The response includes the current balance. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletGetResponse</returns>
        public async System.Threading.Tasks.Task<WalletGetResponse> WalletGetAsync(WalletGetRequest walletGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<WalletGetResponse> localVarResponse = await WalletGetWithHttpInfoAsync(walletGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch an e-wallet Fetch an e-wallet. The response includes the current balance. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletGetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<WalletGetResponse>> WalletGetWithHttpInfoAsync(WalletGetRequest walletGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'walletGetRequest' is set
            if (walletGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'walletGetRequest' when calling PlaidApi->WalletGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = walletGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.WalletGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<WalletGetResponse>("/wallet/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Execute a transaction using an e-wallet Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate payouts, the amount and reference for the payout. The payouts are executed over the Faster Payment rails, where settlement usually only takes a few seconds. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionExecuteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WalletTransactionExecuteResponse</returns>
        public WalletTransactionExecuteResponse WalletTransactionExecute(WalletTransactionExecuteRequest walletTransactionExecuteRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<WalletTransactionExecuteResponse> localVarResponse = WalletTransactionExecuteWithHttpInfo(walletTransactionExecuteRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Execute a transaction using an e-wallet Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate payouts, the amount and reference for the payout. The payouts are executed over the Faster Payment rails, where settlement usually only takes a few seconds. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionExecuteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WalletTransactionExecuteResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<WalletTransactionExecuteResponse> WalletTransactionExecuteWithHttpInfo(WalletTransactionExecuteRequest walletTransactionExecuteRequest, int operationIndex = 0)
        {
            // verify the required parameter 'walletTransactionExecuteRequest' is set
            if (walletTransactionExecuteRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'walletTransactionExecuteRequest' when calling PlaidApi->WalletTransactionExecute");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = walletTransactionExecuteRequest;

            localVarRequestOptions.Operation = "PlaidApi.WalletTransactionExecute";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<WalletTransactionExecuteResponse>("/wallet/transaction/execute", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletTransactionExecute", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Execute a transaction using an e-wallet Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate payouts, the amount and reference for the payout. The payouts are executed over the Faster Payment rails, where settlement usually only takes a few seconds. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionExecuteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletTransactionExecuteResponse</returns>
        public async System.Threading.Tasks.Task<WalletTransactionExecuteResponse> WalletTransactionExecuteAsync(WalletTransactionExecuteRequest walletTransactionExecuteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<WalletTransactionExecuteResponse> localVarResponse = await WalletTransactionExecuteWithHttpInfoAsync(walletTransactionExecuteRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Execute a transaction using an e-wallet Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate payouts, the amount and reference for the payout. The payouts are executed over the Faster Payment rails, where settlement usually only takes a few seconds. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionExecuteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletTransactionExecuteResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<WalletTransactionExecuteResponse>> WalletTransactionExecuteWithHttpInfoAsync(WalletTransactionExecuteRequest walletTransactionExecuteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'walletTransactionExecuteRequest' is set
            if (walletTransactionExecuteRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'walletTransactionExecuteRequest' when calling PlaidApi->WalletTransactionExecute");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = walletTransactionExecuteRequest;

            localVarRequestOptions.Operation = "PlaidApi.WalletTransactionExecute";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<WalletTransactionExecuteResponse>("/wallet/transaction/execute", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletTransactionExecute", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List e-wallet transactions This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the &#x60;created_at&#x60; time. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionsListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WalletTransactionsListResponse</returns>
        public WalletTransactionsListResponse WalletTransactionsList(WalletTransactionsListRequest walletTransactionsListRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<WalletTransactionsListResponse> localVarResponse = WalletTransactionsListWithHttpInfo(walletTransactionsListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List e-wallet transactions This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the &#x60;created_at&#x60; time. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionsListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WalletTransactionsListResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<WalletTransactionsListResponse> WalletTransactionsListWithHttpInfo(WalletTransactionsListRequest walletTransactionsListRequest, int operationIndex = 0)
        {
            // verify the required parameter 'walletTransactionsListRequest' is set
            if (walletTransactionsListRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'walletTransactionsListRequest' when calling PlaidApi->WalletTransactionsList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = walletTransactionsListRequest;

            localVarRequestOptions.Operation = "PlaidApi.WalletTransactionsList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<WalletTransactionsListResponse>("/wallet/transactions/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletTransactionsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List e-wallet transactions This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the &#x60;created_at&#x60; time. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionsListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WalletTransactionsListResponse</returns>
        public async System.Threading.Tasks.Task<WalletTransactionsListResponse> WalletTransactionsListAsync(WalletTransactionsListRequest walletTransactionsListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<WalletTransactionsListResponse> localVarResponse = await WalletTransactionsListWithHttpInfoAsync(walletTransactionsListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List e-wallet transactions This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the &#x60;created_at&#x60; time. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionsListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WalletTransactionsListResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<WalletTransactionsListResponse>> WalletTransactionsListWithHttpInfoAsync(WalletTransactionsListRequest walletTransactionsListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'walletTransactionsListRequest' is set
            if (walletTransactionsListRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'walletTransactionsListRequest' when calling PlaidApi->WalletTransactionsList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = walletTransactionsListRequest;

            localVarRequestOptions.Operation = "PlaidApi.WalletTransactionsList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<WalletTransactionsListResponse>("/wallet/transactions/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WalletTransactionsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get webhook verification key Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the &#x60;Plaid-Verification&#x60; header.  The &#x60;/webhook_verification_key/get&#x60; endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookVerificationKeyGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookVerificationKeyGetResponse</returns>
        public WebhookVerificationKeyGetResponse WebhookVerificationKeyGet(WebhookVerificationKeyGetRequest webhookVerificationKeyGetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<WebhookVerificationKeyGetResponse> localVarResponse = WebhookVerificationKeyGetWithHttpInfo(webhookVerificationKeyGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get webhook verification key Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the &#x60;Plaid-Verification&#x60; header.  The &#x60;/webhook_verification_key/get&#x60; endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookVerificationKeyGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookVerificationKeyGetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<WebhookVerificationKeyGetResponse> WebhookVerificationKeyGetWithHttpInfo(WebhookVerificationKeyGetRequest webhookVerificationKeyGetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'webhookVerificationKeyGetRequest' is set
            if (webhookVerificationKeyGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'webhookVerificationKeyGetRequest' when calling PlaidApi->WebhookVerificationKeyGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = webhookVerificationKeyGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.WebhookVerificationKeyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<WebhookVerificationKeyGetResponse>("/webhook_verification_key/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookVerificationKeyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get webhook verification key Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the &#x60;Plaid-Verification&#x60; header.  The &#x60;/webhook_verification_key/get&#x60; endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookVerificationKeyGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookVerificationKeyGetResponse</returns>
        public async System.Threading.Tasks.Task<WebhookVerificationKeyGetResponse> WebhookVerificationKeyGetAsync(WebhookVerificationKeyGetRequest webhookVerificationKeyGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<WebhookVerificationKeyGetResponse> localVarResponse = await WebhookVerificationKeyGetWithHttpInfoAsync(webhookVerificationKeyGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get webhook verification key Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the &#x60;Plaid-Verification&#x60; header.  The &#x60;/webhook_verification_key/get&#x60; endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookVerificationKeyGetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookVerificationKeyGetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<WebhookVerificationKeyGetResponse>> WebhookVerificationKeyGetWithHttpInfoAsync(WebhookVerificationKeyGetRequest webhookVerificationKeyGetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'webhookVerificationKeyGetRequest' is set
            if (webhookVerificationKeyGetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'webhookVerificationKeyGetRequest' when calling PlaidApi->WebhookVerificationKeyGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = webhookVerificationKeyGetRequest;

            localVarRequestOptions.Operation = "PlaidApi.WebhookVerificationKeyGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (clientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-CLIENT-ID", this.Configuration.GetApiKeyWithPrefix("PLAID-CLIENT-ID"));
            }
            // authentication (plaidVersion) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Plaid-Version")))
            {
                localVarRequestOptions.HeaderParameters.Add("Plaid-Version", this.Configuration.GetApiKeyWithPrefix("Plaid-Version"));
            }
            // authentication (secret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET")))
            {
                localVarRequestOptions.HeaderParameters.Add("PLAID-SECRET", this.Configuration.GetApiKeyWithPrefix("PLAID-SECRET"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<WebhookVerificationKeyGetResponse>("/webhook_verification_key/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookVerificationKeyGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
