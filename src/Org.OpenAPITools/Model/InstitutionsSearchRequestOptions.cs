/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// An optional object to filter &#x60;/institutions/search&#x60; results.
    /// </summary>
    [DataContract(Name = "InstitutionsSearchRequestOptions")]
    public partial class InstitutionsSearchRequestOptions : IEquatable<InstitutionsSearchRequestOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstitutionsSearchRequestOptions" /> class.
        /// </summary>
        /// <param name="oauth">Limit results to institutions with or without OAuth login flows..</param>
        /// <param name="includeOptionalMetadata">When true, return the institution&#39;s homepage URL, logo and primary brand color..</param>
        /// <param name="includeAuthMetadata">When &#x60;true&#x60;, returns metadata related to the Auth product indicating which auth methods are supported. (default to false).</param>
        /// <param name="includePaymentInitiationMetadata">When &#x60;true&#x60;, returns metadata related to the Payment Initiation product indicating which payment configurations are supported. (default to false).</param>
        /// <param name="paymentInitiation">paymentInitiation.</param>
        public InstitutionsSearchRequestOptions(bool? oauth = default(bool?), bool includeOptionalMetadata = default(bool), bool? includeAuthMetadata = false, bool? includePaymentInitiationMetadata = false, InstitutionsSearchPaymentInitiationOptions paymentInitiation = default(InstitutionsSearchPaymentInitiationOptions))
        {
            this.Oauth = oauth;
            this.IncludeOptionalMetadata = includeOptionalMetadata;
            // use default value if no "includeAuthMetadata" provided
            this.IncludeAuthMetadata = includeAuthMetadata ?? false;
            // use default value if no "includePaymentInitiationMetadata" provided
            this.IncludePaymentInitiationMetadata = includePaymentInitiationMetadata ?? false;
            this.PaymentInitiation = paymentInitiation;
        }

        /// <summary>
        /// Limit results to institutions with or without OAuth login flows.
        /// </summary>
        /// <value>Limit results to institutions with or without OAuth login flows.</value>
        [DataMember(Name = "oauth", EmitDefaultValue = true)]
        public bool? Oauth { get; set; }

        /// <summary>
        /// When true, return the institution&#39;s homepage URL, logo and primary brand color.
        /// </summary>
        /// <value>When true, return the institution&#39;s homepage URL, logo and primary brand color.</value>
        [DataMember(Name = "include_optional_metadata", EmitDefaultValue = true)]
        public bool IncludeOptionalMetadata { get; set; }

        /// <summary>
        /// When &#x60;true&#x60;, returns metadata related to the Auth product indicating which auth methods are supported.
        /// </summary>
        /// <value>When &#x60;true&#x60;, returns metadata related to the Auth product indicating which auth methods are supported.</value>
        [DataMember(Name = "include_auth_metadata", EmitDefaultValue = true)]
        public bool? IncludeAuthMetadata { get; set; }

        /// <summary>
        /// When &#x60;true&#x60;, returns metadata related to the Payment Initiation product indicating which payment configurations are supported.
        /// </summary>
        /// <value>When &#x60;true&#x60;, returns metadata related to the Payment Initiation product indicating which payment configurations are supported.</value>
        [DataMember(Name = "include_payment_initiation_metadata", EmitDefaultValue = true)]
        public bool? IncludePaymentInitiationMetadata { get; set; }

        /// <summary>
        /// Gets or Sets PaymentInitiation
        /// </summary>
        [DataMember(Name = "payment_initiation", EmitDefaultValue = true)]
        public InstitutionsSearchPaymentInitiationOptions PaymentInitiation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InstitutionsSearchRequestOptions {\n");
            sb.Append("  Oauth: ").Append(Oauth).Append("\n");
            sb.Append("  IncludeOptionalMetadata: ").Append(IncludeOptionalMetadata).Append("\n");
            sb.Append("  IncludeAuthMetadata: ").Append(IncludeAuthMetadata).Append("\n");
            sb.Append("  IncludePaymentInitiationMetadata: ").Append(IncludePaymentInitiationMetadata).Append("\n");
            sb.Append("  PaymentInitiation: ").Append(PaymentInitiation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InstitutionsSearchRequestOptions);
        }

        /// <summary>
        /// Returns true if InstitutionsSearchRequestOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of InstitutionsSearchRequestOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstitutionsSearchRequestOptions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Oauth == input.Oauth ||
                    (this.Oauth != null &&
                    this.Oauth.Equals(input.Oauth))
                ) && 
                (
                    this.IncludeOptionalMetadata == input.IncludeOptionalMetadata ||
                    this.IncludeOptionalMetadata.Equals(input.IncludeOptionalMetadata)
                ) && 
                (
                    this.IncludeAuthMetadata == input.IncludeAuthMetadata ||
                    (this.IncludeAuthMetadata != null &&
                    this.IncludeAuthMetadata.Equals(input.IncludeAuthMetadata))
                ) && 
                (
                    this.IncludePaymentInitiationMetadata == input.IncludePaymentInitiationMetadata ||
                    (this.IncludePaymentInitiationMetadata != null &&
                    this.IncludePaymentInitiationMetadata.Equals(input.IncludePaymentInitiationMetadata))
                ) && 
                (
                    this.PaymentInitiation == input.PaymentInitiation ||
                    (this.PaymentInitiation != null &&
                    this.PaymentInitiation.Equals(input.PaymentInitiation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Oauth != null)
                {
                    hashCode = (hashCode * 59) + this.Oauth.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IncludeOptionalMetadata.GetHashCode();
                if (this.IncludeAuthMetadata != null)
                {
                    hashCode = (hashCode * 59) + this.IncludeAuthMetadata.GetHashCode();
                }
                if (this.IncludePaymentInitiationMetadata != null)
                {
                    hashCode = (hashCode * 59) + this.IncludePaymentInitiationMetadata.GetHashCode();
                }
                if (this.PaymentInitiation != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentInitiation.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
