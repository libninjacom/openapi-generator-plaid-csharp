/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Data about the owner or owners of an account. Any fields not specified will be filled in with default Sandbox information.
    /// </summary>
    [DataContract(Name = "OwnerOverride")]
    public partial class OwnerOverride : Dictionary<String, Object>, IEquatable<OwnerOverride>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OwnerOverride" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OwnerOverride()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="OwnerOverride" /> class.
        /// </summary>
        /// <param name="names">A list of names associated with the account by the financial institution. These should always be the names of individuals, even for business accounts. Note that the same name data will be used for all accounts associated with an Item. (required).</param>
        /// <param name="phoneNumbers">A list of phone numbers associated with the account. (required).</param>
        /// <param name="emails">A list of email addresses associated with the account. (required).</param>
        /// <param name="addresses">Data about the various addresses associated with the account. (required).</param>
        public OwnerOverride(List<string> names = default(List<string>), List<PhoneNumber> phoneNumbers = default(List<PhoneNumber>), List<Email> emails = default(List<Email>), List<Address> addresses = default(List<Address>)) : base()
        {
            // to ensure "names" is required (not null)
            if (names == null)
            {
                throw new ArgumentNullException("names is a required property for OwnerOverride and cannot be null");
            }
            this.Names = names;
            // to ensure "phoneNumbers" is required (not null)
            if (phoneNumbers == null)
            {
                throw new ArgumentNullException("phoneNumbers is a required property for OwnerOverride and cannot be null");
            }
            this.PhoneNumbers = phoneNumbers;
            // to ensure "emails" is required (not null)
            if (emails == null)
            {
                throw new ArgumentNullException("emails is a required property for OwnerOverride and cannot be null");
            }
            this.Emails = emails;
            // to ensure "addresses" is required (not null)
            if (addresses == null)
            {
                throw new ArgumentNullException("addresses is a required property for OwnerOverride and cannot be null");
            }
            this.Addresses = addresses;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// A list of names associated with the account by the financial institution. These should always be the names of individuals, even for business accounts. Note that the same name data will be used for all accounts associated with an Item.
        /// </summary>
        /// <value>A list of names associated with the account by the financial institution. These should always be the names of individuals, even for business accounts. Note that the same name data will be used for all accounts associated with an Item.</value>
        [DataMember(Name = "names", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Names { get; set; }

        /// <summary>
        /// A list of phone numbers associated with the account.
        /// </summary>
        /// <value>A list of phone numbers associated with the account.</value>
        [DataMember(Name = "phone_numbers", IsRequired = true, EmitDefaultValue = false)]
        public List<PhoneNumber> PhoneNumbers { get; set; }

        /// <summary>
        /// A list of email addresses associated with the account.
        /// </summary>
        /// <value>A list of email addresses associated with the account.</value>
        [DataMember(Name = "emails", IsRequired = true, EmitDefaultValue = false)]
        public List<Email> Emails { get; set; }

        /// <summary>
        /// Data about the various addresses associated with the account.
        /// </summary>
        /// <value>Data about the various addresses associated with the account.</value>
        [DataMember(Name = "addresses", IsRequired = true, EmitDefaultValue = false)]
        public List<Address> Addresses { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OwnerOverride {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Names: ").Append(Names).Append("\n");
            sb.Append("  PhoneNumbers: ").Append(PhoneNumbers).Append("\n");
            sb.Append("  Emails: ").Append(Emails).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OwnerOverride);
        }

        /// <summary>
        /// Returns true if OwnerOverride instances are equal
        /// </summary>
        /// <param name="input">Instance of OwnerOverride to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OwnerOverride input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Names == input.Names ||
                    this.Names != null &&
                    input.Names != null &&
                    this.Names.SequenceEqual(input.Names)
                ) && base.Equals(input) && 
                (
                    this.PhoneNumbers == input.PhoneNumbers ||
                    this.PhoneNumbers != null &&
                    input.PhoneNumbers != null &&
                    this.PhoneNumbers.SequenceEqual(input.PhoneNumbers)
                ) && base.Equals(input) && 
                (
                    this.Emails == input.Emails ||
                    this.Emails != null &&
                    input.Emails != null &&
                    this.Emails.SequenceEqual(input.Emails)
                ) && base.Equals(input) && 
                (
                    this.Addresses == input.Addresses ||
                    this.Addresses != null &&
                    input.Addresses != null &&
                    this.Addresses.SequenceEqual(input.Addresses)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Names != null)
                {
                    hashCode = (hashCode * 59) + this.Names.GetHashCode();
                }
                if (this.PhoneNumbers != null)
                {
                    hashCode = (hashCode * 59) + this.PhoneNumbers.GetHashCode();
                }
                if (this.Emails != null)
                {
                    hashCode = (hashCode * 59) + this.Emails.GetHashCode();
                }
                if (this.Addresses != null)
                {
                    hashCode = (hashCode * 59) + this.Addresses.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
