/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Information describing the intent of the transaction. Most relevant for personal finance use cases, but not limited to such use cases. The field is currently in beta.  The complete category can be generated by concatenating primary and detailed categories.  This feature is currently in beta â€“ to request access, contact transactions-feedback@plaid.com.
    /// </summary>
    [DataContract(Name = "PersonalFinanceCategory")]
    public partial class PersonalFinanceCategory : Dictionary<String, Object>, IEquatable<PersonalFinanceCategory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonalFinanceCategory" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PersonalFinanceCategory()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonalFinanceCategory" /> class.
        /// </summary>
        /// <param name="primary">A high level category that communicates the broad category of the transaction. (required).</param>
        /// <param name="detailed">Provides additional granularity to the primary categorization. (required).</param>
        public PersonalFinanceCategory(string primary = default(string), string detailed = default(string)) : base()
        {
            // to ensure "primary" is required (not null)
            if (primary == null)
            {
                throw new ArgumentNullException("primary is a required property for PersonalFinanceCategory and cannot be null");
            }
            this.Primary = primary;
            // to ensure "detailed" is required (not null)
            if (detailed == null)
            {
                throw new ArgumentNullException("detailed is a required property for PersonalFinanceCategory and cannot be null");
            }
            this.Detailed = detailed;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// A high level category that communicates the broad category of the transaction.
        /// </summary>
        /// <value>A high level category that communicates the broad category of the transaction.</value>
        [DataMember(Name = "primary", IsRequired = true, EmitDefaultValue = false)]
        public string Primary { get; set; }

        /// <summary>
        /// Provides additional granularity to the primary categorization.
        /// </summary>
        /// <value>Provides additional granularity to the primary categorization.</value>
        [DataMember(Name = "detailed", IsRequired = true, EmitDefaultValue = false)]
        public string Detailed { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PersonalFinanceCategory {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Primary: ").Append(Primary).Append("\n");
            sb.Append("  Detailed: ").Append(Detailed).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PersonalFinanceCategory);
        }

        /// <summary>
        /// Returns true if PersonalFinanceCategory instances are equal
        /// </summary>
        /// <param name="input">Instance of PersonalFinanceCategory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PersonalFinanceCategory input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Primary == input.Primary ||
                    (this.Primary != null &&
                    this.Primary.Equals(input.Primary))
                ) && base.Equals(input) && 
                (
                    this.Detailed == input.Detailed ||
                    (this.Detailed != null &&
                    this.Detailed.Equals(input.Detailed))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Primary != null)
                {
                    hashCode = (hashCode * 59) + this.Primary.GetHashCode();
                }
                if (this.Detailed != null)
                {
                    hashCode = (hashCode * 59) + this.Detailed.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
