/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The scopes object
    /// </summary>
    [DataContract(Name = "Scopes")]
    public partial class Scopes : IEquatable<Scopes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Scopes" /> class.
        /// </summary>
        /// <param name="productAccess">productAccess.</param>
        /// <param name="accounts">accounts.</param>
        /// <param name="newAccounts">Allow access to newly opened accounts as they are opened. If unset, defaults to &#x60;true&#x60;. (default to true).</param>
        public Scopes(ProductAccess productAccess = default(ProductAccess), List<AccountAccess> accounts = default(List<AccountAccess>), bool? newAccounts = true)
        {
            this.ProductAccess = productAccess;
            this.Accounts = accounts;
            // use default value if no "newAccounts" provided
            this.NewAccounts = newAccounts ?? true;
        }

        /// <summary>
        /// Gets or Sets ProductAccess
        /// </summary>
        [DataMember(Name = "product_access", EmitDefaultValue = false)]
        public ProductAccess ProductAccess { get; set; }

        /// <summary>
        /// Gets or Sets Accounts
        /// </summary>
        [DataMember(Name = "accounts", EmitDefaultValue = false)]
        public List<AccountAccess> Accounts { get; set; }

        /// <summary>
        /// Allow access to newly opened accounts as they are opened. If unset, defaults to &#x60;true&#x60;.
        /// </summary>
        /// <value>Allow access to newly opened accounts as they are opened. If unset, defaults to &#x60;true&#x60;.</value>
        [DataMember(Name = "new_accounts", EmitDefaultValue = true)]
        public bool? NewAccounts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Scopes {\n");
            sb.Append("  ProductAccess: ").Append(ProductAccess).Append("\n");
            sb.Append("  Accounts: ").Append(Accounts).Append("\n");
            sb.Append("  NewAccounts: ").Append(NewAccounts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Scopes);
        }

        /// <summary>
        /// Returns true if Scopes instances are equal
        /// </summary>
        /// <param name="input">Instance of Scopes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Scopes input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ProductAccess == input.ProductAccess ||
                    (this.ProductAccess != null &&
                    this.ProductAccess.Equals(input.ProductAccess))
                ) && 
                (
                    this.Accounts == input.Accounts ||
                    this.Accounts != null &&
                    input.Accounts != null &&
                    this.Accounts.SequenceEqual(input.Accounts)
                ) && 
                (
                    this.NewAccounts == input.NewAccounts ||
                    (this.NewAccounts != null &&
                    this.NewAccounts.Equals(input.NewAccounts))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProductAccess != null)
                {
                    hashCode = (hashCode * 59) + this.ProductAccess.GetHashCode();
                }
                if (this.Accounts != null)
                {
                    hashCode = (hashCode * 59) + this.Accounts.GetHashCode();
                }
                if (this.NewAccounts != null)
                {
                    hashCode = (hashCode * 59) + this.NewAccounts.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
