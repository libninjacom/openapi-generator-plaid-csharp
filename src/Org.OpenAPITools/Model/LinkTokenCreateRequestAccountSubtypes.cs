/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// By default, Link will only display account types that are compatible with all products supplied in the &#x60;products&#x60; parameter of &#x60;/link/token/create&#x60;. You can further limit the accounts shown in Link by using &#x60;account_filters&#x60; to specify the account subtypes to be shown in Link. Only the specified subtypes will be shown. This filtering applies to both the Account Select view (if enabled) and the Institution Select view. Institutions that do not support the selected subtypes will be omitted from Link. To indicate that all subtypes should be shown, use the value &#x60;\&quot;all\&quot;&#x60;. If the &#x60;account_filters&#x60; filter is used, any account type for which a filter is not specified will be entirely omitted from Link.  For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).  For institutions using OAuth, the filter will not affect the list of institutions or accounts shown by the bank in the OAuth window. 
    /// </summary>
    [DataContract(Name = "LinkTokenCreateRequestAccountSubtypes")]
    public partial class LinkTokenCreateRequestAccountSubtypes : IEquatable<LinkTokenCreateRequestAccountSubtypes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkTokenCreateRequestAccountSubtypes" /> class.
        /// </summary>
        /// <param name="depository">depository.</param>
        /// <param name="credit">credit.</param>
        /// <param name="loan">loan.</param>
        /// <param name="investment">investment.</param>
        public LinkTokenCreateRequestAccountSubtypes(LinkTokenCreateDepositoryFilter depository = default(LinkTokenCreateDepositoryFilter), LinkTokenCreateCreditFilter credit = default(LinkTokenCreateCreditFilter), LinkTokenCreateLoanFilter loan = default(LinkTokenCreateLoanFilter), LinkTokenCreateInvestmentFilter investment = default(LinkTokenCreateInvestmentFilter))
        {
            this.Depository = depository;
            this.Credit = credit;
            this.Loan = loan;
            this.Investment = investment;
        }

        /// <summary>
        /// Gets or Sets Depository
        /// </summary>
        [DataMember(Name = "depository", EmitDefaultValue = false)]
        public LinkTokenCreateDepositoryFilter Depository { get; set; }

        /// <summary>
        /// Gets or Sets Credit
        /// </summary>
        [DataMember(Name = "credit", EmitDefaultValue = false)]
        public LinkTokenCreateCreditFilter Credit { get; set; }

        /// <summary>
        /// Gets or Sets Loan
        /// </summary>
        [DataMember(Name = "loan", EmitDefaultValue = false)]
        public LinkTokenCreateLoanFilter Loan { get; set; }

        /// <summary>
        /// Gets or Sets Investment
        /// </summary>
        [DataMember(Name = "investment", EmitDefaultValue = false)]
        public LinkTokenCreateInvestmentFilter Investment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LinkTokenCreateRequestAccountSubtypes {\n");
            sb.Append("  Depository: ").Append(Depository).Append("\n");
            sb.Append("  Credit: ").Append(Credit).Append("\n");
            sb.Append("  Loan: ").Append(Loan).Append("\n");
            sb.Append("  Investment: ").Append(Investment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LinkTokenCreateRequestAccountSubtypes);
        }

        /// <summary>
        /// Returns true if LinkTokenCreateRequestAccountSubtypes instances are equal
        /// </summary>
        /// <param name="input">Instance of LinkTokenCreateRequestAccountSubtypes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LinkTokenCreateRequestAccountSubtypes input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Depository == input.Depository ||
                    (this.Depository != null &&
                    this.Depository.Equals(input.Depository))
                ) && 
                (
                    this.Credit == input.Credit ||
                    (this.Credit != null &&
                    this.Credit.Equals(input.Credit))
                ) && 
                (
                    this.Loan == input.Loan ||
                    (this.Loan != null &&
                    this.Loan.Equals(input.Loan))
                ) && 
                (
                    this.Investment == input.Investment ||
                    (this.Investment != null &&
                    this.Investment.Equals(input.Investment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Depository != null)
                {
                    hashCode = (hashCode * 59) + this.Depository.GetHashCode();
                }
                if (this.Credit != null)
                {
                    hashCode = (hashCode * 59) + this.Credit.GetHashCode();
                }
                if (this.Loan != null)
                {
                    hashCode = (hashCode * 59) + this.Loan.GetHashCode();
                }
                if (this.Investment != null)
                {
                    hashCode = (hashCode * 59) + this.Investment.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
