/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Valid values for investment transaction types and subtypes. Note that transactions representing inflow of cash will appear as negative amounts, outflow of cash will appear as positive amounts.
    /// </summary>
    [DataContract(Name = "StandaloneInvestmentTransactionType")]
    public partial class StandaloneInvestmentTransactionType : Dictionary<String, Object>, IEquatable<StandaloneInvestmentTransactionType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StandaloneInvestmentTransactionType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StandaloneInvestmentTransactionType()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="StandaloneInvestmentTransactionType" /> class.
        /// </summary>
        /// <param name="buy">Buying an investment (required).</param>
        /// <param name="sell">Selling an investment (required).</param>
        /// <param name="cancel">A cancellation of a pending transaction (required).</param>
        /// <param name="cash">Activity that modifies a cash position (required).</param>
        /// <param name="fee">Fees on the account, e.g. commission, bookkeeping, options-related. (required).</param>
        /// <param name="transfer">Activity that modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer (required).</param>
        public StandaloneInvestmentTransactionType(string buy = default(string), string sell = default(string), string cancel = default(string), string cash = default(string), string fee = default(string), string transfer = default(string)) : base()
        {
            // to ensure "buy" is required (not null)
            if (buy == null)
            {
                throw new ArgumentNullException("buy is a required property for StandaloneInvestmentTransactionType and cannot be null");
            }
            this.Buy = buy;
            // to ensure "sell" is required (not null)
            if (sell == null)
            {
                throw new ArgumentNullException("sell is a required property for StandaloneInvestmentTransactionType and cannot be null");
            }
            this.Sell = sell;
            // to ensure "cancel" is required (not null)
            if (cancel == null)
            {
                throw new ArgumentNullException("cancel is a required property for StandaloneInvestmentTransactionType and cannot be null");
            }
            this.Cancel = cancel;
            // to ensure "cash" is required (not null)
            if (cash == null)
            {
                throw new ArgumentNullException("cash is a required property for StandaloneInvestmentTransactionType and cannot be null");
            }
            this.Cash = cash;
            // to ensure "fee" is required (not null)
            if (fee == null)
            {
                throw new ArgumentNullException("fee is a required property for StandaloneInvestmentTransactionType and cannot be null");
            }
            this.Fee = fee;
            // to ensure "transfer" is required (not null)
            if (transfer == null)
            {
                throw new ArgumentNullException("transfer is a required property for StandaloneInvestmentTransactionType and cannot be null");
            }
            this.Transfer = transfer;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Buying an investment
        /// </summary>
        /// <value>Buying an investment</value>
        [DataMember(Name = "buy", IsRequired = true, EmitDefaultValue = false)]
        public string Buy { get; set; }

        /// <summary>
        /// Selling an investment
        /// </summary>
        /// <value>Selling an investment</value>
        [DataMember(Name = "sell", IsRequired = true, EmitDefaultValue = false)]
        public string Sell { get; set; }

        /// <summary>
        /// A cancellation of a pending transaction
        /// </summary>
        /// <value>A cancellation of a pending transaction</value>
        [DataMember(Name = "cancel", IsRequired = true, EmitDefaultValue = false)]
        public string Cancel { get; set; }

        /// <summary>
        /// Activity that modifies a cash position
        /// </summary>
        /// <value>Activity that modifies a cash position</value>
        [DataMember(Name = "cash", IsRequired = true, EmitDefaultValue = false)]
        public string Cash { get; set; }

        /// <summary>
        /// Fees on the account, e.g. commission, bookkeeping, options-related.
        /// </summary>
        /// <value>Fees on the account, e.g. commission, bookkeeping, options-related.</value>
        [DataMember(Name = "fee", IsRequired = true, EmitDefaultValue = false)]
        public string Fee { get; set; }

        /// <summary>
        /// Activity that modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer
        /// </summary>
        /// <value>Activity that modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer</value>
        [DataMember(Name = "transfer", IsRequired = true, EmitDefaultValue = false)]
        public string Transfer { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StandaloneInvestmentTransactionType {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Buy: ").Append(Buy).Append("\n");
            sb.Append("  Sell: ").Append(Sell).Append("\n");
            sb.Append("  Cancel: ").Append(Cancel).Append("\n");
            sb.Append("  Cash: ").Append(Cash).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  Transfer: ").Append(Transfer).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StandaloneInvestmentTransactionType);
        }

        /// <summary>
        /// Returns true if StandaloneInvestmentTransactionType instances are equal
        /// </summary>
        /// <param name="input">Instance of StandaloneInvestmentTransactionType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StandaloneInvestmentTransactionType input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Buy == input.Buy ||
                    (this.Buy != null &&
                    this.Buy.Equals(input.Buy))
                ) && base.Equals(input) && 
                (
                    this.Sell == input.Sell ||
                    (this.Sell != null &&
                    this.Sell.Equals(input.Sell))
                ) && base.Equals(input) && 
                (
                    this.Cancel == input.Cancel ||
                    (this.Cancel != null &&
                    this.Cancel.Equals(input.Cancel))
                ) && base.Equals(input) && 
                (
                    this.Cash == input.Cash ||
                    (this.Cash != null &&
                    this.Cash.Equals(input.Cash))
                ) && base.Equals(input) && 
                (
                    this.Fee == input.Fee ||
                    (this.Fee != null &&
                    this.Fee.Equals(input.Fee))
                ) && base.Equals(input) && 
                (
                    this.Transfer == input.Transfer ||
                    (this.Transfer != null &&
                    this.Transfer.Equals(input.Transfer))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Buy != null)
                {
                    hashCode = (hashCode * 59) + this.Buy.GetHashCode();
                }
                if (this.Sell != null)
                {
                    hashCode = (hashCode * 59) + this.Sell.GetHashCode();
                }
                if (this.Cancel != null)
                {
                    hashCode = (hashCode * 59) + this.Cancel.GetHashCode();
                }
                if (this.Cash != null)
                {
                    hashCode = (hashCode * 59) + this.Cash.GetHashCode();
                }
                if (this.Fee != null)
                {
                    hashCode = (hashCode * 59) + this.Fee.GetHashCode();
                }
                if (this.Transfer != null)
                {
                    hashCode = (hashCode * 59) + this.Transfer.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
