/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// An object containing proof of employment data for an individual
    /// </summary>
    [DataContract(Name = "EmploymentVerification")]
    public partial class EmploymentVerification : Dictionary<String, Object>, IEquatable<EmploymentVerification>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        public EmploymentVerificationStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmploymentVerification" /> class.
        /// </summary>
        /// <param name="status">status.</param>
        /// <param name="startDate">Start of employment in ISO 8601 format (YYYY-MM-DD)..</param>
        /// <param name="endDate">End of employment, if applicable. Provided in ISO 8601 format (YYY-MM-DD)..</param>
        /// <param name="employer">employer.</param>
        /// <param name="title">Current title of employee..</param>
        /// <param name="platformIds">platformIds.</param>
        public EmploymentVerification(EmploymentVerificationStatus? status = default(EmploymentVerificationStatus?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), EmployerVerification employer = default(EmployerVerification), string title = default(string), PlatformIds platformIds = default(PlatformIds)) : base()
        {
            this.Status = status;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.Employer = employer;
            this.Title = title;
            this.PlatformIds = platformIds;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Start of employment in ISO 8601 format (YYYY-MM-DD).
        /// </summary>
        /// <value>Start of employment in ISO 8601 format (YYYY-MM-DD).</value>
        [DataMember(Name = "start_date", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// End of employment, if applicable. Provided in ISO 8601 format (YYY-MM-DD).
        /// </summary>
        /// <value>End of employment, if applicable. Provided in ISO 8601 format (YYY-MM-DD).</value>
        [DataMember(Name = "end_date", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets Employer
        /// </summary>
        [DataMember(Name = "employer", EmitDefaultValue = false)]
        public EmployerVerification Employer { get; set; }

        /// <summary>
        /// Current title of employee.
        /// </summary>
        /// <value>Current title of employee.</value>
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets PlatformIds
        /// </summary>
        [DataMember(Name = "platform_ids", EmitDefaultValue = false)]
        public PlatformIds PlatformIds { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmploymentVerification {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Employer: ").Append(Employer).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  PlatformIds: ").Append(PlatformIds).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmploymentVerification);
        }

        /// <summary>
        /// Returns true if EmploymentVerification instances are equal
        /// </summary>
        /// <param name="input">Instance of EmploymentVerification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmploymentVerification input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && base.Equals(input) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && base.Equals(input) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && base.Equals(input) && 
                (
                    this.Employer == input.Employer ||
                    (this.Employer != null &&
                    this.Employer.Equals(input.Employer))
                ) && base.Equals(input) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && base.Equals(input) && 
                (
                    this.PlatformIds == input.PlatformIds ||
                    (this.PlatformIds != null &&
                    this.PlatformIds.Equals(input.PlatformIds))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                if (this.Employer != null)
                {
                    hashCode = (hashCode * 59) + this.Employer.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.PlatformIds != null)
                {
                    hashCode = (hashCode * 59) + this.PlatformIds.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
