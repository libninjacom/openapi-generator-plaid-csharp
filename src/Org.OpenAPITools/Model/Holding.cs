/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A securities holding at an institution.
    /// </summary>
    [DataContract(Name = "Holding")]
    public partial class Holding : Dictionary<String, Object>, IEquatable<Holding>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Holding" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Holding()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Holding" /> class.
        /// </summary>
        /// <param name="accountId">The Plaid &#x60;account_id&#x60; associated with the holding. (required).</param>
        /// <param name="securityId">The Plaid &#x60;security_id&#x60; associated with the holding. (required).</param>
        /// <param name="institutionPrice">The last price given by the institution for this security. (required).</param>
        /// <param name="institutionPriceAsOf">The date at which &#x60;institution_price&#x60; was current. (required).</param>
        /// <param name="institutionValue">The value of the holding, as reported by the institution. (required).</param>
        /// <param name="costBasis">The cost basis of the holding. (required).</param>
        /// <param name="quantity">The total quantity of the asset held, as reported by the financial institution. If the security is an option, &#x60;quantity&#x60; will reflect the total number of options (typically the number of contracts multiplied by 100), not the number of contracts. (required).</param>
        /// <param name="isoCurrencyCode">The ISO-4217 currency code of the holding. Always &#x60;null&#x60; if &#x60;unofficial_currency_code&#x60; is non-&#x60;null&#x60;. (required).</param>
        /// <param name="unofficialCurrencyCode">The unofficial currency code associated with the holding. Always &#x60;null&#x60; if &#x60;iso_currency_code&#x60; is non-&#x60;null&#x60;. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported &#x60;iso_currency_code&#x60;s.  (required).</param>
        public Holding(string accountId = default(string), string securityId = default(string), decimal institutionPrice = default(decimal), DateTime? institutionPriceAsOf = default(DateTime?), decimal institutionValue = default(decimal), decimal? costBasis = default(decimal?), decimal quantity = default(decimal), string isoCurrencyCode = default(string), string unofficialCurrencyCode = default(string)) : base()
        {
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new ArgumentNullException("accountId is a required property for Holding and cannot be null");
            }
            this.AccountId = accountId;
            // to ensure "securityId" is required (not null)
            if (securityId == null)
            {
                throw new ArgumentNullException("securityId is a required property for Holding and cannot be null");
            }
            this.SecurityId = securityId;
            this.InstitutionPrice = institutionPrice;
            // to ensure "institutionPriceAsOf" is required (not null)
            if (institutionPriceAsOf == null)
            {
                throw new ArgumentNullException("institutionPriceAsOf is a required property for Holding and cannot be null");
            }
            this.InstitutionPriceAsOf = institutionPriceAsOf;
            this.InstitutionValue = institutionValue;
            // to ensure "costBasis" is required (not null)
            if (costBasis == null)
            {
                throw new ArgumentNullException("costBasis is a required property for Holding and cannot be null");
            }
            this.CostBasis = costBasis;
            this.Quantity = quantity;
            // to ensure "isoCurrencyCode" is required (not null)
            if (isoCurrencyCode == null)
            {
                throw new ArgumentNullException("isoCurrencyCode is a required property for Holding and cannot be null");
            }
            this.IsoCurrencyCode = isoCurrencyCode;
            // to ensure "unofficialCurrencyCode" is required (not null)
            if (unofficialCurrencyCode == null)
            {
                throw new ArgumentNullException("unofficialCurrencyCode is a required property for Holding and cannot be null");
            }
            this.UnofficialCurrencyCode = unofficialCurrencyCode;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The Plaid &#x60;account_id&#x60; associated with the holding.
        /// </summary>
        /// <value>The Plaid &#x60;account_id&#x60; associated with the holding.</value>
        [DataMember(Name = "account_id", IsRequired = true, EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// The Plaid &#x60;security_id&#x60; associated with the holding.
        /// </summary>
        /// <value>The Plaid &#x60;security_id&#x60; associated with the holding.</value>
        [DataMember(Name = "security_id", IsRequired = true, EmitDefaultValue = false)]
        public string SecurityId { get; set; }

        /// <summary>
        /// The last price given by the institution for this security.
        /// </summary>
        /// <value>The last price given by the institution for this security.</value>
        [DataMember(Name = "institution_price", IsRequired = true, EmitDefaultValue = false)]
        public decimal InstitutionPrice { get; set; }

        /// <summary>
        /// The date at which &#x60;institution_price&#x60; was current.
        /// </summary>
        /// <value>The date at which &#x60;institution_price&#x60; was current.</value>
        [DataMember(Name = "institution_price_as_of", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? InstitutionPriceAsOf { get; set; }

        /// <summary>
        /// The value of the holding, as reported by the institution.
        /// </summary>
        /// <value>The value of the holding, as reported by the institution.</value>
        [DataMember(Name = "institution_value", IsRequired = true, EmitDefaultValue = false)]
        public decimal InstitutionValue { get; set; }

        /// <summary>
        /// The cost basis of the holding.
        /// </summary>
        /// <value>The cost basis of the holding.</value>
        [DataMember(Name = "cost_basis", IsRequired = true, EmitDefaultValue = true)]
        public decimal? CostBasis { get; set; }

        /// <summary>
        /// The total quantity of the asset held, as reported by the financial institution. If the security is an option, &#x60;quantity&#x60; will reflect the total number of options (typically the number of contracts multiplied by 100), not the number of contracts.
        /// </summary>
        /// <value>The total quantity of the asset held, as reported by the financial institution. If the security is an option, &#x60;quantity&#x60; will reflect the total number of options (typically the number of contracts multiplied by 100), not the number of contracts.</value>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = false)]
        public decimal Quantity { get; set; }

        /// <summary>
        /// The ISO-4217 currency code of the holding. Always &#x60;null&#x60; if &#x60;unofficial_currency_code&#x60; is non-&#x60;null&#x60;.
        /// </summary>
        /// <value>The ISO-4217 currency code of the holding. Always &#x60;null&#x60; if &#x60;unofficial_currency_code&#x60; is non-&#x60;null&#x60;.</value>
        [DataMember(Name = "iso_currency_code", IsRequired = true, EmitDefaultValue = true)]
        public string IsoCurrencyCode { get; set; }

        /// <summary>
        /// The unofficial currency code associated with the holding. Always &#x60;null&#x60; if &#x60;iso_currency_code&#x60; is non-&#x60;null&#x60;. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported &#x60;iso_currency_code&#x60;s. 
        /// </summary>
        /// <value>The unofficial currency code associated with the holding. Always &#x60;null&#x60; if &#x60;iso_currency_code&#x60; is non-&#x60;null&#x60;. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported &#x60;iso_currency_code&#x60;s. </value>
        [DataMember(Name = "unofficial_currency_code", IsRequired = true, EmitDefaultValue = true)]
        public string UnofficialCurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Holding {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  SecurityId: ").Append(SecurityId).Append("\n");
            sb.Append("  InstitutionPrice: ").Append(InstitutionPrice).Append("\n");
            sb.Append("  InstitutionPriceAsOf: ").Append(InstitutionPriceAsOf).Append("\n");
            sb.Append("  InstitutionValue: ").Append(InstitutionValue).Append("\n");
            sb.Append("  CostBasis: ").Append(CostBasis).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  IsoCurrencyCode: ").Append(IsoCurrencyCode).Append("\n");
            sb.Append("  UnofficialCurrencyCode: ").Append(UnofficialCurrencyCode).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Holding);
        }

        /// <summary>
        /// Returns true if Holding instances are equal
        /// </summary>
        /// <param name="input">Instance of Holding to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Holding input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && base.Equals(input) && 
                (
                    this.SecurityId == input.SecurityId ||
                    (this.SecurityId != null &&
                    this.SecurityId.Equals(input.SecurityId))
                ) && base.Equals(input) && 
                (
                    this.InstitutionPrice == input.InstitutionPrice ||
                    this.InstitutionPrice.Equals(input.InstitutionPrice)
                ) && base.Equals(input) && 
                (
                    this.InstitutionPriceAsOf == input.InstitutionPriceAsOf ||
                    (this.InstitutionPriceAsOf != null &&
                    this.InstitutionPriceAsOf.Equals(input.InstitutionPriceAsOf))
                ) && base.Equals(input) && 
                (
                    this.InstitutionValue == input.InstitutionValue ||
                    this.InstitutionValue.Equals(input.InstitutionValue)
                ) && base.Equals(input) && 
                (
                    this.CostBasis == input.CostBasis ||
                    (this.CostBasis != null &&
                    this.CostBasis.Equals(input.CostBasis))
                ) && base.Equals(input) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && base.Equals(input) && 
                (
                    this.IsoCurrencyCode == input.IsoCurrencyCode ||
                    (this.IsoCurrencyCode != null &&
                    this.IsoCurrencyCode.Equals(input.IsoCurrencyCode))
                ) && base.Equals(input) && 
                (
                    this.UnofficialCurrencyCode == input.UnofficialCurrencyCode ||
                    (this.UnofficialCurrencyCode != null &&
                    this.UnofficialCurrencyCode.Equals(input.UnofficialCurrencyCode))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                if (this.SecurityId != null)
                {
                    hashCode = (hashCode * 59) + this.SecurityId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InstitutionPrice.GetHashCode();
                if (this.InstitutionPriceAsOf != null)
                {
                    hashCode = (hashCode * 59) + this.InstitutionPriceAsOf.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InstitutionValue.GetHashCode();
                if (this.CostBasis != null)
                {
                    hashCode = (hashCode * 59) + this.CostBasis.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                if (this.IsoCurrencyCode != null)
                {
                    hashCode = (hashCode * 59) + this.IsoCurrencyCode.GetHashCode();
                }
                if (this.UnofficialCurrencyCode != null)
                {
                    hashCode = (hashCode * 59) + this.UnofficialCurrencyCode.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
