/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Risk scoring details broken down by risk category.
    /// </summary>
    [DataContract(Name = "SignalScores")]
    public partial class SignalScores : Dictionary<String, Object>, IEquatable<SignalScores>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SignalScores" /> class.
        /// </summary>
        /// <param name="customerInitiatedReturnRisk">customerInitiatedReturnRisk.</param>
        /// <param name="bankInitiatedReturnRisk">bankInitiatedReturnRisk.</param>
        public SignalScores(CustomerInitiatedReturnRisk customerInitiatedReturnRisk = default(CustomerInitiatedReturnRisk), BankInitiatedReturnRisk bankInitiatedReturnRisk = default(BankInitiatedReturnRisk)) : base()
        {
            this.CustomerInitiatedReturnRisk = customerInitiatedReturnRisk;
            this.BankInitiatedReturnRisk = bankInitiatedReturnRisk;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets CustomerInitiatedReturnRisk
        /// </summary>
        [DataMember(Name = "customer_initiated_return_risk", EmitDefaultValue = false)]
        public CustomerInitiatedReturnRisk CustomerInitiatedReturnRisk { get; set; }

        /// <summary>
        /// Gets or Sets BankInitiatedReturnRisk
        /// </summary>
        [DataMember(Name = "bank_initiated_return_risk", EmitDefaultValue = false)]
        public BankInitiatedReturnRisk BankInitiatedReturnRisk { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SignalScores {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  CustomerInitiatedReturnRisk: ").Append(CustomerInitiatedReturnRisk).Append("\n");
            sb.Append("  BankInitiatedReturnRisk: ").Append(BankInitiatedReturnRisk).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SignalScores);
        }

        /// <summary>
        /// Returns true if SignalScores instances are equal
        /// </summary>
        /// <param name="input">Instance of SignalScores to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignalScores input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.CustomerInitiatedReturnRisk == input.CustomerInitiatedReturnRisk ||
                    (this.CustomerInitiatedReturnRisk != null &&
                    this.CustomerInitiatedReturnRisk.Equals(input.CustomerInitiatedReturnRisk))
                ) && base.Equals(input) && 
                (
                    this.BankInitiatedReturnRisk == input.BankInitiatedReturnRisk ||
                    (this.BankInitiatedReturnRisk != null &&
                    this.BankInitiatedReturnRisk.Equals(input.BankInitiatedReturnRisk))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.CustomerInitiatedReturnRisk != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerInitiatedReturnRisk.GetHashCode();
                }
                if (this.BankInitiatedReturnRisk != null)
                {
                    hashCode = (hashCode * 59) + this.BankInitiatedReturnRisk.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
