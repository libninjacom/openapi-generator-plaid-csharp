/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Scope of required and optional account features or content from a ConnectedApplication.
    /// </summary>
    [DataContract(Name = "RequestedScopes")]
    public partial class RequestedScopes : IEquatable<RequestedScopes>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets AccountSelectionCardinality
        /// </summary>
        [DataMember(Name = "account_selection_cardinality", IsRequired = true, EmitDefaultValue = false)]
        public AccountSelectionCardinality AccountSelectionCardinality { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestedScopes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RequestedScopes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestedScopes" /> class.
        /// </summary>
        /// <param name="accountFilters">accountFilters.</param>
        /// <param name="accountSelectionCardinality">accountSelectionCardinality (required).</param>
        public RequestedScopes(AccountFilter accountFilters = default(AccountFilter), AccountSelectionCardinality accountSelectionCardinality = default(AccountSelectionCardinality))
        {
            this.AccountSelectionCardinality = accountSelectionCardinality;
            this.AccountFilters = accountFilters;
        }

        /// <summary>
        /// Gets or Sets AccountFilters
        /// </summary>
        [DataMember(Name = "account_filters", EmitDefaultValue = false)]
        public AccountFilter AccountFilters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RequestedScopes {\n");
            sb.Append("  AccountFilters: ").Append(AccountFilters).Append("\n");
            sb.Append("  AccountSelectionCardinality: ").Append(AccountSelectionCardinality).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RequestedScopes);
        }

        /// <summary>
        /// Returns true if RequestedScopes instances are equal
        /// </summary>
        /// <param name="input">Instance of RequestedScopes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestedScopes input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountFilters == input.AccountFilters ||
                    (this.AccountFilters != null &&
                    this.AccountFilters.Equals(input.AccountFilters))
                ) && 
                (
                    this.AccountSelectionCardinality == input.AccountSelectionCardinality ||
                    this.AccountSelectionCardinality.Equals(input.AccountSelectionCardinality)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountFilters != null)
                {
                    hashCode = (hashCode * 59) + this.AccountFilters.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AccountSelectionCardinality.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
