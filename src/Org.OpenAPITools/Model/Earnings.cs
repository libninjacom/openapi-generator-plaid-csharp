/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// An object representing both a breakdown of earnings on a paystub and the total earnings.
    /// </summary>
    [DataContract(Name = "Earnings")]
    public partial class Earnings : Dictionary<String, Object>, IEquatable<Earnings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Earnings" /> class.
        /// </summary>
        /// <param name="subtotals">subtotals.</param>
        /// <param name="totals">totals.</param>
        /// <param name="breakdown">breakdown.</param>
        /// <param name="total">total.</param>
        public Earnings(List<EarningsTotal> subtotals = default(List<EarningsTotal>), List<EarningsTotal> totals = default(List<EarningsTotal>), List<EarningsBreakdown> breakdown = default(List<EarningsBreakdown>), EarningsTotal total = default(EarningsTotal)) : base()
        {
            this.Subtotals = subtotals;
            this.Totals = totals;
            this.Breakdown = breakdown;
            this.Total = total;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets Subtotals
        /// </summary>
        [DataMember(Name = "subtotals", EmitDefaultValue = false)]
        [Obsolete]
        public List<EarningsTotal> Subtotals { get; set; }

        /// <summary>
        /// Gets or Sets Totals
        /// </summary>
        [DataMember(Name = "totals", EmitDefaultValue = false)]
        [Obsolete]
        public List<EarningsTotal> Totals { get; set; }

        /// <summary>
        /// Gets or Sets Breakdown
        /// </summary>
        [DataMember(Name = "breakdown", EmitDefaultValue = false)]
        public List<EarningsBreakdown> Breakdown { get; set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        public EarningsTotal Total { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Earnings {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Subtotals: ").Append(Subtotals).Append("\n");
            sb.Append("  Totals: ").Append(Totals).Append("\n");
            sb.Append("  Breakdown: ").Append(Breakdown).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Earnings);
        }

        /// <summary>
        /// Returns true if Earnings instances are equal
        /// </summary>
        /// <param name="input">Instance of Earnings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Earnings input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Subtotals == input.Subtotals ||
                    this.Subtotals != null &&
                    input.Subtotals != null &&
                    this.Subtotals.SequenceEqual(input.Subtotals)
                ) && base.Equals(input) && 
                (
                    this.Totals == input.Totals ||
                    this.Totals != null &&
                    input.Totals != null &&
                    this.Totals.SequenceEqual(input.Totals)
                ) && base.Equals(input) && 
                (
                    this.Breakdown == input.Breakdown ||
                    this.Breakdown != null &&
                    input.Breakdown != null &&
                    this.Breakdown.SequenceEqual(input.Breakdown)
                ) && base.Equals(input) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Subtotals != null)
                {
                    hashCode = (hashCode * 59) + this.Subtotals.GetHashCode();
                }
                if (this.Totals != null)
                {
                    hashCode = (hashCode * 59) + this.Totals.GetHashCode();
                }
                if (this.Breakdown != null)
                {
                    hashCode = (hashCode * 59) + this.Breakdown.GetHashCode();
                }
                if (this.Total != null)
                {
                    hashCode = (hashCode * 59) + this.Total.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
