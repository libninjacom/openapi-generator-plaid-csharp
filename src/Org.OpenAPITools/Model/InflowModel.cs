/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The &#x60;inflow_model&#x60; allows you to foo a test account that receives regular income or make regular payments on a loan. Any transactions generated by the &#x60;inflow_model&#x60; will appear in addition to randomly generated test data or transactions specified by &#x60;override_accounts&#x60;.
    /// </summary>
    [DataContract(Name = "InflowModel")]
    public partial class InflowModel : Dictionary<String, Object>, IEquatable<InflowModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InflowModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InflowModel()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="InflowModel" /> class.
        /// </summary>
        /// <param name="type">Inflow foo. One of the following:  &#x60;none&#x60;: No income  &#x60;monthly-income&#x60;: Income occurs once per month &#x60;monthly-balance-payment&#x60;: Pays off the balance on a liability account at the given statement day of month.  &#x60;monthly-interest-only-payment&#x60;: Makes an interest-only payment on a liability account at the given statement day of month.   Note that account types supported by Liabilities will accrue interest in the Sandbox. The types impacted are account type &#x60;credit&#x60; with subtype &#x60;credit&#x60; or &#x60;paypal&#x60;, and account type &#x60;loan&#x60; with subtype &#x60;student&#x60; or &#x60;mortgage&#x60;. (required).</param>
        /// <param name="incomeAmount">Amount of income per month. This value is required if &#x60;type&#x60; is &#x60;monthly-income&#x60;. (required).</param>
        /// <param name="paymentDayOfMonth">Number between 1 and 28, or &#x60;last&#x60; meaning the last day of the month. The day of the month on which the income transaction will appear. The name of the income transaction. This field is required if &#x60;type&#x60; is &#x60;monthly-income&#x60;, &#x60;monthly-balance-payment&#x60; or &#x60;monthly-interest-only-payment&#x60;. (required).</param>
        /// <param name="transactionName">The name of the income transaction. This field is required if &#x60;type&#x60; is &#x60;monthly-income&#x60;, &#x60;monthly-balance-payment&#x60; or &#x60;monthly-interest-only-payment&#x60;. (required).</param>
        /// <param name="statementDayOfMonth">Number between 1 and 28, or &#x60;last&#x60; meaning the last day of the month. The day of the month on which the balance is calculated for the next payment. The name of the income transaction. This field is required if &#x60;type&#x60; is &#x60;monthly-balance-payment&#x60; or &#x60;monthly-interest-only-payment&#x60;. (required).</param>
        public InflowModel(string type = default(string), decimal incomeAmount = default(decimal), decimal paymentDayOfMonth = default(decimal), string transactionName = default(string), string statementDayOfMonth = default(string)) : base()
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for InflowModel and cannot be null");
            }
            this.Type = type;
            this.IncomeAmount = incomeAmount;
            this.PaymentDayOfMonth = paymentDayOfMonth;
            // to ensure "transactionName" is required (not null)
            if (transactionName == null)
            {
                throw new ArgumentNullException("transactionName is a required property for InflowModel and cannot be null");
            }
            this.TransactionName = transactionName;
            // to ensure "statementDayOfMonth" is required (not null)
            if (statementDayOfMonth == null)
            {
                throw new ArgumentNullException("statementDayOfMonth is a required property for InflowModel and cannot be null");
            }
            this.StatementDayOfMonth = statementDayOfMonth;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Inflow foo. One of the following:  &#x60;none&#x60;: No income  &#x60;monthly-income&#x60;: Income occurs once per month &#x60;monthly-balance-payment&#x60;: Pays off the balance on a liability account at the given statement day of month.  &#x60;monthly-interest-only-payment&#x60;: Makes an interest-only payment on a liability account at the given statement day of month.   Note that account types supported by Liabilities will accrue interest in the Sandbox. The types impacted are account type &#x60;credit&#x60; with subtype &#x60;credit&#x60; or &#x60;paypal&#x60;, and account type &#x60;loan&#x60; with subtype &#x60;student&#x60; or &#x60;mortgage&#x60;.
        /// </summary>
        /// <value>Inflow foo. One of the following:  &#x60;none&#x60;: No income  &#x60;monthly-income&#x60;: Income occurs once per month &#x60;monthly-balance-payment&#x60;: Pays off the balance on a liability account at the given statement day of month.  &#x60;monthly-interest-only-payment&#x60;: Makes an interest-only payment on a liability account at the given statement day of month.   Note that account types supported by Liabilities will accrue interest in the Sandbox. The types impacted are account type &#x60;credit&#x60; with subtype &#x60;credit&#x60; or &#x60;paypal&#x60;, and account type &#x60;loan&#x60; with subtype &#x60;student&#x60; or &#x60;mortgage&#x60;.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Amount of income per month. This value is required if &#x60;type&#x60; is &#x60;monthly-income&#x60;.
        /// </summary>
        /// <value>Amount of income per month. This value is required if &#x60;type&#x60; is &#x60;monthly-income&#x60;.</value>
        [DataMember(Name = "income_amount", IsRequired = true, EmitDefaultValue = false)]
        public decimal IncomeAmount { get; set; }

        /// <summary>
        /// Number between 1 and 28, or &#x60;last&#x60; meaning the last day of the month. The day of the month on which the income transaction will appear. The name of the income transaction. This field is required if &#x60;type&#x60; is &#x60;monthly-income&#x60;, &#x60;monthly-balance-payment&#x60; or &#x60;monthly-interest-only-payment&#x60;.
        /// </summary>
        /// <value>Number between 1 and 28, or &#x60;last&#x60; meaning the last day of the month. The day of the month on which the income transaction will appear. The name of the income transaction. This field is required if &#x60;type&#x60; is &#x60;monthly-income&#x60;, &#x60;monthly-balance-payment&#x60; or &#x60;monthly-interest-only-payment&#x60;.</value>
        [DataMember(Name = "payment_day_of_month", IsRequired = true, EmitDefaultValue = false)]
        public decimal PaymentDayOfMonth { get; set; }

        /// <summary>
        /// The name of the income transaction. This field is required if &#x60;type&#x60; is &#x60;monthly-income&#x60;, &#x60;monthly-balance-payment&#x60; or &#x60;monthly-interest-only-payment&#x60;.
        /// </summary>
        /// <value>The name of the income transaction. This field is required if &#x60;type&#x60; is &#x60;monthly-income&#x60;, &#x60;monthly-balance-payment&#x60; or &#x60;monthly-interest-only-payment&#x60;.</value>
        [DataMember(Name = "transaction_name", IsRequired = true, EmitDefaultValue = false)]
        public string TransactionName { get; set; }

        /// <summary>
        /// Number between 1 and 28, or &#x60;last&#x60; meaning the last day of the month. The day of the month on which the balance is calculated for the next payment. The name of the income transaction. This field is required if &#x60;type&#x60; is &#x60;monthly-balance-payment&#x60; or &#x60;monthly-interest-only-payment&#x60;.
        /// </summary>
        /// <value>Number between 1 and 28, or &#x60;last&#x60; meaning the last day of the month. The day of the month on which the balance is calculated for the next payment. The name of the income transaction. This field is required if &#x60;type&#x60; is &#x60;monthly-balance-payment&#x60; or &#x60;monthly-interest-only-payment&#x60;.</value>
        [DataMember(Name = "statement_day_of_month", IsRequired = true, EmitDefaultValue = false)]
        public string StatementDayOfMonth { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InflowModel {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IncomeAmount: ").Append(IncomeAmount).Append("\n");
            sb.Append("  PaymentDayOfMonth: ").Append(PaymentDayOfMonth).Append("\n");
            sb.Append("  TransactionName: ").Append(TransactionName).Append("\n");
            sb.Append("  StatementDayOfMonth: ").Append(StatementDayOfMonth).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InflowModel);
        }

        /// <summary>
        /// Returns true if InflowModel instances are equal
        /// </summary>
        /// <param name="input">Instance of InflowModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InflowModel input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && base.Equals(input) && 
                (
                    this.IncomeAmount == input.IncomeAmount ||
                    this.IncomeAmount.Equals(input.IncomeAmount)
                ) && base.Equals(input) && 
                (
                    this.PaymentDayOfMonth == input.PaymentDayOfMonth ||
                    this.PaymentDayOfMonth.Equals(input.PaymentDayOfMonth)
                ) && base.Equals(input) && 
                (
                    this.TransactionName == input.TransactionName ||
                    (this.TransactionName != null &&
                    this.TransactionName.Equals(input.TransactionName))
                ) && base.Equals(input) && 
                (
                    this.StatementDayOfMonth == input.StatementDayOfMonth ||
                    (this.StatementDayOfMonth != null &&
                    this.StatementDayOfMonth.Equals(input.StatementDayOfMonth))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IncomeAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.PaymentDayOfMonth.GetHashCode();
                if (this.TransactionName != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionName.GetHashCode();
                }
                if (this.StatementDayOfMonth != null)
                {
                    hashCode = (hashCode * 59) + this.StatementDayOfMonth.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
