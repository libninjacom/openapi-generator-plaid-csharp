/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A representation of a transaction
    /// </summary>
    [DataContract(Name = "Transaction")]
    public partial class Transaction : IEquatable<Transaction>, IValidatableObject
    {
        /// <summary>
        /// Please use the &#x60;payment_channel&#x60; field, &#x60;transaction_type&#x60; will be deprecated in the future.  &#x60;digital:&#x60; transactions that took place online.  &#x60;place:&#x60; transactions that were made at a physical location.  &#x60;special:&#x60; transactions that relate to banks, e.g. fees or deposits.  &#x60;unresolved:&#x60; transactions that do not fit into the other three types. 
        /// </summary>
        /// <value>Please use the &#x60;payment_channel&#x60; field, &#x60;transaction_type&#x60; will be deprecated in the future.  &#x60;digital:&#x60; transactions that took place online.  &#x60;place:&#x60; transactions that were made at a physical location.  &#x60;special:&#x60; transactions that relate to banks, e.g. fees or deposits.  &#x60;unresolved:&#x60; transactions that do not fit into the other three types. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TransactionTypeEnum
        {
            /// <summary>
            /// Enum Digital for value: digital
            /// </summary>
            [EnumMember(Value = "digital")]
            Digital = 1,

            /// <summary>
            /// Enum Place for value: place
            /// </summary>
            [EnumMember(Value = "place")]
            Place = 2,

            /// <summary>
            /// Enum Special for value: special
            /// </summary>
            [EnumMember(Value = "special")]
            Special = 3,

            /// <summary>
            /// Enum Unresolved for value: unresolved
            /// </summary>
            [EnumMember(Value = "unresolved")]
            Unresolved = 4

        }


        /// <summary>
        /// Please use the &#x60;payment_channel&#x60; field, &#x60;transaction_type&#x60; will be deprecated in the future.  &#x60;digital:&#x60; transactions that took place online.  &#x60;place:&#x60; transactions that were made at a physical location.  &#x60;special:&#x60; transactions that relate to banks, e.g. fees or deposits.  &#x60;unresolved:&#x60; transactions that do not fit into the other three types. 
        /// </summary>
        /// <value>Please use the &#x60;payment_channel&#x60; field, &#x60;transaction_type&#x60; will be deprecated in the future.  &#x60;digital:&#x60; transactions that took place online.  &#x60;place:&#x60; transactions that were made at a physical location.  &#x60;special:&#x60; transactions that relate to banks, e.g. fees or deposits.  &#x60;unresolved:&#x60; transactions that do not fit into the other three types. </value>
        [DataMember(Name = "transaction_type", EmitDefaultValue = false)]
        [Obsolete]
        public TransactionTypeEnum? TransactionType { get; set; }
        /// <summary>
        /// The channel used to make a payment. &#x60;online:&#x60; transactions that took place online.  &#x60;in store:&#x60; transactions that were made at a physical location.  &#x60;other:&#x60; transactions that relate to banks, e.g. fees or deposits.  This field replaces the &#x60;transaction_type&#x60; field. 
        /// </summary>
        /// <value>The channel used to make a payment. &#x60;online:&#x60; transactions that took place online.  &#x60;in store:&#x60; transactions that were made at a physical location.  &#x60;other:&#x60; transactions that relate to banks, e.g. fees or deposits.  This field replaces the &#x60;transaction_type&#x60; field. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentChannelEnum
        {
            /// <summary>
            /// Enum Online for value: online
            /// </summary>
            [EnumMember(Value = "online")]
            Online = 1,

            /// <summary>
            /// Enum InStore for value: in store
            /// </summary>
            [EnumMember(Value = "in store")]
            InStore = 2,

            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 3

        }


        /// <summary>
        /// The channel used to make a payment. &#x60;online:&#x60; transactions that took place online.  &#x60;in store:&#x60; transactions that were made at a physical location.  &#x60;other:&#x60; transactions that relate to banks, e.g. fees or deposits.  This field replaces the &#x60;transaction_type&#x60; field. 
        /// </summary>
        /// <value>The channel used to make a payment. &#x60;online:&#x60; transactions that took place online.  &#x60;in store:&#x60; transactions that were made at a physical location.  &#x60;other:&#x60; transactions that relate to banks, e.g. fees or deposits.  This field replaces the &#x60;transaction_type&#x60; field. </value>
        [DataMember(Name = "payment_channel", IsRequired = true, EmitDefaultValue = false)]
        public PaymentChannelEnum PaymentChannel { get; set; }

        /// <summary>
        /// Gets or Sets TransactionCode
        /// </summary>
        [DataMember(Name = "transaction_code", IsRequired = true, EmitDefaultValue = true)]
        public TransactionCode TransactionCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Transaction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Transaction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Transaction" /> class.
        /// </summary>
        /// <param name="transactionType">Please use the &#x60;payment_channel&#x60; field, &#x60;transaction_type&#x60; will be deprecated in the future.  &#x60;digital:&#x60; transactions that took place online.  &#x60;place:&#x60; transactions that were made at a physical location.  &#x60;special:&#x60; transactions that relate to banks, e.g. fees or deposits.  &#x60;unresolved:&#x60; transactions that do not fit into the other three types. .</param>
        /// <param name="pendingTransactionId">The ID of a posted transaction&#39;s associated pending transaction, where applicable. (required).</param>
        /// <param name="categoryId">The ID of the category to which this transaction belongs. For a full list of categories, see [&#x60;/categories/get&#x60;](https://plaid.com/docs/api/products/#categoriesget).  If the &#x60;transactions&#x60; object was returned by an Assets endpoint such as &#x60;/asset_report/get/&#x60; or &#x60;/asset_report/pdf/get&#x60;, this field will only appear in an Asset Report with Insights. (required).</param>
        /// <param name="category">A hierarchical array of the categories to which this transaction belongs. For a full list of categories, see [&#x60;/categories/get&#x60;](https://plaid.com/docs/api/products/#categoriesget).  If the &#x60;transactions&#x60; object was returned by an Assets endpoint such as &#x60;/asset_report/get/&#x60; or &#x60;/asset_report/pdf/get&#x60;, this field will only appear in an Asset Report with Insights. (required).</param>
        /// <param name="location">location (required).</param>
        /// <param name="paymentMeta">paymentMeta (required).</param>
        /// <param name="accountOwner">The name of the account owner. This field is not typically populated and only relevant when dealing with sub-accounts. (required).</param>
        /// <param name="name">The merchant name or transaction description.  If the &#x60;transactions&#x60; object was returned by a Transactions endpoint such as &#x60;/transactions/get&#x60;, this field will always appear. If the &#x60;transactions&#x60; object was returned by an Assets endpoint such as &#x60;/asset_report/get/&#x60; or &#x60;/asset_report/pdf/get&#x60;, this field will only appear in an Asset Report with Insights. (required).</param>
        /// <param name="originalDescription">The string returned by the financial institution to describe the transaction. For transactions returned by &#x60;/transactions/get&#x60;, this field is in beta and will be omitted unless the client is both enrolled in the closed beta program and has set &#x60;options.include_original_description&#x60; to &#x60;true&#x60;..</param>
        /// <param name="accountId">The ID of the account in which this transaction occurred. (required).</param>
        /// <param name="amount">The settled value of the transaction, denominated in the account&#39;s currency, as stated in &#x60;iso_currency_code&#x60; or &#x60;unofficial_currency_code&#x60;. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative. (required).</param>
        /// <param name="isoCurrencyCode">The ISO-4217 currency code of the transaction. Always &#x60;null&#x60; if &#x60;unofficial_currency_code&#x60; is non-null. (required).</param>
        /// <param name="unofficialCurrencyCode">The unofficial currency code associated with the transaction. Always &#x60;null&#x60; if &#x60;iso_currency_code&#x60; is non-&#x60;null&#x60;. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported &#x60;iso_currency_code&#x60;s. (required).</param>
        /// <param name="date">For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted. Both dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( &#x60;YYYY-MM-DD&#x60; ). (required).</param>
        /// <param name="pending">When &#x60;true&#x60;, identifies the transaction as pending or unsettled. Pending transaction details (name, type, amount, category ID) may change before they are settled. (required).</param>
        /// <param name="transactionId">The unique ID of the transaction. Like all Plaid identifiers, the &#x60;transaction_id&#x60; is case sensitive. (required).</param>
        /// <param name="merchantName">The merchant name, as extracted by Plaid from the &#x60;name&#x60; field..</param>
        /// <param name="checkNumber">The check number of the transaction. This field is only populated for check transactions..</param>
        /// <param name="paymentChannel">The channel used to make a payment. &#x60;online:&#x60; transactions that took place online.  &#x60;in store:&#x60; transactions that were made at a physical location.  &#x60;other:&#x60; transactions that relate to banks, e.g. fees or deposits.  This field replaces the &#x60;transaction_type&#x60; field.  (required).</param>
        /// <param name="authorizedDate">The date that the transaction was authorized. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( &#x60;YYYY-MM-DD&#x60; ). The &#x60;authorized_date&#x60; field uses machine learning to determine a transaction date for transactions where the &#x60;date_transacted&#x60; is not available. If the &#x60;date_transacted&#x60; field is present and not &#x60;null&#x60;, the &#x60;authorized_date&#x60; field will have the same value as the &#x60;date_transacted&#x60; field. (required).</param>
        /// <param name="authorizedDatetime">Date and time when a transaction was authorized in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60; ).  This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00). (required).</param>
        /// <param name="datetime">Date and time when a transaction was posted in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60; ).  This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00). (required).</param>
        /// <param name="transactionCode">transactionCode (required).</param>
        /// <param name="personalFinanceCategory">personalFinanceCategory.</param>
        public Transaction(TransactionTypeEnum? transactionType = default(TransactionTypeEnum?), string pendingTransactionId = default(string), string categoryId = default(string), List<string> category = default(List<string>), Location location = default(Location), PaymentMeta paymentMeta = default(PaymentMeta), string accountOwner = default(string), string name = default(string), string originalDescription = default(string), string accountId = default(string), decimal amount = default(decimal), string isoCurrencyCode = default(string), string unofficialCurrencyCode = default(string), DateTime date = default(DateTime), bool pending = default(bool), string transactionId = default(string), string merchantName = default(string), string checkNumber = default(string), PaymentChannelEnum paymentChannel = default(PaymentChannelEnum), DateTime? authorizedDate = default(DateTime?), DateTime? authorizedDatetime = default(DateTime?), DateTime? datetime = default(DateTime?), TransactionCode transactionCode = default(TransactionCode), PersonalFinanceCategory personalFinanceCategory = default(PersonalFinanceCategory))
        {
            // to ensure "pendingTransactionId" is required (not null)
            if (pendingTransactionId == null)
            {
                throw new ArgumentNullException("pendingTransactionId is a required property for Transaction and cannot be null");
            }
            this.PendingTransactionId = pendingTransactionId;
            // to ensure "categoryId" is required (not null)
            if (categoryId == null)
            {
                throw new ArgumentNullException("categoryId is a required property for Transaction and cannot be null");
            }
            this.CategoryId = categoryId;
            // to ensure "category" is required (not null)
            if (category == null)
            {
                throw new ArgumentNullException("category is a required property for Transaction and cannot be null");
            }
            this.Category = category;
            // to ensure "location" is required (not null)
            if (location == null)
            {
                throw new ArgumentNullException("location is a required property for Transaction and cannot be null");
            }
            this.Location = location;
            // to ensure "paymentMeta" is required (not null)
            if (paymentMeta == null)
            {
                throw new ArgumentNullException("paymentMeta is a required property for Transaction and cannot be null");
            }
            this.PaymentMeta = paymentMeta;
            // to ensure "accountOwner" is required (not null)
            if (accountOwner == null)
            {
                throw new ArgumentNullException("accountOwner is a required property for Transaction and cannot be null");
            }
            this.AccountOwner = accountOwner;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Transaction and cannot be null");
            }
            this.Name = name;
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new ArgumentNullException("accountId is a required property for Transaction and cannot be null");
            }
            this.AccountId = accountId;
            this.Amount = amount;
            // to ensure "isoCurrencyCode" is required (not null)
            if (isoCurrencyCode == null)
            {
                throw new ArgumentNullException("isoCurrencyCode is a required property for Transaction and cannot be null");
            }
            this.IsoCurrencyCode = isoCurrencyCode;
            // to ensure "unofficialCurrencyCode" is required (not null)
            if (unofficialCurrencyCode == null)
            {
                throw new ArgumentNullException("unofficialCurrencyCode is a required property for Transaction and cannot be null");
            }
            this.UnofficialCurrencyCode = unofficialCurrencyCode;
            this.Date = date;
            this.Pending = pending;
            // to ensure "transactionId" is required (not null)
            if (transactionId == null)
            {
                throw new ArgumentNullException("transactionId is a required property for Transaction and cannot be null");
            }
            this.TransactionId = transactionId;
            this.PaymentChannel = paymentChannel;
            // to ensure "authorizedDate" is required (not null)
            if (authorizedDate == null)
            {
                throw new ArgumentNullException("authorizedDate is a required property for Transaction and cannot be null");
            }
            this.AuthorizedDate = authorizedDate;
            // to ensure "authorizedDatetime" is required (not null)
            if (authorizedDatetime == null)
            {
                throw new ArgumentNullException("authorizedDatetime is a required property for Transaction and cannot be null");
            }
            this.AuthorizedDatetime = authorizedDatetime;
            // to ensure "datetime" is required (not null)
            if (datetime == null)
            {
                throw new ArgumentNullException("datetime is a required property for Transaction and cannot be null");
            }
            this.Datetime = datetime;
            this.TransactionCode = transactionCode;
            this.TransactionType = transactionType;
            this.OriginalDescription = originalDescription;
            this.MerchantName = merchantName;
            this.CheckNumber = checkNumber;
            this.PersonalFinanceCategory = personalFinanceCategory;
        }

        /// <summary>
        /// The ID of a posted transaction&#39;s associated pending transaction, where applicable.
        /// </summary>
        /// <value>The ID of a posted transaction&#39;s associated pending transaction, where applicable.</value>
        [DataMember(Name = "pending_transaction_id", IsRequired = true, EmitDefaultValue = true)]
        public string PendingTransactionId { get; set; }

        /// <summary>
        /// The ID of the category to which this transaction belongs. For a full list of categories, see [&#x60;/categories/get&#x60;](https://plaid.com/docs/api/products/#categoriesget).  If the &#x60;transactions&#x60; object was returned by an Assets endpoint such as &#x60;/asset_report/get/&#x60; or &#x60;/asset_report/pdf/get&#x60;, this field will only appear in an Asset Report with Insights.
        /// </summary>
        /// <value>The ID of the category to which this transaction belongs. For a full list of categories, see [&#x60;/categories/get&#x60;](https://plaid.com/docs/api/products/#categoriesget).  If the &#x60;transactions&#x60; object was returned by an Assets endpoint such as &#x60;/asset_report/get/&#x60; or &#x60;/asset_report/pdf/get&#x60;, this field will only appear in an Asset Report with Insights.</value>
        [DataMember(Name = "category_id", IsRequired = true, EmitDefaultValue = true)]
        public string CategoryId { get; set; }

        /// <summary>
        /// A hierarchical array of the categories to which this transaction belongs. For a full list of categories, see [&#x60;/categories/get&#x60;](https://plaid.com/docs/api/products/#categoriesget).  If the &#x60;transactions&#x60; object was returned by an Assets endpoint such as &#x60;/asset_report/get/&#x60; or &#x60;/asset_report/pdf/get&#x60;, this field will only appear in an Asset Report with Insights.
        /// </summary>
        /// <value>A hierarchical array of the categories to which this transaction belongs. For a full list of categories, see [&#x60;/categories/get&#x60;](https://plaid.com/docs/api/products/#categoriesget).  If the &#x60;transactions&#x60; object was returned by an Assets endpoint such as &#x60;/asset_report/get/&#x60; or &#x60;/asset_report/pdf/get&#x60;, this field will only appear in an Asset Report with Insights.</value>
        [DataMember(Name = "category", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Category { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", IsRequired = true, EmitDefaultValue = false)]
        public Location Location { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMeta
        /// </summary>
        [DataMember(Name = "payment_meta", IsRequired = true, EmitDefaultValue = false)]
        public PaymentMeta PaymentMeta { get; set; }

        /// <summary>
        /// The name of the account owner. This field is not typically populated and only relevant when dealing with sub-accounts.
        /// </summary>
        /// <value>The name of the account owner. This field is not typically populated and only relevant when dealing with sub-accounts.</value>
        [DataMember(Name = "account_owner", IsRequired = true, EmitDefaultValue = true)]
        public string AccountOwner { get; set; }

        /// <summary>
        /// The merchant name or transaction description.  If the &#x60;transactions&#x60; object was returned by a Transactions endpoint such as &#x60;/transactions/get&#x60;, this field will always appear. If the &#x60;transactions&#x60; object was returned by an Assets endpoint such as &#x60;/asset_report/get/&#x60; or &#x60;/asset_report/pdf/get&#x60;, this field will only appear in an Asset Report with Insights.
        /// </summary>
        /// <value>The merchant name or transaction description.  If the &#x60;transactions&#x60; object was returned by a Transactions endpoint such as &#x60;/transactions/get&#x60;, this field will always appear. If the &#x60;transactions&#x60; object was returned by an Assets endpoint such as &#x60;/asset_report/get/&#x60; or &#x60;/asset_report/pdf/get&#x60;, this field will only appear in an Asset Report with Insights.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The string returned by the financial institution to describe the transaction. For transactions returned by &#x60;/transactions/get&#x60;, this field is in beta and will be omitted unless the client is both enrolled in the closed beta program and has set &#x60;options.include_original_description&#x60; to &#x60;true&#x60;.
        /// </summary>
        /// <value>The string returned by the financial institution to describe the transaction. For transactions returned by &#x60;/transactions/get&#x60;, this field is in beta and will be omitted unless the client is both enrolled in the closed beta program and has set &#x60;options.include_original_description&#x60; to &#x60;true&#x60;.</value>
        [DataMember(Name = "original_description", EmitDefaultValue = true)]
        public string OriginalDescription { get; set; }

        /// <summary>
        /// The ID of the account in which this transaction occurred.
        /// </summary>
        /// <value>The ID of the account in which this transaction occurred.</value>
        [DataMember(Name = "account_id", IsRequired = true, EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// The settled value of the transaction, denominated in the account&#39;s currency, as stated in &#x60;iso_currency_code&#x60; or &#x60;unofficial_currency_code&#x60;. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.
        /// </summary>
        /// <value>The settled value of the transaction, denominated in the account&#39;s currency, as stated in &#x60;iso_currency_code&#x60; or &#x60;unofficial_currency_code&#x60;. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = false)]
        public decimal Amount { get; set; }

        /// <summary>
        /// The ISO-4217 currency code of the transaction. Always &#x60;null&#x60; if &#x60;unofficial_currency_code&#x60; is non-null.
        /// </summary>
        /// <value>The ISO-4217 currency code of the transaction. Always &#x60;null&#x60; if &#x60;unofficial_currency_code&#x60; is non-null.</value>
        [DataMember(Name = "iso_currency_code", IsRequired = true, EmitDefaultValue = true)]
        public string IsoCurrencyCode { get; set; }

        /// <summary>
        /// The unofficial currency code associated with the transaction. Always &#x60;null&#x60; if &#x60;iso_currency_code&#x60; is non-&#x60;null&#x60;. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported &#x60;iso_currency_code&#x60;s.
        /// </summary>
        /// <value>The unofficial currency code associated with the transaction. Always &#x60;null&#x60; if &#x60;iso_currency_code&#x60; is non-&#x60;null&#x60;. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported &#x60;iso_currency_code&#x60;s.</value>
        [DataMember(Name = "unofficial_currency_code", IsRequired = true, EmitDefaultValue = true)]
        public string UnofficialCurrencyCode { get; set; }

        /// <summary>
        /// For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted. Both dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( &#x60;YYYY-MM-DD&#x60; ).
        /// </summary>
        /// <value>For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted. Both dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( &#x60;YYYY-MM-DD&#x60; ).</value>
        [DataMember(Name = "date", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime Date { get; set; }

        /// <summary>
        /// When &#x60;true&#x60;, identifies the transaction as pending or unsettled. Pending transaction details (name, type, amount, category ID) may change before they are settled.
        /// </summary>
        /// <value>When &#x60;true&#x60;, identifies the transaction as pending or unsettled. Pending transaction details (name, type, amount, category ID) may change before they are settled.</value>
        [DataMember(Name = "pending", IsRequired = true, EmitDefaultValue = true)]
        public bool Pending { get; set; }

        /// <summary>
        /// The unique ID of the transaction. Like all Plaid identifiers, the &#x60;transaction_id&#x60; is case sensitive.
        /// </summary>
        /// <value>The unique ID of the transaction. Like all Plaid identifiers, the &#x60;transaction_id&#x60; is case sensitive.</value>
        [DataMember(Name = "transaction_id", IsRequired = true, EmitDefaultValue = false)]
        public string TransactionId { get; set; }

        /// <summary>
        /// The merchant name, as extracted by Plaid from the &#x60;name&#x60; field.
        /// </summary>
        /// <value>The merchant name, as extracted by Plaid from the &#x60;name&#x60; field.</value>
        [DataMember(Name = "merchant_name", EmitDefaultValue = true)]
        public string MerchantName { get; set; }

        /// <summary>
        /// The check number of the transaction. This field is only populated for check transactions.
        /// </summary>
        /// <value>The check number of the transaction. This field is only populated for check transactions.</value>
        [DataMember(Name = "check_number", EmitDefaultValue = true)]
        public string CheckNumber { get; set; }

        /// <summary>
        /// The date that the transaction was authorized. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( &#x60;YYYY-MM-DD&#x60; ). The &#x60;authorized_date&#x60; field uses machine learning to determine a transaction date for transactions where the &#x60;date_transacted&#x60; is not available. If the &#x60;date_transacted&#x60; field is present and not &#x60;null&#x60;, the &#x60;authorized_date&#x60; field will have the same value as the &#x60;date_transacted&#x60; field.
        /// </summary>
        /// <value>The date that the transaction was authorized. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( &#x60;YYYY-MM-DD&#x60; ). The &#x60;authorized_date&#x60; field uses machine learning to determine a transaction date for transactions where the &#x60;date_transacted&#x60; is not available. If the &#x60;date_transacted&#x60; field is present and not &#x60;null&#x60;, the &#x60;authorized_date&#x60; field will have the same value as the &#x60;date_transacted&#x60; field.</value>
        [DataMember(Name = "authorized_date", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? AuthorizedDate { get; set; }

        /// <summary>
        /// Date and time when a transaction was authorized in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60; ).  This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00).
        /// </summary>
        /// <value>Date and time when a transaction was authorized in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60; ).  This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00).</value>
        [DataMember(Name = "authorized_datetime", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? AuthorizedDatetime { get; set; }

        /// <summary>
        /// Date and time when a transaction was posted in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60; ).  This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00).
        /// </summary>
        /// <value>Date and time when a transaction was posted in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60; ).  This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00).</value>
        [DataMember(Name = "datetime", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? Datetime { get; set; }

        /// <summary>
        /// Gets or Sets PersonalFinanceCategory
        /// </summary>
        [DataMember(Name = "personal_finance_category", EmitDefaultValue = true)]
        public PersonalFinanceCategory PersonalFinanceCategory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Transaction {\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  PendingTransactionId: ").Append(PendingTransactionId).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  PaymentMeta: ").Append(PaymentMeta).Append("\n");
            sb.Append("  AccountOwner: ").Append(AccountOwner).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OriginalDescription: ").Append(OriginalDescription).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  IsoCurrencyCode: ").Append(IsoCurrencyCode).Append("\n");
            sb.Append("  UnofficialCurrencyCode: ").Append(UnofficialCurrencyCode).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Pending: ").Append(Pending).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  MerchantName: ").Append(MerchantName).Append("\n");
            sb.Append("  CheckNumber: ").Append(CheckNumber).Append("\n");
            sb.Append("  PaymentChannel: ").Append(PaymentChannel).Append("\n");
            sb.Append("  AuthorizedDate: ").Append(AuthorizedDate).Append("\n");
            sb.Append("  AuthorizedDatetime: ").Append(AuthorizedDatetime).Append("\n");
            sb.Append("  Datetime: ").Append(Datetime).Append("\n");
            sb.Append("  TransactionCode: ").Append(TransactionCode).Append("\n");
            sb.Append("  PersonalFinanceCategory: ").Append(PersonalFinanceCategory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Transaction);
        }

        /// <summary>
        /// Returns true if Transaction instances are equal
        /// </summary>
        /// <param name="input">Instance of Transaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Transaction input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TransactionType == input.TransactionType ||
                    this.TransactionType.Equals(input.TransactionType)
                ) && 
                (
                    this.PendingTransactionId == input.PendingTransactionId ||
                    (this.PendingTransactionId != null &&
                    this.PendingTransactionId.Equals(input.PendingTransactionId))
                ) && 
                (
                    this.CategoryId == input.CategoryId ||
                    (this.CategoryId != null &&
                    this.CategoryId.Equals(input.CategoryId))
                ) && 
                (
                    this.Category == input.Category ||
                    this.Category != null &&
                    input.Category != null &&
                    this.Category.SequenceEqual(input.Category)
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.PaymentMeta == input.PaymentMeta ||
                    (this.PaymentMeta != null &&
                    this.PaymentMeta.Equals(input.PaymentMeta))
                ) && 
                (
                    this.AccountOwner == input.AccountOwner ||
                    (this.AccountOwner != null &&
                    this.AccountOwner.Equals(input.AccountOwner))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OriginalDescription == input.OriginalDescription ||
                    (this.OriginalDescription != null &&
                    this.OriginalDescription.Equals(input.OriginalDescription))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.IsoCurrencyCode == input.IsoCurrencyCode ||
                    (this.IsoCurrencyCode != null &&
                    this.IsoCurrencyCode.Equals(input.IsoCurrencyCode))
                ) && 
                (
                    this.UnofficialCurrencyCode == input.UnofficialCurrencyCode ||
                    (this.UnofficialCurrencyCode != null &&
                    this.UnofficialCurrencyCode.Equals(input.UnofficialCurrencyCode))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Pending == input.Pending ||
                    this.Pending.Equals(input.Pending)
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.MerchantName == input.MerchantName ||
                    (this.MerchantName != null &&
                    this.MerchantName.Equals(input.MerchantName))
                ) && 
                (
                    this.CheckNumber == input.CheckNumber ||
                    (this.CheckNumber != null &&
                    this.CheckNumber.Equals(input.CheckNumber))
                ) && 
                (
                    this.PaymentChannel == input.PaymentChannel ||
                    this.PaymentChannel.Equals(input.PaymentChannel)
                ) && 
                (
                    this.AuthorizedDate == input.AuthorizedDate ||
                    (this.AuthorizedDate != null &&
                    this.AuthorizedDate.Equals(input.AuthorizedDate))
                ) && 
                (
                    this.AuthorizedDatetime == input.AuthorizedDatetime ||
                    (this.AuthorizedDatetime != null &&
                    this.AuthorizedDatetime.Equals(input.AuthorizedDatetime))
                ) && 
                (
                    this.Datetime == input.Datetime ||
                    (this.Datetime != null &&
                    this.Datetime.Equals(input.Datetime))
                ) && 
                (
                    this.TransactionCode == input.TransactionCode ||
                    this.TransactionCode.Equals(input.TransactionCode)
                ) && 
                (
                    this.PersonalFinanceCategory == input.PersonalFinanceCategory ||
                    (this.PersonalFinanceCategory != null &&
                    this.PersonalFinanceCategory.Equals(input.PersonalFinanceCategory))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.TransactionType.GetHashCode();
                if (this.PendingTransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.PendingTransactionId.GetHashCode();
                }
                if (this.CategoryId != null)
                {
                    hashCode = (hashCode * 59) + this.CategoryId.GetHashCode();
                }
                if (this.Category != null)
                {
                    hashCode = (hashCode * 59) + this.Category.GetHashCode();
                }
                if (this.Location != null)
                {
                    hashCode = (hashCode * 59) + this.Location.GetHashCode();
                }
                if (this.PaymentMeta != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMeta.GetHashCode();
                }
                if (this.AccountOwner != null)
                {
                    hashCode = (hashCode * 59) + this.AccountOwner.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.OriginalDescription != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalDescription.GetHashCode();
                }
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                if (this.IsoCurrencyCode != null)
                {
                    hashCode = (hashCode * 59) + this.IsoCurrencyCode.GetHashCode();
                }
                if (this.UnofficialCurrencyCode != null)
                {
                    hashCode = (hashCode * 59) + this.UnofficialCurrencyCode.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Pending.GetHashCode();
                if (this.TransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionId.GetHashCode();
                }
                if (this.MerchantName != null)
                {
                    hashCode = (hashCode * 59) + this.MerchantName.GetHashCode();
                }
                if (this.CheckNumber != null)
                {
                    hashCode = (hashCode * 59) + this.CheckNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PaymentChannel.GetHashCode();
                if (this.AuthorizedDate != null)
                {
                    hashCode = (hashCode * 59) + this.AuthorizedDate.GetHashCode();
                }
                if (this.AuthorizedDatetime != null)
                {
                    hashCode = (hashCode * 59) + this.AuthorizedDatetime.GetHashCode();
                }
                if (this.Datetime != null)
                {
                    hashCode = (hashCode * 59) + this.Datetime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TransactionCode.GetHashCode();
                if (this.PersonalFinanceCategory != null)
                {
                    hashCode = (hashCode * 59) + this.PersonalFinanceCategory.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
