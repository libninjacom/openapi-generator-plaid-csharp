/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Specifies options for initializing Link for use with the Income (beta) product. This field is required if &#x60;income_verification&#x60; is included in the &#x60;products&#x60; array.
    /// </summary>
    [DataContract(Name = "LinkTokenCreateRequestIncomeVerification")]
    public partial class LinkTokenCreateRequestIncomeVerification : IEquatable<LinkTokenCreateRequestIncomeVerification>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkTokenCreateRequestIncomeVerification" /> class.
        /// </summary>
        /// <param name="incomeVerificationId">The &#x60;income_verification_id&#x60; of the verification instance, as provided by &#x60;/income/verification/create&#x60;..</param>
        /// <param name="assetReportId">The &#x60;asset_report_id&#x60; of an asset report associated with the user, as provided by &#x60;/asset_report/create&#x60;. Providing an &#x60;asset_report_id&#x60; is optional and can be used to verify the user through a streamlined flow. If provided, the bank linking flow will be skipped..</param>
        /// <param name="precheckId">The ID of a precheck created with &#x60;/income/verification/precheck&#x60;. Will be used to improve conversion of the income verification flow by streamlining the Link interface presented to the end user..</param>
        /// <param name="accessTokens">An array of access tokens corresponding to the Items that will be cross-referenced with the product data. If the &#x60;transactions&#x60; product was not initialized for the Items during link, it will be initialized after this Link session..</param>
        public LinkTokenCreateRequestIncomeVerification(string incomeVerificationId = default(string), string assetReportId = default(string), string precheckId = default(string), List<string> accessTokens = default(List<string>))
        {
            this.IncomeVerificationId = incomeVerificationId;
            this.AssetReportId = assetReportId;
            this.PrecheckId = precheckId;
            this.AccessTokens = accessTokens;
        }

        /// <summary>
        /// The &#x60;income_verification_id&#x60; of the verification instance, as provided by &#x60;/income/verification/create&#x60;.
        /// </summary>
        /// <value>The &#x60;income_verification_id&#x60; of the verification instance, as provided by &#x60;/income/verification/create&#x60;.</value>
        [DataMember(Name = "income_verification_id", EmitDefaultValue = false)]
        [Obsolete]
        public string IncomeVerificationId { get; set; }

        /// <summary>
        /// The &#x60;asset_report_id&#x60; of an asset report associated with the user, as provided by &#x60;/asset_report/create&#x60;. Providing an &#x60;asset_report_id&#x60; is optional and can be used to verify the user through a streamlined flow. If provided, the bank linking flow will be skipped.
        /// </summary>
        /// <value>The &#x60;asset_report_id&#x60; of an asset report associated with the user, as provided by &#x60;/asset_report/create&#x60;. Providing an &#x60;asset_report_id&#x60; is optional and can be used to verify the user through a streamlined flow. If provided, the bank linking flow will be skipped.</value>
        [DataMember(Name = "asset_report_id", EmitDefaultValue = false)]
        public string AssetReportId { get; set; }

        /// <summary>
        /// The ID of a precheck created with &#x60;/income/verification/precheck&#x60;. Will be used to improve conversion of the income verification flow by streamlining the Link interface presented to the end user.
        /// </summary>
        /// <value>The ID of a precheck created with &#x60;/income/verification/precheck&#x60;. Will be used to improve conversion of the income verification flow by streamlining the Link interface presented to the end user.</value>
        [DataMember(Name = "precheck_id", EmitDefaultValue = false)]
        public string PrecheckId { get; set; }

        /// <summary>
        /// An array of access tokens corresponding to the Items that will be cross-referenced with the product data. If the &#x60;transactions&#x60; product was not initialized for the Items during link, it will be initialized after this Link session.
        /// </summary>
        /// <value>An array of access tokens corresponding to the Items that will be cross-referenced with the product data. If the &#x60;transactions&#x60; product was not initialized for the Items during link, it will be initialized after this Link session.</value>
        [DataMember(Name = "access_tokens", EmitDefaultValue = false)]
        public List<string> AccessTokens { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LinkTokenCreateRequestIncomeVerification {\n");
            sb.Append("  IncomeVerificationId: ").Append(IncomeVerificationId).Append("\n");
            sb.Append("  AssetReportId: ").Append(AssetReportId).Append("\n");
            sb.Append("  PrecheckId: ").Append(PrecheckId).Append("\n");
            sb.Append("  AccessTokens: ").Append(AccessTokens).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LinkTokenCreateRequestIncomeVerification);
        }

        /// <summary>
        /// Returns true if LinkTokenCreateRequestIncomeVerification instances are equal
        /// </summary>
        /// <param name="input">Instance of LinkTokenCreateRequestIncomeVerification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LinkTokenCreateRequestIncomeVerification input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IncomeVerificationId == input.IncomeVerificationId ||
                    (this.IncomeVerificationId != null &&
                    this.IncomeVerificationId.Equals(input.IncomeVerificationId))
                ) && 
                (
                    this.AssetReportId == input.AssetReportId ||
                    (this.AssetReportId != null &&
                    this.AssetReportId.Equals(input.AssetReportId))
                ) && 
                (
                    this.PrecheckId == input.PrecheckId ||
                    (this.PrecheckId != null &&
                    this.PrecheckId.Equals(input.PrecheckId))
                ) && 
                (
                    this.AccessTokens == input.AccessTokens ||
                    this.AccessTokens != null &&
                    input.AccessTokens != null &&
                    this.AccessTokens.SequenceEqual(input.AccessTokens)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IncomeVerificationId != null)
                {
                    hashCode = (hashCode * 59) + this.IncomeVerificationId.GetHashCode();
                }
                if (this.AssetReportId != null)
                {
                    hashCode = (hashCode * 59) + this.AssetReportId.GetHashCode();
                }
                if (this.PrecheckId != null)
                {
                    hashCode = (hashCode * 59) + this.PrecheckId.GetHashCode();
                }
                if (this.AccessTokens != null)
                {
                    hashCode = (hashCode * 59) + this.AccessTokens.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
