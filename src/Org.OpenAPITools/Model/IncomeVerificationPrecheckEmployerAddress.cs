/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The address of the employer
    /// </summary>
    [DataContract(Name = "IncomeVerificationPrecheckEmployerAddress")]
    public partial class IncomeVerificationPrecheckEmployerAddress : IEquatable<IncomeVerificationPrecheckEmployerAddress>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IncomeVerificationPrecheckEmployerAddress" /> class.
        /// </summary>
        /// <param name="city">The full city name.</param>
        /// <param name="region">The region or state. In API versions 2018-05-22 and earlier, this field is called &#x60;state&#x60;. Example: &#x60;\&quot;NC\&quot;&#x60;.</param>
        /// <param name="street">The full street address Example: &#x60;\&quot;564 Main Street, APT 15\&quot;&#x60;.</param>
        /// <param name="postalCode">The postal code. In API versions 2018-05-22 and earlier, this field is called &#x60;zip&#x60;..</param>
        /// <param name="country">The ISO 3166-1 alpha-2 country code.</param>
        public IncomeVerificationPrecheckEmployerAddress(string city = default(string), string region = default(string), string street = default(string), string postalCode = default(string), string country = default(string))
        {
            this.City = city;
            this.Region = region;
            this.Street = street;
            this.PostalCode = postalCode;
            this.Country = country;
        }

        /// <summary>
        /// The full city name
        /// </summary>
        /// <value>The full city name</value>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// The region or state. In API versions 2018-05-22 and earlier, this field is called &#x60;state&#x60;. Example: &#x60;\&quot;NC\&quot;&#x60;
        /// </summary>
        /// <value>The region or state. In API versions 2018-05-22 and earlier, this field is called &#x60;state&#x60;. Example: &#x60;\&quot;NC\&quot;&#x60;</value>
        [DataMember(Name = "region", EmitDefaultValue = false)]
        public string Region { get; set; }

        /// <summary>
        /// The full street address Example: &#x60;\&quot;564 Main Street, APT 15\&quot;&#x60;
        /// </summary>
        /// <value>The full street address Example: &#x60;\&quot;564 Main Street, APT 15\&quot;&#x60;</value>
        [DataMember(Name = "street", EmitDefaultValue = false)]
        public string Street { get; set; }

        /// <summary>
        /// The postal code. In API versions 2018-05-22 and earlier, this field is called &#x60;zip&#x60;.
        /// </summary>
        /// <value>The postal code. In API versions 2018-05-22 and earlier, this field is called &#x60;zip&#x60;.</value>
        [DataMember(Name = "postal_code", EmitDefaultValue = false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// The ISO 3166-1 alpha-2 country code
        /// </summary>
        /// <value>The ISO 3166-1 alpha-2 country code</value>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IncomeVerificationPrecheckEmployerAddress {\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IncomeVerificationPrecheckEmployerAddress);
        }

        /// <summary>
        /// Returns true if IncomeVerificationPrecheckEmployerAddress instances are equal
        /// </summary>
        /// <param name="input">Instance of IncomeVerificationPrecheckEmployerAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IncomeVerificationPrecheckEmployerAddress input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.Region != null)
                {
                    hashCode = (hashCode * 59) + this.Region.GetHashCode();
                }
                if (this.Street != null)
                {
                    hashCode = (hashCode * 59) + this.Street.GetHashCode();
                }
                if (this.PostalCode != null)
                {
                    hashCode = (hashCode * 59) + this.PostalCode.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
