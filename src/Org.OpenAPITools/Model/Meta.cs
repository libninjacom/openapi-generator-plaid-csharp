/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Allows specifying the metadata of the test account
    /// </summary>
    [DataContract(Name = "Meta")]
    public partial class Meta : Dictionary<String, Object>, IEquatable<Meta>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Meta" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Meta()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Meta" /> class.
        /// </summary>
        /// <param name="name">The account&#39;s name (required).</param>
        /// <param name="officialName">The account&#39;s official name (required).</param>
        /// <param name="limit">The account&#39;s limit (required).</param>
        public Meta(string name = default(string), string officialName = default(string), decimal limit = default(decimal)) : base()
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Meta and cannot be null");
            }
            this.Name = name;
            // to ensure "officialName" is required (not null)
            if (officialName == null)
            {
                throw new ArgumentNullException("officialName is a required property for Meta and cannot be null");
            }
            this.OfficialName = officialName;
            this.Limit = limit;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The account&#39;s name
        /// </summary>
        /// <value>The account&#39;s name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The account&#39;s official name
        /// </summary>
        /// <value>The account&#39;s official name</value>
        [DataMember(Name = "official_name", IsRequired = true, EmitDefaultValue = false)]
        public string OfficialName { get; set; }

        /// <summary>
        /// The account&#39;s limit
        /// </summary>
        /// <value>The account&#39;s limit</value>
        [DataMember(Name = "limit", IsRequired = true, EmitDefaultValue = false)]
        public decimal Limit { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Meta {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OfficialName: ").Append(OfficialName).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Meta);
        }

        /// <summary>
        /// Returns true if Meta instances are equal
        /// </summary>
        /// <param name="input">Instance of Meta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Meta input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && base.Equals(input) && 
                (
                    this.OfficialName == input.OfficialName ||
                    (this.OfficialName != null &&
                    this.OfficialName.Equals(input.OfficialName))
                ) && base.Equals(input) && 
                (
                    this.Limit == input.Limit ||
                    this.Limit.Equals(input.Limit)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.OfficialName != null)
                {
                    hashCode = (hashCode * 59) + this.OfficialName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Limit.GetHashCode();
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
