/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Fired when new or updated holdings have been detected on an investment account. The webhook typically fires once per day, after market close, in response to any newly added holdings or price changes to existing holdings.
    /// </summary>
    [DataContract(Name = "HoldingsDefaultUpdateWebhook")]
    public partial class HoldingsDefaultUpdateWebhook : Dictionary<String, Object>, IEquatable<HoldingsDefaultUpdateWebhook>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HoldingsDefaultUpdateWebhook" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HoldingsDefaultUpdateWebhook()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="HoldingsDefaultUpdateWebhook" /> class.
        /// </summary>
        /// <param name="webhookType">&#x60;HOLDINGS&#x60; (required).</param>
        /// <param name="webhookCode">&#x60;DEFAULT_UPDATE&#x60; (required).</param>
        /// <param name="itemId">The &#x60;item_id&#x60; of the Item associated with this webhook, warning, or error (required).</param>
        /// <param name="error">error.</param>
        /// <param name="newHoldings">The number of new holdings reported since the last time this webhook was fired. (required).</param>
        /// <param name="updatedHoldings">The number of updated holdings reported since the last time this webhook was fired. (required).</param>
        public HoldingsDefaultUpdateWebhook(string webhookType = default(string), string webhookCode = default(string), string itemId = default(string), PlaidError error = default(PlaidError), decimal newHoldings = default(decimal), decimal updatedHoldings = default(decimal)) : base()
        {
            // to ensure "webhookType" is required (not null)
            if (webhookType == null)
            {
                throw new ArgumentNullException("webhookType is a required property for HoldingsDefaultUpdateWebhook and cannot be null");
            }
            this.WebhookType = webhookType;
            // to ensure "webhookCode" is required (not null)
            if (webhookCode == null)
            {
                throw new ArgumentNullException("webhookCode is a required property for HoldingsDefaultUpdateWebhook and cannot be null");
            }
            this.WebhookCode = webhookCode;
            // to ensure "itemId" is required (not null)
            if (itemId == null)
            {
                throw new ArgumentNullException("itemId is a required property for HoldingsDefaultUpdateWebhook and cannot be null");
            }
            this.ItemId = itemId;
            this.NewHoldings = newHoldings;
            this.UpdatedHoldings = updatedHoldings;
            this.Error = error;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// &#x60;HOLDINGS&#x60;
        /// </summary>
        /// <value>&#x60;HOLDINGS&#x60;</value>
        [DataMember(Name = "webhook_type", IsRequired = true, EmitDefaultValue = false)]
        public string WebhookType { get; set; }

        /// <summary>
        /// &#x60;DEFAULT_UPDATE&#x60;
        /// </summary>
        /// <value>&#x60;DEFAULT_UPDATE&#x60;</value>
        [DataMember(Name = "webhook_code", IsRequired = true, EmitDefaultValue = false)]
        public string WebhookCode { get; set; }

        /// <summary>
        /// The &#x60;item_id&#x60; of the Item associated with this webhook, warning, or error
        /// </summary>
        /// <value>The &#x60;item_id&#x60; of the Item associated with this webhook, warning, or error</value>
        [DataMember(Name = "item_id", IsRequired = true, EmitDefaultValue = false)]
        public string ItemId { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public PlaidError Error { get; set; }

        /// <summary>
        /// The number of new holdings reported since the last time this webhook was fired.
        /// </summary>
        /// <value>The number of new holdings reported since the last time this webhook was fired.</value>
        [DataMember(Name = "new_holdings", IsRequired = true, EmitDefaultValue = false)]
        public decimal NewHoldings { get; set; }

        /// <summary>
        /// The number of updated holdings reported since the last time this webhook was fired.
        /// </summary>
        /// <value>The number of updated holdings reported since the last time this webhook was fired.</value>
        [DataMember(Name = "updated_holdings", IsRequired = true, EmitDefaultValue = false)]
        public decimal UpdatedHoldings { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HoldingsDefaultUpdateWebhook {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  WebhookType: ").Append(WebhookType).Append("\n");
            sb.Append("  WebhookCode: ").Append(WebhookCode).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  NewHoldings: ").Append(NewHoldings).Append("\n");
            sb.Append("  UpdatedHoldings: ").Append(UpdatedHoldings).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HoldingsDefaultUpdateWebhook);
        }

        /// <summary>
        /// Returns true if HoldingsDefaultUpdateWebhook instances are equal
        /// </summary>
        /// <param name="input">Instance of HoldingsDefaultUpdateWebhook to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HoldingsDefaultUpdateWebhook input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.WebhookType == input.WebhookType ||
                    (this.WebhookType != null &&
                    this.WebhookType.Equals(input.WebhookType))
                ) && base.Equals(input) && 
                (
                    this.WebhookCode == input.WebhookCode ||
                    (this.WebhookCode != null &&
                    this.WebhookCode.Equals(input.WebhookCode))
                ) && base.Equals(input) && 
                (
                    this.ItemId == input.ItemId ||
                    (this.ItemId != null &&
                    this.ItemId.Equals(input.ItemId))
                ) && base.Equals(input) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && base.Equals(input) && 
                (
                    this.NewHoldings == input.NewHoldings ||
                    this.NewHoldings.Equals(input.NewHoldings)
                ) && base.Equals(input) && 
                (
                    this.UpdatedHoldings == input.UpdatedHoldings ||
                    this.UpdatedHoldings.Equals(input.UpdatedHoldings)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.WebhookType != null)
                {
                    hashCode = (hashCode * 59) + this.WebhookType.GetHashCode();
                }
                if (this.WebhookCode != null)
                {
                    hashCode = (hashCode * 59) + this.WebhookCode.GetHashCode();
                }
                if (this.ItemId != null)
                {
                    hashCode = (hashCode * 59) + this.ItemId.GetHashCode();
                }
                if (this.Error != null)
                {
                    hashCode = (hashCode * 59) + this.Error.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NewHoldings.GetHashCode();
                hashCode = (hashCode * 59) + this.UpdatedHoldings.GetHashCode();
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
