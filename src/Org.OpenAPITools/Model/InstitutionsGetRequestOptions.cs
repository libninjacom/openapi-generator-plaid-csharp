/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// An optional object to filter &#x60;/institutions/get&#x60; results.
    /// </summary>
    [DataContract(Name = "InstitutionsGetRequestOptions")]
    public partial class InstitutionsGetRequestOptions : IEquatable<InstitutionsGetRequestOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstitutionsGetRequestOptions" /> class.
        /// </summary>
        /// <param name="products">Filter the Institutions based on which products they support. .</param>
        /// <param name="routingNumbers">Specify an array of routing numbers to filter institutions. The response will only return institutions that match all of the routing numbers in the array. Routing number records used for this matching are not comprehensive; failure to match a given routing number to an institution does not mean that the institution is unsupported by Plaid..</param>
        /// <param name="oauth">Limit results to institutions with or without OAuth login flows..</param>
        /// <param name="includeOptionalMetadata">When &#x60;true&#x60;, return the institution&#39;s homepage URL, logo and primary brand color.  Note that Plaid does not own any of the logos shared by the API, and that by accessing or using these logos, you agree that you are doing so at your own risk and will, if necessary, obtain all required permissions from the appropriate rights holders and adhere to any applicable usage guidelines. Plaid disclaims all express or implied warranties with respect to the logos..</param>
        /// <param name="includeAuthMetadata">When &#x60;true&#x60;, returns metadata related to the Auth product indicating which auth methods are supported. (default to false).</param>
        /// <param name="includePaymentInitiationMetadata">When &#x60;true&#x60;, returns metadata related to the Payment Initiation product indicating which payment configurations are supported. (default to false).</param>
        public InstitutionsGetRequestOptions(List<Products> products = default(List<Products>), List<string> routingNumbers = default(List<string>), bool? oauth = default(bool?), bool includeOptionalMetadata = default(bool), bool includeAuthMetadata = false, bool includePaymentInitiationMetadata = false)
        {
            this.Products = products;
            this.RoutingNumbers = routingNumbers;
            this.Oauth = oauth;
            this.IncludeOptionalMetadata = includeOptionalMetadata;
            this.IncludeAuthMetadata = includeAuthMetadata;
            this.IncludePaymentInitiationMetadata = includePaymentInitiationMetadata;
        }

        /// <summary>
        /// Filter the Institutions based on which products they support. 
        /// </summary>
        /// <value>Filter the Institutions based on which products they support. </value>
        [DataMember(Name = "products", EmitDefaultValue = true)]
        public List<Products> Products { get; set; }

        /// <summary>
        /// Specify an array of routing numbers to filter institutions. The response will only return institutions that match all of the routing numbers in the array. Routing number records used for this matching are not comprehensive; failure to match a given routing number to an institution does not mean that the institution is unsupported by Plaid.
        /// </summary>
        /// <value>Specify an array of routing numbers to filter institutions. The response will only return institutions that match all of the routing numbers in the array. Routing number records used for this matching are not comprehensive; failure to match a given routing number to an institution does not mean that the institution is unsupported by Plaid.</value>
        [DataMember(Name = "routing_numbers", EmitDefaultValue = true)]
        public List<string> RoutingNumbers { get; set; }

        /// <summary>
        /// Limit results to institutions with or without OAuth login flows.
        /// </summary>
        /// <value>Limit results to institutions with or without OAuth login flows.</value>
        [DataMember(Name = "oauth", EmitDefaultValue = true)]
        public bool? Oauth { get; set; }

        /// <summary>
        /// When &#x60;true&#x60;, return the institution&#39;s homepage URL, logo and primary brand color.  Note that Plaid does not own any of the logos shared by the API, and that by accessing or using these logos, you agree that you are doing so at your own risk and will, if necessary, obtain all required permissions from the appropriate rights holders and adhere to any applicable usage guidelines. Plaid disclaims all express or implied warranties with respect to the logos.
        /// </summary>
        /// <value>When &#x60;true&#x60;, return the institution&#39;s homepage URL, logo and primary brand color.  Note that Plaid does not own any of the logos shared by the API, and that by accessing or using these logos, you agree that you are doing so at your own risk and will, if necessary, obtain all required permissions from the appropriate rights holders and adhere to any applicable usage guidelines. Plaid disclaims all express or implied warranties with respect to the logos.</value>
        [DataMember(Name = "include_optional_metadata", EmitDefaultValue = true)]
        public bool IncludeOptionalMetadata { get; set; }

        /// <summary>
        /// When &#x60;true&#x60;, returns metadata related to the Auth product indicating which auth methods are supported.
        /// </summary>
        /// <value>When &#x60;true&#x60;, returns metadata related to the Auth product indicating which auth methods are supported.</value>
        [DataMember(Name = "include_auth_metadata", EmitDefaultValue = true)]
        public bool IncludeAuthMetadata { get; set; }

        /// <summary>
        /// When &#x60;true&#x60;, returns metadata related to the Payment Initiation product indicating which payment configurations are supported.
        /// </summary>
        /// <value>When &#x60;true&#x60;, returns metadata related to the Payment Initiation product indicating which payment configurations are supported.</value>
        [DataMember(Name = "include_payment_initiation_metadata", EmitDefaultValue = true)]
        public bool IncludePaymentInitiationMetadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InstitutionsGetRequestOptions {\n");
            sb.Append("  Products: ").Append(Products).Append("\n");
            sb.Append("  RoutingNumbers: ").Append(RoutingNumbers).Append("\n");
            sb.Append("  Oauth: ").Append(Oauth).Append("\n");
            sb.Append("  IncludeOptionalMetadata: ").Append(IncludeOptionalMetadata).Append("\n");
            sb.Append("  IncludeAuthMetadata: ").Append(IncludeAuthMetadata).Append("\n");
            sb.Append("  IncludePaymentInitiationMetadata: ").Append(IncludePaymentInitiationMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InstitutionsGetRequestOptions);
        }

        /// <summary>
        /// Returns true if InstitutionsGetRequestOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of InstitutionsGetRequestOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstitutionsGetRequestOptions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Products == input.Products ||
                    this.Products != null &&
                    input.Products != null &&
                    this.Products.SequenceEqual(input.Products)
                ) && 
                (
                    this.RoutingNumbers == input.RoutingNumbers ||
                    this.RoutingNumbers != null &&
                    input.RoutingNumbers != null &&
                    this.RoutingNumbers.SequenceEqual(input.RoutingNumbers)
                ) && 
                (
                    this.Oauth == input.Oauth ||
                    (this.Oauth != null &&
                    this.Oauth.Equals(input.Oauth))
                ) && 
                (
                    this.IncludeOptionalMetadata == input.IncludeOptionalMetadata ||
                    this.IncludeOptionalMetadata.Equals(input.IncludeOptionalMetadata)
                ) && 
                (
                    this.IncludeAuthMetadata == input.IncludeAuthMetadata ||
                    this.IncludeAuthMetadata.Equals(input.IncludeAuthMetadata)
                ) && 
                (
                    this.IncludePaymentInitiationMetadata == input.IncludePaymentInitiationMetadata ||
                    this.IncludePaymentInitiationMetadata.Equals(input.IncludePaymentInitiationMetadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Products != null)
                {
                    hashCode = (hashCode * 59) + this.Products.GetHashCode();
                }
                if (this.RoutingNumbers != null)
                {
                    hashCode = (hashCode * 59) + this.RoutingNumbers.GetHashCode();
                }
                if (this.Oauth != null)
                {
                    hashCode = (hashCode * 59) + this.Oauth.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IncludeOptionalMetadata.GetHashCode();
                hashCode = (hashCode * 59) + this.IncludeAuthMetadata.GetHashCode();
                hashCode = (hashCode * 59) + this.IncludePaymentInitiationMetadata.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
