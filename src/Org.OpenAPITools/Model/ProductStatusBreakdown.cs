/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A detailed breakdown of the institution&#39;s performance for a request type. The values for &#x60;success&#x60;, &#x60;error_plaid&#x60;, and &#x60;error_institution&#x60; sum to 1.
    /// </summary>
    [DataContract(Name = "ProductStatusBreakdown")]
    public partial class ProductStatusBreakdown : Dictionary<String, Object>, IEquatable<ProductStatusBreakdown>, IValidatableObject
    {
        /// <summary>
        /// The &#x60;refresh_interval&#x60; may be &#x60;DELAYED&#x60; or &#x60;STOPPED&#x60; even when the success rate is high. This value is only returned for Transactions status breakdowns.
        /// </summary>
        /// <value>The &#x60;refresh_interval&#x60; may be &#x60;DELAYED&#x60; or &#x60;STOPPED&#x60; even when the success rate is high. This value is only returned for Transactions status breakdowns.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RefreshIntervalEnum
        {
            /// <summary>
            /// Enum NORMAL for value: NORMAL
            /// </summary>
            [EnumMember(Value = "NORMAL")]
            NORMAL = 1,

            /// <summary>
            /// Enum DELAYED for value: DELAYED
            /// </summary>
            [EnumMember(Value = "DELAYED")]
            DELAYED = 2,

            /// <summary>
            /// Enum STOPPED for value: STOPPED
            /// </summary>
            [EnumMember(Value = "STOPPED")]
            STOPPED = 3

        }


        /// <summary>
        /// The &#x60;refresh_interval&#x60; may be &#x60;DELAYED&#x60; or &#x60;STOPPED&#x60; even when the success rate is high. This value is only returned for Transactions status breakdowns.
        /// </summary>
        /// <value>The &#x60;refresh_interval&#x60; may be &#x60;DELAYED&#x60; or &#x60;STOPPED&#x60; even when the success rate is high. This value is only returned for Transactions status breakdowns.</value>
        [DataMember(Name = "refresh_interval", EmitDefaultValue = false)]
        public RefreshIntervalEnum? RefreshInterval { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductStatusBreakdown" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProductStatusBreakdown()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductStatusBreakdown" /> class.
        /// </summary>
        /// <param name="success">The percentage of login attempts that are successful, expressed as a decimal. (required).</param>
        /// <param name="errorPlaid">The percentage of logins that are failing due to an internal Plaid issue, expressed as a decimal.  (required).</param>
        /// <param name="errorInstitution">The percentage of logins that are failing due to an issue in the institution&#39;s system, expressed as a decimal. (required).</param>
        /// <param name="refreshInterval">The &#x60;refresh_interval&#x60; may be &#x60;DELAYED&#x60; or &#x60;STOPPED&#x60; even when the success rate is high. This value is only returned for Transactions status breakdowns..</param>
        public ProductStatusBreakdown(decimal success = default(decimal), decimal errorPlaid = default(decimal), decimal errorInstitution = default(decimal), RefreshIntervalEnum? refreshInterval = default(RefreshIntervalEnum?)) : base()
        {
            this.Success = success;
            this.ErrorPlaid = errorPlaid;
            this.ErrorInstitution = errorInstitution;
            this.RefreshInterval = refreshInterval;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The percentage of login attempts that are successful, expressed as a decimal.
        /// </summary>
        /// <value>The percentage of login attempts that are successful, expressed as a decimal.</value>
        [DataMember(Name = "success", IsRequired = true, EmitDefaultValue = false)]
        public decimal Success { get; set; }

        /// <summary>
        /// The percentage of logins that are failing due to an internal Plaid issue, expressed as a decimal. 
        /// </summary>
        /// <value>The percentage of logins that are failing due to an internal Plaid issue, expressed as a decimal. </value>
        [DataMember(Name = "error_plaid", IsRequired = true, EmitDefaultValue = false)]
        public decimal ErrorPlaid { get; set; }

        /// <summary>
        /// The percentage of logins that are failing due to an issue in the institution&#39;s system, expressed as a decimal.
        /// </summary>
        /// <value>The percentage of logins that are failing due to an issue in the institution&#39;s system, expressed as a decimal.</value>
        [DataMember(Name = "error_institution", IsRequired = true, EmitDefaultValue = false)]
        public decimal ErrorInstitution { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductStatusBreakdown {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  ErrorPlaid: ").Append(ErrorPlaid).Append("\n");
            sb.Append("  ErrorInstitution: ").Append(ErrorInstitution).Append("\n");
            sb.Append("  RefreshInterval: ").Append(RefreshInterval).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductStatusBreakdown);
        }

        /// <summary>
        /// Returns true if ProductStatusBreakdown instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductStatusBreakdown to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductStatusBreakdown input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Success == input.Success ||
                    this.Success.Equals(input.Success)
                ) && base.Equals(input) && 
                (
                    this.ErrorPlaid == input.ErrorPlaid ||
                    this.ErrorPlaid.Equals(input.ErrorPlaid)
                ) && base.Equals(input) && 
                (
                    this.ErrorInstitution == input.ErrorInstitution ||
                    this.ErrorInstitution.Equals(input.ErrorInstitution)
                ) && base.Equals(input) && 
                (
                    this.RefreshInterval == input.RefreshInterval ||
                    this.RefreshInterval.Equals(input.RefreshInterval)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                hashCode = (hashCode * 59) + this.Success.GetHashCode();
                hashCode = (hashCode * 59) + this.ErrorPlaid.GetHashCode();
                hashCode = (hashCode * 59) + this.ErrorInstitution.GetHashCode();
                hashCode = (hashCode * 59) + this.RefreshInterval.GetHashCode();
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
