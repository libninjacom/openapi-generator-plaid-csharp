/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// An object containing identifying numbers used for making electronic transfers to and from the &#x60;accounts&#x60;. The identifying number type (ACH, EFT, IBAN, or BACS) used will depend on the country of the account. An account may have more than one number type. If a particular identifying number type is not used by any &#x60;accounts&#x60; for which data has been requested, the array for that type will be empty.
    /// </summary>
    [DataContract(Name = "AuthGetNumbers")]
    public partial class AuthGetNumbers : Dictionary<String, Object>, IEquatable<AuthGetNumbers>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthGetNumbers" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthGetNumbers()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthGetNumbers" /> class.
        /// </summary>
        /// <param name="ach">An array of ACH numbers identifying accounts. (required).</param>
        /// <param name="eft">An array of EFT numbers identifying accounts. (required).</param>
        /// <param name="international">An array of IBAN numbers identifying accounts. (required).</param>
        /// <param name="bacs">An array of BACS numbers identifying accounts. (required).</param>
        public AuthGetNumbers(List<NumbersACH> ach = default(List<NumbersACH>), List<NumbersEFT> eft = default(List<NumbersEFT>), List<NumbersInternational> international = default(List<NumbersInternational>), List<NumbersBACS> bacs = default(List<NumbersBACS>)) : base()
        {
            // to ensure "ach" is required (not null)
            if (ach == null)
            {
                throw new ArgumentNullException("ach is a required property for AuthGetNumbers and cannot be null");
            }
            this.Ach = ach;
            // to ensure "eft" is required (not null)
            if (eft == null)
            {
                throw new ArgumentNullException("eft is a required property for AuthGetNumbers and cannot be null");
            }
            this.Eft = eft;
            // to ensure "international" is required (not null)
            if (international == null)
            {
                throw new ArgumentNullException("international is a required property for AuthGetNumbers and cannot be null");
            }
            this.International = international;
            // to ensure "bacs" is required (not null)
            if (bacs == null)
            {
                throw new ArgumentNullException("bacs is a required property for AuthGetNumbers and cannot be null");
            }
            this.Bacs = bacs;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// An array of ACH numbers identifying accounts.
        /// </summary>
        /// <value>An array of ACH numbers identifying accounts.</value>
        [DataMember(Name = "ach", IsRequired = true, EmitDefaultValue = false)]
        public List<NumbersACH> Ach { get; set; }

        /// <summary>
        /// An array of EFT numbers identifying accounts.
        /// </summary>
        /// <value>An array of EFT numbers identifying accounts.</value>
        [DataMember(Name = "eft", IsRequired = true, EmitDefaultValue = false)]
        public List<NumbersEFT> Eft { get; set; }

        /// <summary>
        /// An array of IBAN numbers identifying accounts.
        /// </summary>
        /// <value>An array of IBAN numbers identifying accounts.</value>
        [DataMember(Name = "international", IsRequired = true, EmitDefaultValue = false)]
        public List<NumbersInternational> International { get; set; }

        /// <summary>
        /// An array of BACS numbers identifying accounts.
        /// </summary>
        /// <value>An array of BACS numbers identifying accounts.</value>
        [DataMember(Name = "bacs", IsRequired = true, EmitDefaultValue = false)]
        public List<NumbersBACS> Bacs { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthGetNumbers {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Ach: ").Append(Ach).Append("\n");
            sb.Append("  Eft: ").Append(Eft).Append("\n");
            sb.Append("  International: ").Append(International).Append("\n");
            sb.Append("  Bacs: ").Append(Bacs).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthGetNumbers);
        }

        /// <summary>
        /// Returns true if AuthGetNumbers instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthGetNumbers to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthGetNumbers input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Ach == input.Ach ||
                    this.Ach != null &&
                    input.Ach != null &&
                    this.Ach.SequenceEqual(input.Ach)
                ) && base.Equals(input) && 
                (
                    this.Eft == input.Eft ||
                    this.Eft != null &&
                    input.Eft != null &&
                    this.Eft.SequenceEqual(input.Eft)
                ) && base.Equals(input) && 
                (
                    this.International == input.International ||
                    this.International != null &&
                    input.International != null &&
                    this.International.SequenceEqual(input.International)
                ) && base.Equals(input) && 
                (
                    this.Bacs == input.Bacs ||
                    this.Bacs != null &&
                    input.Bacs != null &&
                    this.Bacs.SequenceEqual(input.Bacs)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Ach != null)
                {
                    hashCode = (hashCode * 59) + this.Ach.GetHashCode();
                }
                if (this.Eft != null)
                {
                    hashCode = (hashCode * 59) + this.Eft.GetHashCode();
                }
                if (this.International != null)
                {
                    hashCode = (hashCode * 59) + this.International.GetHashCode();
                }
                if (this.Bacs != null)
                {
                    hashCode = (hashCode * 59) + this.Bacs.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
