/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// An optional object to be used with the request. If specified, &#x60;options&#x60; must not be &#x60;null&#x60;.
    /// </summary>
    [DataContract(Name = "TransactionsGetRequestOptions")]
    public partial class TransactionsGetRequestOptions : IEquatable<TransactionsGetRequestOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsGetRequestOptions" /> class.
        /// </summary>
        /// <param name="accountIds">A list of &#x60;account_ids&#x60; to retrieve for the Item  Note: An error will be returned if a provided &#x60;account_id&#x60; is not associated with the Item..</param>
        /// <param name="count">The number of transactions to fetch. (default to 100).</param>
        /// <param name="offset">The number of transactions to skip. The default value is 0. (default to 0).</param>
        /// <param name="includeOriginalDescription">Include the raw unparsed transaction description from the financial institution. This field is disabled by default. If you need this information in addition to the parsed data provided, contact your Plaid Account Manager. (default to false).</param>
        /// <param name="includePersonalFinanceCategoryBeta">Include the &#x60;personal_finance_category&#x60; object in the response. This feature is currently in beta – to request access, contact transactions-feedback@plaid.com. (default to false).</param>
        public TransactionsGetRequestOptions(List<string> accountIds = default(List<string>), int count = 100, int offset = 0, bool? includeOriginalDescription = false, bool includePersonalFinanceCategoryBeta = false)
        {
            this.AccountIds = accountIds;
            this.Count = count;
            this.Offset = offset;
            // use default value if no "includeOriginalDescription" provided
            this.IncludeOriginalDescription = includeOriginalDescription ?? false;
            this.IncludePersonalFinanceCategoryBeta = includePersonalFinanceCategoryBeta;
        }

        /// <summary>
        /// A list of &#x60;account_ids&#x60; to retrieve for the Item  Note: An error will be returned if a provided &#x60;account_id&#x60; is not associated with the Item.
        /// </summary>
        /// <value>A list of &#x60;account_ids&#x60; to retrieve for the Item  Note: An error will be returned if a provided &#x60;account_id&#x60; is not associated with the Item.</value>
        [DataMember(Name = "account_ids", EmitDefaultValue = false)]
        public List<string> AccountIds { get; set; }

        /// <summary>
        /// The number of transactions to fetch.
        /// </summary>
        /// <value>The number of transactions to fetch.</value>
        [DataMember(Name = "count", EmitDefaultValue = false)]
        public int Count { get; set; }

        /// <summary>
        /// The number of transactions to skip. The default value is 0.
        /// </summary>
        /// <value>The number of transactions to skip. The default value is 0.</value>
        [DataMember(Name = "offset", EmitDefaultValue = false)]
        public int Offset { get; set; }

        /// <summary>
        /// Include the raw unparsed transaction description from the financial institution. This field is disabled by default. If you need this information in addition to the parsed data provided, contact your Plaid Account Manager.
        /// </summary>
        /// <value>Include the raw unparsed transaction description from the financial institution. This field is disabled by default. If you need this information in addition to the parsed data provided, contact your Plaid Account Manager.</value>
        [DataMember(Name = "include_original_description", EmitDefaultValue = true)]
        public bool? IncludeOriginalDescription { get; set; }

        /// <summary>
        /// Include the &#x60;personal_finance_category&#x60; object in the response. This feature is currently in beta – to request access, contact transactions-feedback@plaid.com.
        /// </summary>
        /// <value>Include the &#x60;personal_finance_category&#x60; object in the response. This feature is currently in beta – to request access, contact transactions-feedback@plaid.com.</value>
        [DataMember(Name = "include_personal_finance_category_beta", EmitDefaultValue = true)]
        public bool IncludePersonalFinanceCategoryBeta { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionsGetRequestOptions {\n");
            sb.Append("  AccountIds: ").Append(AccountIds).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  IncludeOriginalDescription: ").Append(IncludeOriginalDescription).Append("\n");
            sb.Append("  IncludePersonalFinanceCategoryBeta: ").Append(IncludePersonalFinanceCategoryBeta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionsGetRequestOptions);
        }

        /// <summary>
        /// Returns true if TransactionsGetRequestOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionsGetRequestOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionsGetRequestOptions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountIds == input.AccountIds ||
                    this.AccountIds != null &&
                    input.AccountIds != null &&
                    this.AccountIds.SequenceEqual(input.AccountIds)
                ) && 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.Offset == input.Offset ||
                    this.Offset.Equals(input.Offset)
                ) && 
                (
                    this.IncludeOriginalDescription == input.IncludeOriginalDescription ||
                    (this.IncludeOriginalDescription != null &&
                    this.IncludeOriginalDescription.Equals(input.IncludeOriginalDescription))
                ) && 
                (
                    this.IncludePersonalFinanceCategoryBeta == input.IncludePersonalFinanceCategoryBeta ||
                    this.IncludePersonalFinanceCategoryBeta.Equals(input.IncludePersonalFinanceCategoryBeta)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountIds != null)
                {
                    hashCode = (hashCode * 59) + this.AccountIds.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                hashCode = (hashCode * 59) + this.Offset.GetHashCode();
                if (this.IncludeOriginalDescription != null)
                {
                    hashCode = (hashCode * 59) + this.IncludeOriginalDescription.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IncludePersonalFinanceCategoryBeta.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Count (int) maximum
            if (this.Count > (int)500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Count, must be a value less than or equal to 500.", new [] { "Count" });
            }

            // Count (int) minimum
            if (this.Count < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Count, must be a value greater than or equal to 1.", new [] { "Count" });
            }

            // Offset (int) minimum
            if (this.Offset < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Offset, must be a value greater than or equal to 0.", new [] { "Offset" });
            }

            yield break;
        }
    }

}
