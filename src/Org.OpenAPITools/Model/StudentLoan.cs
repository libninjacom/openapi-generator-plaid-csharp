/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Contains details about a student loan account
    /// </summary>
    [DataContract(Name = "StudentLoan")]
    public partial class StudentLoan : Dictionary<String, Object>, IEquatable<StudentLoan>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StudentLoan" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StudentLoan()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="StudentLoan" /> class.
        /// </summary>
        /// <param name="accountId">The ID of the account that this liability belongs to. (required).</param>
        /// <param name="accountNumber">The account number of the loan. For some institutions, this may be a masked version of the number (e.g., the last 4 digits instead of the entire number). (required).</param>
        /// <param name="disbursementDates">The dates on which loaned funds were disbursed or will be disbursed. These are often in the past. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). (required).</param>
        /// <param name="expectedPayoffDate">The date when the student loan is expected to be paid off. Availability for this field is limited. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). (required).</param>
        /// <param name="guarantor">The guarantor of the student loan. (required).</param>
        /// <param name="interestRatePercentage">The interest rate on the loan as a percentage. (required).</param>
        /// <param name="isOverdue">&#x60;true&#x60; if a payment is currently overdue. Availability for this field is limited. (required).</param>
        /// <param name="lastPaymentAmount">The amount of the last payment. (required).</param>
        /// <param name="lastPaymentDate">The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). (required).</param>
        /// <param name="lastStatementIssueDate">The date of the last statement. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). (required).</param>
        /// <param name="loanName">The type of loan, e.g., \&quot;Consolidation Loans\&quot;. (required).</param>
        /// <param name="loanStatus">loanStatus (required).</param>
        /// <param name="minimumPaymentAmount">The minimum payment due for the next billing cycle. There are some exceptions: Some institutions require a minimum payment across all loans associated with an account number. Our API presents that same minimum payment amount on each loan. The institutions that do this are: Great Lakes ( &#x60;ins_116861&#x60;), Firstmark (&#x60;ins_116295&#x60;), Commonbond Firstmark Services (&#x60;ins_116950&#x60;), Nelnet (&#x60;ins_116528&#x60;), EdFinancial Services (&#x60;ins_116304&#x60;), Granite State (&#x60;ins_116308&#x60;), and Oklahoma Student Loan Authority (&#x60;ins_116945&#x60;). Firstmark (&#x60;ins_116295&#x60; ) and Navient (&#x60;ins_116248&#x60;) will display as $0 if there is an autopay program in effect. (required).</param>
        /// <param name="nextPaymentDueDate">The due date for the next payment. The due date is &#x60;null&#x60; if a payment is not expected. A payment is not expected if &#x60;loan_status.type&#x60; is &#x60;deferment&#x60;, &#x60;in_school&#x60;, &#x60;consolidated&#x60;, &#x60;paid in full&#x60;, or &#x60;transferred&#x60;. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). (required).</param>
        /// <param name="originationDate">The date on which the loan was initially lent. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).  (required).</param>
        /// <param name="originationPrincipalAmount">The original principal balance of the loan. (required).</param>
        /// <param name="outstandingInterestAmount">The total dollar amount of the accrued interest balance. For Sallie Mae ( &#x60;ins_116944&#x60;), this amount is included in the current balance of the loan, so this field will return as &#x60;null&#x60;. (required).</param>
        /// <param name="paymentReferenceNumber">The relevant account number that should be used to reference this loan for payments. In the majority of cases, &#x60;payment_reference_number&#x60; will match a&#x60;ccount_number,&#x60; but in some institutions, such as Great Lakes (&#x60;ins_116861&#x60;), it will be different. (required).</param>
        /// <param name="pslfStatus">pslfStatus (required).</param>
        /// <param name="repaymentPlan">repaymentPlan (required).</param>
        /// <param name="sequenceNumber">The sequence number of the student loan. Heartland ECSI (&#x60;ins_116948&#x60;) does not make this field available. (required).</param>
        /// <param name="servicerAddress">servicerAddress (required).</param>
        /// <param name="ytdInterestPaid">The year to date (YTD) interest paid. Availability for this field is limited. (required).</param>
        /// <param name="ytdPrincipalPaid">The year to date (YTD) principal paid. Availability for this field is limited. (required).</param>
        public StudentLoan(string accountId = default(string), string accountNumber = default(string), List<DateTime> disbursementDates = default(List<DateTime>), DateTime? expectedPayoffDate = default(DateTime?), string guarantor = default(string), decimal interestRatePercentage = default(decimal), bool? isOverdue = default(bool?), decimal? lastPaymentAmount = default(decimal?), DateTime? lastPaymentDate = default(DateTime?), DateTime? lastStatementIssueDate = default(DateTime?), string loanName = default(string), StudentLoanStatus loanStatus = default(StudentLoanStatus), decimal? minimumPaymentAmount = default(decimal?), DateTime? nextPaymentDueDate = default(DateTime?), DateTime? originationDate = default(DateTime?), decimal? originationPrincipalAmount = default(decimal?), decimal? outstandingInterestAmount = default(decimal?), string paymentReferenceNumber = default(string), PSLFStatus pslfStatus = default(PSLFStatus), StudentRepaymentPlan repaymentPlan = default(StudentRepaymentPlan), string sequenceNumber = default(string), ServicerAddressData servicerAddress = default(ServicerAddressData), decimal? ytdInterestPaid = default(decimal?), decimal? ytdPrincipalPaid = default(decimal?)) : base()
        {
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new ArgumentNullException("accountId is a required property for StudentLoan and cannot be null");
            }
            this.AccountId = accountId;
            // to ensure "accountNumber" is required (not null)
            if (accountNumber == null)
            {
                throw new ArgumentNullException("accountNumber is a required property for StudentLoan and cannot be null");
            }
            this.AccountNumber = accountNumber;
            // to ensure "disbursementDates" is required (not null)
            if (disbursementDates == null)
            {
                throw new ArgumentNullException("disbursementDates is a required property for StudentLoan and cannot be null");
            }
            this.DisbursementDates = disbursementDates;
            // to ensure "expectedPayoffDate" is required (not null)
            if (expectedPayoffDate == null)
            {
                throw new ArgumentNullException("expectedPayoffDate is a required property for StudentLoan and cannot be null");
            }
            this.ExpectedPayoffDate = expectedPayoffDate;
            // to ensure "guarantor" is required (not null)
            if (guarantor == null)
            {
                throw new ArgumentNullException("guarantor is a required property for StudentLoan and cannot be null");
            }
            this.Guarantor = guarantor;
            this.InterestRatePercentage = interestRatePercentage;
            // to ensure "isOverdue" is required (not null)
            if (isOverdue == null)
            {
                throw new ArgumentNullException("isOverdue is a required property for StudentLoan and cannot be null");
            }
            this.IsOverdue = isOverdue;
            // to ensure "lastPaymentAmount" is required (not null)
            if (lastPaymentAmount == null)
            {
                throw new ArgumentNullException("lastPaymentAmount is a required property for StudentLoan and cannot be null");
            }
            this.LastPaymentAmount = lastPaymentAmount;
            // to ensure "lastPaymentDate" is required (not null)
            if (lastPaymentDate == null)
            {
                throw new ArgumentNullException("lastPaymentDate is a required property for StudentLoan and cannot be null");
            }
            this.LastPaymentDate = lastPaymentDate;
            // to ensure "lastStatementIssueDate" is required (not null)
            if (lastStatementIssueDate == null)
            {
                throw new ArgumentNullException("lastStatementIssueDate is a required property for StudentLoan and cannot be null");
            }
            this.LastStatementIssueDate = lastStatementIssueDate;
            // to ensure "loanName" is required (not null)
            if (loanName == null)
            {
                throw new ArgumentNullException("loanName is a required property for StudentLoan and cannot be null");
            }
            this.LoanName = loanName;
            // to ensure "loanStatus" is required (not null)
            if (loanStatus == null)
            {
                throw new ArgumentNullException("loanStatus is a required property for StudentLoan and cannot be null");
            }
            this.LoanStatus = loanStatus;
            // to ensure "minimumPaymentAmount" is required (not null)
            if (minimumPaymentAmount == null)
            {
                throw new ArgumentNullException("minimumPaymentAmount is a required property for StudentLoan and cannot be null");
            }
            this.MinimumPaymentAmount = minimumPaymentAmount;
            // to ensure "nextPaymentDueDate" is required (not null)
            if (nextPaymentDueDate == null)
            {
                throw new ArgumentNullException("nextPaymentDueDate is a required property for StudentLoan and cannot be null");
            }
            this.NextPaymentDueDate = nextPaymentDueDate;
            // to ensure "originationDate" is required (not null)
            if (originationDate == null)
            {
                throw new ArgumentNullException("originationDate is a required property for StudentLoan and cannot be null");
            }
            this.OriginationDate = originationDate;
            // to ensure "originationPrincipalAmount" is required (not null)
            if (originationPrincipalAmount == null)
            {
                throw new ArgumentNullException("originationPrincipalAmount is a required property for StudentLoan and cannot be null");
            }
            this.OriginationPrincipalAmount = originationPrincipalAmount;
            // to ensure "outstandingInterestAmount" is required (not null)
            if (outstandingInterestAmount == null)
            {
                throw new ArgumentNullException("outstandingInterestAmount is a required property for StudentLoan and cannot be null");
            }
            this.OutstandingInterestAmount = outstandingInterestAmount;
            // to ensure "paymentReferenceNumber" is required (not null)
            if (paymentReferenceNumber == null)
            {
                throw new ArgumentNullException("paymentReferenceNumber is a required property for StudentLoan and cannot be null");
            }
            this.PaymentReferenceNumber = paymentReferenceNumber;
            // to ensure "pslfStatus" is required (not null)
            if (pslfStatus == null)
            {
                throw new ArgumentNullException("pslfStatus is a required property for StudentLoan and cannot be null");
            }
            this.PslfStatus = pslfStatus;
            // to ensure "repaymentPlan" is required (not null)
            if (repaymentPlan == null)
            {
                throw new ArgumentNullException("repaymentPlan is a required property for StudentLoan and cannot be null");
            }
            this.RepaymentPlan = repaymentPlan;
            // to ensure "sequenceNumber" is required (not null)
            if (sequenceNumber == null)
            {
                throw new ArgumentNullException("sequenceNumber is a required property for StudentLoan and cannot be null");
            }
            this.SequenceNumber = sequenceNumber;
            // to ensure "servicerAddress" is required (not null)
            if (servicerAddress == null)
            {
                throw new ArgumentNullException("servicerAddress is a required property for StudentLoan and cannot be null");
            }
            this.ServicerAddress = servicerAddress;
            // to ensure "ytdInterestPaid" is required (not null)
            if (ytdInterestPaid == null)
            {
                throw new ArgumentNullException("ytdInterestPaid is a required property for StudentLoan and cannot be null");
            }
            this.YtdInterestPaid = ytdInterestPaid;
            // to ensure "ytdPrincipalPaid" is required (not null)
            if (ytdPrincipalPaid == null)
            {
                throw new ArgumentNullException("ytdPrincipalPaid is a required property for StudentLoan and cannot be null");
            }
            this.YtdPrincipalPaid = ytdPrincipalPaid;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The ID of the account that this liability belongs to.
        /// </summary>
        /// <value>The ID of the account that this liability belongs to.</value>
        [DataMember(Name = "account_id", IsRequired = true, EmitDefaultValue = true)]
        public string AccountId { get; set; }

        /// <summary>
        /// The account number of the loan. For some institutions, this may be a masked version of the number (e.g., the last 4 digits instead of the entire number).
        /// </summary>
        /// <value>The account number of the loan. For some institutions, this may be a masked version of the number (e.g., the last 4 digits instead of the entire number).</value>
        [DataMember(Name = "account_number", IsRequired = true, EmitDefaultValue = true)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// The dates on which loaned funds were disbursed or will be disbursed. These are often in the past. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
        /// </summary>
        /// <value>The dates on which loaned funds were disbursed or will be disbursed. These are often in the past. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).</value>
        [DataMember(Name = "disbursement_dates", IsRequired = true, EmitDefaultValue = true)]
        public List<DateTime> DisbursementDates { get; set; }

        /// <summary>
        /// The date when the student loan is expected to be paid off. Availability for this field is limited. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
        /// </summary>
        /// <value>The date when the student loan is expected to be paid off. Availability for this field is limited. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).</value>
        [DataMember(Name = "expected_payoff_date", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? ExpectedPayoffDate { get; set; }

        /// <summary>
        /// The guarantor of the student loan.
        /// </summary>
        /// <value>The guarantor of the student loan.</value>
        [DataMember(Name = "guarantor", IsRequired = true, EmitDefaultValue = true)]
        public string Guarantor { get; set; }

        /// <summary>
        /// The interest rate on the loan as a percentage.
        /// </summary>
        /// <value>The interest rate on the loan as a percentage.</value>
        [DataMember(Name = "interest_rate_percentage", IsRequired = true, EmitDefaultValue = false)]
        public decimal InterestRatePercentage { get; set; }

        /// <summary>
        /// &#x60;true&#x60; if a payment is currently overdue. Availability for this field is limited.
        /// </summary>
        /// <value>&#x60;true&#x60; if a payment is currently overdue. Availability for this field is limited.</value>
        [DataMember(Name = "is_overdue", IsRequired = true, EmitDefaultValue = true)]
        public bool? IsOverdue { get; set; }

        /// <summary>
        /// The amount of the last payment.
        /// </summary>
        /// <value>The amount of the last payment.</value>
        [DataMember(Name = "last_payment_amount", IsRequired = true, EmitDefaultValue = true)]
        public decimal? LastPaymentAmount { get; set; }

        /// <summary>
        /// The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
        /// </summary>
        /// <value>The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).</value>
        [DataMember(Name = "last_payment_date", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? LastPaymentDate { get; set; }

        /// <summary>
        /// The date of the last statement. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
        /// </summary>
        /// <value>The date of the last statement. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).</value>
        [DataMember(Name = "last_statement_issue_date", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? LastStatementIssueDate { get; set; }

        /// <summary>
        /// The type of loan, e.g., \&quot;Consolidation Loans\&quot;.
        /// </summary>
        /// <value>The type of loan, e.g., \&quot;Consolidation Loans\&quot;.</value>
        [DataMember(Name = "loan_name", IsRequired = true, EmitDefaultValue = true)]
        public string LoanName { get; set; }

        /// <summary>
        /// Gets or Sets LoanStatus
        /// </summary>
        [DataMember(Name = "loan_status", IsRequired = true, EmitDefaultValue = false)]
        public StudentLoanStatus LoanStatus { get; set; }

        /// <summary>
        /// The minimum payment due for the next billing cycle. There are some exceptions: Some institutions require a minimum payment across all loans associated with an account number. Our API presents that same minimum payment amount on each loan. The institutions that do this are: Great Lakes ( &#x60;ins_116861&#x60;), Firstmark (&#x60;ins_116295&#x60;), Commonbond Firstmark Services (&#x60;ins_116950&#x60;), Nelnet (&#x60;ins_116528&#x60;), EdFinancial Services (&#x60;ins_116304&#x60;), Granite State (&#x60;ins_116308&#x60;), and Oklahoma Student Loan Authority (&#x60;ins_116945&#x60;). Firstmark (&#x60;ins_116295&#x60; ) and Navient (&#x60;ins_116248&#x60;) will display as $0 if there is an autopay program in effect.
        /// </summary>
        /// <value>The minimum payment due for the next billing cycle. There are some exceptions: Some institutions require a minimum payment across all loans associated with an account number. Our API presents that same minimum payment amount on each loan. The institutions that do this are: Great Lakes ( &#x60;ins_116861&#x60;), Firstmark (&#x60;ins_116295&#x60;), Commonbond Firstmark Services (&#x60;ins_116950&#x60;), Nelnet (&#x60;ins_116528&#x60;), EdFinancial Services (&#x60;ins_116304&#x60;), Granite State (&#x60;ins_116308&#x60;), and Oklahoma Student Loan Authority (&#x60;ins_116945&#x60;). Firstmark (&#x60;ins_116295&#x60; ) and Navient (&#x60;ins_116248&#x60;) will display as $0 if there is an autopay program in effect.</value>
        [DataMember(Name = "minimum_payment_amount", IsRequired = true, EmitDefaultValue = true)]
        public decimal? MinimumPaymentAmount { get; set; }

        /// <summary>
        /// The due date for the next payment. The due date is &#x60;null&#x60; if a payment is not expected. A payment is not expected if &#x60;loan_status.type&#x60; is &#x60;deferment&#x60;, &#x60;in_school&#x60;, &#x60;consolidated&#x60;, &#x60;paid in full&#x60;, or &#x60;transferred&#x60;. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
        /// </summary>
        /// <value>The due date for the next payment. The due date is &#x60;null&#x60; if a payment is not expected. A payment is not expected if &#x60;loan_status.type&#x60; is &#x60;deferment&#x60;, &#x60;in_school&#x60;, &#x60;consolidated&#x60;, &#x60;paid in full&#x60;, or &#x60;transferred&#x60;. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).</value>
        [DataMember(Name = "next_payment_due_date", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? NextPaymentDueDate { get; set; }

        /// <summary>
        /// The date on which the loan was initially lent. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). 
        /// </summary>
        /// <value>The date on which the loan was initially lent. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). </value>
        [DataMember(Name = "origination_date", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? OriginationDate { get; set; }

        /// <summary>
        /// The original principal balance of the loan.
        /// </summary>
        /// <value>The original principal balance of the loan.</value>
        [DataMember(Name = "origination_principal_amount", IsRequired = true, EmitDefaultValue = true)]
        public decimal? OriginationPrincipalAmount { get; set; }

        /// <summary>
        /// The total dollar amount of the accrued interest balance. For Sallie Mae ( &#x60;ins_116944&#x60;), this amount is included in the current balance of the loan, so this field will return as &#x60;null&#x60;.
        /// </summary>
        /// <value>The total dollar amount of the accrued interest balance. For Sallie Mae ( &#x60;ins_116944&#x60;), this amount is included in the current balance of the loan, so this field will return as &#x60;null&#x60;.</value>
        [DataMember(Name = "outstanding_interest_amount", IsRequired = true, EmitDefaultValue = true)]
        public decimal? OutstandingInterestAmount { get; set; }

        /// <summary>
        /// The relevant account number that should be used to reference this loan for payments. In the majority of cases, &#x60;payment_reference_number&#x60; will match a&#x60;ccount_number,&#x60; but in some institutions, such as Great Lakes (&#x60;ins_116861&#x60;), it will be different.
        /// </summary>
        /// <value>The relevant account number that should be used to reference this loan for payments. In the majority of cases, &#x60;payment_reference_number&#x60; will match a&#x60;ccount_number,&#x60; but in some institutions, such as Great Lakes (&#x60;ins_116861&#x60;), it will be different.</value>
        [DataMember(Name = "payment_reference_number", IsRequired = true, EmitDefaultValue = true)]
        public string PaymentReferenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets PslfStatus
        /// </summary>
        [DataMember(Name = "pslf_status", IsRequired = true, EmitDefaultValue = false)]
        public PSLFStatus PslfStatus { get; set; }

        /// <summary>
        /// Gets or Sets RepaymentPlan
        /// </summary>
        [DataMember(Name = "repayment_plan", IsRequired = true, EmitDefaultValue = false)]
        public StudentRepaymentPlan RepaymentPlan { get; set; }

        /// <summary>
        /// The sequence number of the student loan. Heartland ECSI (&#x60;ins_116948&#x60;) does not make this field available.
        /// </summary>
        /// <value>The sequence number of the student loan. Heartland ECSI (&#x60;ins_116948&#x60;) does not make this field available.</value>
        [DataMember(Name = "sequence_number", IsRequired = true, EmitDefaultValue = true)]
        public string SequenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets ServicerAddress
        /// </summary>
        [DataMember(Name = "servicer_address", IsRequired = true, EmitDefaultValue = false)]
        public ServicerAddressData ServicerAddress { get; set; }

        /// <summary>
        /// The year to date (YTD) interest paid. Availability for this field is limited.
        /// </summary>
        /// <value>The year to date (YTD) interest paid. Availability for this field is limited.</value>
        [DataMember(Name = "ytd_interest_paid", IsRequired = true, EmitDefaultValue = true)]
        public decimal? YtdInterestPaid { get; set; }

        /// <summary>
        /// The year to date (YTD) principal paid. Availability for this field is limited.
        /// </summary>
        /// <value>The year to date (YTD) principal paid. Availability for this field is limited.</value>
        [DataMember(Name = "ytd_principal_paid", IsRequired = true, EmitDefaultValue = true)]
        public decimal? YtdPrincipalPaid { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StudentLoan {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  DisbursementDates: ").Append(DisbursementDates).Append("\n");
            sb.Append("  ExpectedPayoffDate: ").Append(ExpectedPayoffDate).Append("\n");
            sb.Append("  Guarantor: ").Append(Guarantor).Append("\n");
            sb.Append("  InterestRatePercentage: ").Append(InterestRatePercentage).Append("\n");
            sb.Append("  IsOverdue: ").Append(IsOverdue).Append("\n");
            sb.Append("  LastPaymentAmount: ").Append(LastPaymentAmount).Append("\n");
            sb.Append("  LastPaymentDate: ").Append(LastPaymentDate).Append("\n");
            sb.Append("  LastStatementIssueDate: ").Append(LastStatementIssueDate).Append("\n");
            sb.Append("  LoanName: ").Append(LoanName).Append("\n");
            sb.Append("  LoanStatus: ").Append(LoanStatus).Append("\n");
            sb.Append("  MinimumPaymentAmount: ").Append(MinimumPaymentAmount).Append("\n");
            sb.Append("  NextPaymentDueDate: ").Append(NextPaymentDueDate).Append("\n");
            sb.Append("  OriginationDate: ").Append(OriginationDate).Append("\n");
            sb.Append("  OriginationPrincipalAmount: ").Append(OriginationPrincipalAmount).Append("\n");
            sb.Append("  OutstandingInterestAmount: ").Append(OutstandingInterestAmount).Append("\n");
            sb.Append("  PaymentReferenceNumber: ").Append(PaymentReferenceNumber).Append("\n");
            sb.Append("  PslfStatus: ").Append(PslfStatus).Append("\n");
            sb.Append("  RepaymentPlan: ").Append(RepaymentPlan).Append("\n");
            sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
            sb.Append("  ServicerAddress: ").Append(ServicerAddress).Append("\n");
            sb.Append("  YtdInterestPaid: ").Append(YtdInterestPaid).Append("\n");
            sb.Append("  YtdPrincipalPaid: ").Append(YtdPrincipalPaid).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StudentLoan);
        }

        /// <summary>
        /// Returns true if StudentLoan instances are equal
        /// </summary>
        /// <param name="input">Instance of StudentLoan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StudentLoan input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && base.Equals(input) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && base.Equals(input) && 
                (
                    this.DisbursementDates == input.DisbursementDates ||
                    this.DisbursementDates != null &&
                    input.DisbursementDates != null &&
                    this.DisbursementDates.SequenceEqual(input.DisbursementDates)
                ) && base.Equals(input) && 
                (
                    this.ExpectedPayoffDate == input.ExpectedPayoffDate ||
                    (this.ExpectedPayoffDate != null &&
                    this.ExpectedPayoffDate.Equals(input.ExpectedPayoffDate))
                ) && base.Equals(input) && 
                (
                    this.Guarantor == input.Guarantor ||
                    (this.Guarantor != null &&
                    this.Guarantor.Equals(input.Guarantor))
                ) && base.Equals(input) && 
                (
                    this.InterestRatePercentage == input.InterestRatePercentage ||
                    this.InterestRatePercentage.Equals(input.InterestRatePercentage)
                ) && base.Equals(input) && 
                (
                    this.IsOverdue == input.IsOverdue ||
                    (this.IsOverdue != null &&
                    this.IsOverdue.Equals(input.IsOverdue))
                ) && base.Equals(input) && 
                (
                    this.LastPaymentAmount == input.LastPaymentAmount ||
                    (this.LastPaymentAmount != null &&
                    this.LastPaymentAmount.Equals(input.LastPaymentAmount))
                ) && base.Equals(input) && 
                (
                    this.LastPaymentDate == input.LastPaymentDate ||
                    (this.LastPaymentDate != null &&
                    this.LastPaymentDate.Equals(input.LastPaymentDate))
                ) && base.Equals(input) && 
                (
                    this.LastStatementIssueDate == input.LastStatementIssueDate ||
                    (this.LastStatementIssueDate != null &&
                    this.LastStatementIssueDate.Equals(input.LastStatementIssueDate))
                ) && base.Equals(input) && 
                (
                    this.LoanName == input.LoanName ||
                    (this.LoanName != null &&
                    this.LoanName.Equals(input.LoanName))
                ) && base.Equals(input) && 
                (
                    this.LoanStatus == input.LoanStatus ||
                    (this.LoanStatus != null &&
                    this.LoanStatus.Equals(input.LoanStatus))
                ) && base.Equals(input) && 
                (
                    this.MinimumPaymentAmount == input.MinimumPaymentAmount ||
                    (this.MinimumPaymentAmount != null &&
                    this.MinimumPaymentAmount.Equals(input.MinimumPaymentAmount))
                ) && base.Equals(input) && 
                (
                    this.NextPaymentDueDate == input.NextPaymentDueDate ||
                    (this.NextPaymentDueDate != null &&
                    this.NextPaymentDueDate.Equals(input.NextPaymentDueDate))
                ) && base.Equals(input) && 
                (
                    this.OriginationDate == input.OriginationDate ||
                    (this.OriginationDate != null &&
                    this.OriginationDate.Equals(input.OriginationDate))
                ) && base.Equals(input) && 
                (
                    this.OriginationPrincipalAmount == input.OriginationPrincipalAmount ||
                    (this.OriginationPrincipalAmount != null &&
                    this.OriginationPrincipalAmount.Equals(input.OriginationPrincipalAmount))
                ) && base.Equals(input) && 
                (
                    this.OutstandingInterestAmount == input.OutstandingInterestAmount ||
                    (this.OutstandingInterestAmount != null &&
                    this.OutstandingInterestAmount.Equals(input.OutstandingInterestAmount))
                ) && base.Equals(input) && 
                (
                    this.PaymentReferenceNumber == input.PaymentReferenceNumber ||
                    (this.PaymentReferenceNumber != null &&
                    this.PaymentReferenceNumber.Equals(input.PaymentReferenceNumber))
                ) && base.Equals(input) && 
                (
                    this.PslfStatus == input.PslfStatus ||
                    (this.PslfStatus != null &&
                    this.PslfStatus.Equals(input.PslfStatus))
                ) && base.Equals(input) && 
                (
                    this.RepaymentPlan == input.RepaymentPlan ||
                    (this.RepaymentPlan != null &&
                    this.RepaymentPlan.Equals(input.RepaymentPlan))
                ) && base.Equals(input) && 
                (
                    this.SequenceNumber == input.SequenceNumber ||
                    (this.SequenceNumber != null &&
                    this.SequenceNumber.Equals(input.SequenceNumber))
                ) && base.Equals(input) && 
                (
                    this.ServicerAddress == input.ServicerAddress ||
                    (this.ServicerAddress != null &&
                    this.ServicerAddress.Equals(input.ServicerAddress))
                ) && base.Equals(input) && 
                (
                    this.YtdInterestPaid == input.YtdInterestPaid ||
                    (this.YtdInterestPaid != null &&
                    this.YtdInterestPaid.Equals(input.YtdInterestPaid))
                ) && base.Equals(input) && 
                (
                    this.YtdPrincipalPaid == input.YtdPrincipalPaid ||
                    (this.YtdPrincipalPaid != null &&
                    this.YtdPrincipalPaid.Equals(input.YtdPrincipalPaid))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                if (this.AccountNumber != null)
                {
                    hashCode = (hashCode * 59) + this.AccountNumber.GetHashCode();
                }
                if (this.DisbursementDates != null)
                {
                    hashCode = (hashCode * 59) + this.DisbursementDates.GetHashCode();
                }
                if (this.ExpectedPayoffDate != null)
                {
                    hashCode = (hashCode * 59) + this.ExpectedPayoffDate.GetHashCode();
                }
                if (this.Guarantor != null)
                {
                    hashCode = (hashCode * 59) + this.Guarantor.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InterestRatePercentage.GetHashCode();
                if (this.IsOverdue != null)
                {
                    hashCode = (hashCode * 59) + this.IsOverdue.GetHashCode();
                }
                if (this.LastPaymentAmount != null)
                {
                    hashCode = (hashCode * 59) + this.LastPaymentAmount.GetHashCode();
                }
                if (this.LastPaymentDate != null)
                {
                    hashCode = (hashCode * 59) + this.LastPaymentDate.GetHashCode();
                }
                if (this.LastStatementIssueDate != null)
                {
                    hashCode = (hashCode * 59) + this.LastStatementIssueDate.GetHashCode();
                }
                if (this.LoanName != null)
                {
                    hashCode = (hashCode * 59) + this.LoanName.GetHashCode();
                }
                if (this.LoanStatus != null)
                {
                    hashCode = (hashCode * 59) + this.LoanStatus.GetHashCode();
                }
                if (this.MinimumPaymentAmount != null)
                {
                    hashCode = (hashCode * 59) + this.MinimumPaymentAmount.GetHashCode();
                }
                if (this.NextPaymentDueDate != null)
                {
                    hashCode = (hashCode * 59) + this.NextPaymentDueDate.GetHashCode();
                }
                if (this.OriginationDate != null)
                {
                    hashCode = (hashCode * 59) + this.OriginationDate.GetHashCode();
                }
                if (this.OriginationPrincipalAmount != null)
                {
                    hashCode = (hashCode * 59) + this.OriginationPrincipalAmount.GetHashCode();
                }
                if (this.OutstandingInterestAmount != null)
                {
                    hashCode = (hashCode * 59) + this.OutstandingInterestAmount.GetHashCode();
                }
                if (this.PaymentReferenceNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentReferenceNumber.GetHashCode();
                }
                if (this.PslfStatus != null)
                {
                    hashCode = (hashCode * 59) + this.PslfStatus.GetHashCode();
                }
                if (this.RepaymentPlan != null)
                {
                    hashCode = (hashCode * 59) + this.RepaymentPlan.GetHashCode();
                }
                if (this.SequenceNumber != null)
                {
                    hashCode = (hashCode * 59) + this.SequenceNumber.GetHashCode();
                }
                if (this.ServicerAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ServicerAddress.GetHashCode();
                }
                if (this.YtdInterestPaid != null)
                {
                    hashCode = (hashCode * 59) + this.YtdInterestPaid.GetHashCode();
                }
                if (this.YtdPrincipalPaid != null)
                {
                    hashCode = (hashCode * 59) + this.YtdPrincipalPaid.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
