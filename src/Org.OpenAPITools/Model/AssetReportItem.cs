/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A representation of an Item within an Asset Report.
    /// </summary>
    [DataContract(Name = "AssetReportItem")]
    public partial class AssetReportItem : Dictionary<String, Object>, IEquatable<AssetReportItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetReportItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AssetReportItem()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetReportItem" /> class.
        /// </summary>
        /// <param name="itemId">The &#x60;item_id&#x60; of the Item associated with this webhook, warning, or error (required).</param>
        /// <param name="institutionName">The full financial institution name associated with the Item. (required).</param>
        /// <param name="institutionId">The id of the financial institution associated with the Item. (required).</param>
        /// <param name="dateLastUpdated">The date and time when this Item’s data was last retrieved from the financial institution, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format. (required).</param>
        /// <param name="accounts">Data about each of the accounts open on the Item. (required).</param>
        public AssetReportItem(string itemId = default(string), string institutionName = default(string), string institutionId = default(string), DateTime dateLastUpdated = default(DateTime), List<AccountAssets> accounts = default(List<AccountAssets>)) : base()
        {
            // to ensure "itemId" is required (not null)
            if (itemId == null)
            {
                throw new ArgumentNullException("itemId is a required property for AssetReportItem and cannot be null");
            }
            this.ItemId = itemId;
            // to ensure "institutionName" is required (not null)
            if (institutionName == null)
            {
                throw new ArgumentNullException("institutionName is a required property for AssetReportItem and cannot be null");
            }
            this.InstitutionName = institutionName;
            // to ensure "institutionId" is required (not null)
            if (institutionId == null)
            {
                throw new ArgumentNullException("institutionId is a required property for AssetReportItem and cannot be null");
            }
            this.InstitutionId = institutionId;
            this.DateLastUpdated = dateLastUpdated;
            // to ensure "accounts" is required (not null)
            if (accounts == null)
            {
                throw new ArgumentNullException("accounts is a required property for AssetReportItem and cannot be null");
            }
            this.Accounts = accounts;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The &#x60;item_id&#x60; of the Item associated with this webhook, warning, or error
        /// </summary>
        /// <value>The &#x60;item_id&#x60; of the Item associated with this webhook, warning, or error</value>
        [DataMember(Name = "item_id", IsRequired = true, EmitDefaultValue = false)]
        public string ItemId { get; set; }

        /// <summary>
        /// The full financial institution name associated with the Item.
        /// </summary>
        /// <value>The full financial institution name associated with the Item.</value>
        [DataMember(Name = "institution_name", IsRequired = true, EmitDefaultValue = false)]
        public string InstitutionName { get; set; }

        /// <summary>
        /// The id of the financial institution associated with the Item.
        /// </summary>
        /// <value>The id of the financial institution associated with the Item.</value>
        [DataMember(Name = "institution_id", IsRequired = true, EmitDefaultValue = false)]
        public string InstitutionId { get; set; }

        /// <summary>
        /// The date and time when this Item’s data was last retrieved from the financial institution, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
        /// </summary>
        /// <value>The date and time when this Item’s data was last retrieved from the financial institution, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.</value>
        [DataMember(Name = "date_last_updated", IsRequired = true, EmitDefaultValue = false)]
        public DateTime DateLastUpdated { get; set; }

        /// <summary>
        /// Data about each of the accounts open on the Item.
        /// </summary>
        /// <value>Data about each of the accounts open on the Item.</value>
        [DataMember(Name = "accounts", IsRequired = true, EmitDefaultValue = false)]
        public List<AccountAssets> Accounts { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AssetReportItem {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  InstitutionName: ").Append(InstitutionName).Append("\n");
            sb.Append("  InstitutionId: ").Append(InstitutionId).Append("\n");
            sb.Append("  DateLastUpdated: ").Append(DateLastUpdated).Append("\n");
            sb.Append("  Accounts: ").Append(Accounts).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssetReportItem);
        }

        /// <summary>
        /// Returns true if AssetReportItem instances are equal
        /// </summary>
        /// <param name="input">Instance of AssetReportItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetReportItem input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.ItemId == input.ItemId ||
                    (this.ItemId != null &&
                    this.ItemId.Equals(input.ItemId))
                ) && base.Equals(input) && 
                (
                    this.InstitutionName == input.InstitutionName ||
                    (this.InstitutionName != null &&
                    this.InstitutionName.Equals(input.InstitutionName))
                ) && base.Equals(input) && 
                (
                    this.InstitutionId == input.InstitutionId ||
                    (this.InstitutionId != null &&
                    this.InstitutionId.Equals(input.InstitutionId))
                ) && base.Equals(input) && 
                (
                    this.DateLastUpdated == input.DateLastUpdated ||
                    (this.DateLastUpdated != null &&
                    this.DateLastUpdated.Equals(input.DateLastUpdated))
                ) && base.Equals(input) && 
                (
                    this.Accounts == input.Accounts ||
                    this.Accounts != null &&
                    input.Accounts != null &&
                    this.Accounts.SequenceEqual(input.Accounts)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ItemId != null)
                {
                    hashCode = (hashCode * 59) + this.ItemId.GetHashCode();
                }
                if (this.InstitutionName != null)
                {
                    hashCode = (hashCode * 59) + this.InstitutionName.GetHashCode();
                }
                if (this.InstitutionId != null)
                {
                    hashCode = (hashCode * 59) + this.InstitutionId.GetHashCode();
                }
                if (this.DateLastUpdated != null)
                {
                    hashCode = (hashCode * 59) + this.DateLastUpdated.GetHashCode();
                }
                if (this.Accounts != null)
                {
                    hashCode = (hashCode * 59) + this.Accounts.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
