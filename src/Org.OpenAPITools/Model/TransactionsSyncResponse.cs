/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TransactionsSyncResponse defines the response schema for &#x60;/transactions/sync&#x60;
    /// </summary>
    [DataContract(Name = "TransactionsSyncResponse")]
    public partial class TransactionsSyncResponse : Dictionary<String, Object>, IEquatable<TransactionsSyncResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsSyncResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionsSyncResponse()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsSyncResponse" /> class.
        /// </summary>
        /// <param name="added">Transactions that have been added to the item since &#x60;cursor&#x60; ordered by ascending last modified time. (required).</param>
        /// <param name="modified">Transactions that have been modified on the item since &#x60;cursor&#x60; ordered by ascending last modified time. (required).</param>
        /// <param name="removed">Transactions that have been removed from the item since &#x60;cursor&#x60; ordered by ascending last modified time. (required).</param>
        /// <param name="nextCursor">Cursor used for fetching any future updates after the latest update provided in this response. (required).</param>
        /// <param name="hasMore">Represents if more than requested count of transaction updates exist. If true, the additional updates can be fetched by making an additional request with &#x60;cursor&#x60; set to &#x60;next_cursor&#x60;. (required).</param>
        /// <param name="requestId">A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive. (required).</param>
        public TransactionsSyncResponse(List<Transaction> added = default(List<Transaction>), List<Transaction> modified = default(List<Transaction>), List<RemovedTransaction> removed = default(List<RemovedTransaction>), string nextCursor = default(string), bool hasMore = default(bool), string requestId = default(string)) : base()
        {
            // to ensure "added" is required (not null)
            if (added == null)
            {
                throw new ArgumentNullException("added is a required property for TransactionsSyncResponse and cannot be null");
            }
            this.Added = added;
            // to ensure "modified" is required (not null)
            if (modified == null)
            {
                throw new ArgumentNullException("modified is a required property for TransactionsSyncResponse and cannot be null");
            }
            this.Modified = modified;
            // to ensure "removed" is required (not null)
            if (removed == null)
            {
                throw new ArgumentNullException("removed is a required property for TransactionsSyncResponse and cannot be null");
            }
            this.Removed = removed;
            // to ensure "nextCursor" is required (not null)
            if (nextCursor == null)
            {
                throw new ArgumentNullException("nextCursor is a required property for TransactionsSyncResponse and cannot be null");
            }
            this.NextCursor = nextCursor;
            this.HasMore = hasMore;
            // to ensure "requestId" is required (not null)
            if (requestId == null)
            {
                throw new ArgumentNullException("requestId is a required property for TransactionsSyncResponse and cannot be null");
            }
            this.RequestId = requestId;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Transactions that have been added to the item since &#x60;cursor&#x60; ordered by ascending last modified time.
        /// </summary>
        /// <value>Transactions that have been added to the item since &#x60;cursor&#x60; ordered by ascending last modified time.</value>
        [DataMember(Name = "added", IsRequired = true, EmitDefaultValue = false)]
        public List<Transaction> Added { get; set; }

        /// <summary>
        /// Transactions that have been modified on the item since &#x60;cursor&#x60; ordered by ascending last modified time.
        /// </summary>
        /// <value>Transactions that have been modified on the item since &#x60;cursor&#x60; ordered by ascending last modified time.</value>
        [DataMember(Name = "modified", IsRequired = true, EmitDefaultValue = false)]
        public List<Transaction> Modified { get; set; }

        /// <summary>
        /// Transactions that have been removed from the item since &#x60;cursor&#x60; ordered by ascending last modified time.
        /// </summary>
        /// <value>Transactions that have been removed from the item since &#x60;cursor&#x60; ordered by ascending last modified time.</value>
        [DataMember(Name = "removed", IsRequired = true, EmitDefaultValue = false)]
        public List<RemovedTransaction> Removed { get; set; }

        /// <summary>
        /// Cursor used for fetching any future updates after the latest update provided in this response.
        /// </summary>
        /// <value>Cursor used for fetching any future updates after the latest update provided in this response.</value>
        [DataMember(Name = "next_cursor", IsRequired = true, EmitDefaultValue = false)]
        public string NextCursor { get; set; }

        /// <summary>
        /// Represents if more than requested count of transaction updates exist. If true, the additional updates can be fetched by making an additional request with &#x60;cursor&#x60; set to &#x60;next_cursor&#x60;.
        /// </summary>
        /// <value>Represents if more than requested count of transaction updates exist. If true, the additional updates can be fetched by making an additional request with &#x60;cursor&#x60; set to &#x60;next_cursor&#x60;.</value>
        [DataMember(Name = "has_more", IsRequired = true, EmitDefaultValue = true)]
        public bool HasMore { get; set; }

        /// <summary>
        /// A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
        /// </summary>
        /// <value>A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.</value>
        [DataMember(Name = "request_id", IsRequired = true, EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionsSyncResponse {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Added: ").Append(Added).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  Removed: ").Append(Removed).Append("\n");
            sb.Append("  NextCursor: ").Append(NextCursor).Append("\n");
            sb.Append("  HasMore: ").Append(HasMore).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionsSyncResponse);
        }

        /// <summary>
        /// Returns true if TransactionsSyncResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionsSyncResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionsSyncResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Added == input.Added ||
                    this.Added != null &&
                    input.Added != null &&
                    this.Added.SequenceEqual(input.Added)
                ) && base.Equals(input) && 
                (
                    this.Modified == input.Modified ||
                    this.Modified != null &&
                    input.Modified != null &&
                    this.Modified.SequenceEqual(input.Modified)
                ) && base.Equals(input) && 
                (
                    this.Removed == input.Removed ||
                    this.Removed != null &&
                    input.Removed != null &&
                    this.Removed.SequenceEqual(input.Removed)
                ) && base.Equals(input) && 
                (
                    this.NextCursor == input.NextCursor ||
                    (this.NextCursor != null &&
                    this.NextCursor.Equals(input.NextCursor))
                ) && base.Equals(input) && 
                (
                    this.HasMore == input.HasMore ||
                    this.HasMore.Equals(input.HasMore)
                ) && base.Equals(input) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Added != null)
                {
                    hashCode = (hashCode * 59) + this.Added.GetHashCode();
                }
                if (this.Modified != null)
                {
                    hashCode = (hashCode * 59) + this.Modified.GetHashCode();
                }
                if (this.Removed != null)
                {
                    hashCode = (hashCode * 59) + this.Removed.GetHashCode();
                }
                if (this.NextCursor != null)
                {
                    hashCode = (hashCode * 59) + this.NextCursor.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HasMore.GetHashCode();
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
