/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Identifying information for transferring money to or from a Canadian bank account via EFT.
    /// </summary>
    [DataContract(Name = "NumbersEFTNullable")]
    public partial class NumbersEFTNullable : IEquatable<NumbersEFTNullable>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NumbersEFTNullable" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NumbersEFTNullable() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NumbersEFTNullable" /> class.
        /// </summary>
        /// <param name="accountId">The Plaid account ID associated with the account numbers (required).</param>
        /// <param name="account">The EFT account number for the account (required).</param>
        /// <param name="institution">The EFT institution number for the account (required).</param>
        /// <param name="branch">The EFT branch number for the account (required).</param>
        public NumbersEFTNullable(string accountId = default(string), string account = default(string), string institution = default(string), string branch = default(string))
        {
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new ArgumentNullException("accountId is a required property for NumbersEFTNullable and cannot be null");
            }
            this.AccountId = accountId;
            // to ensure "account" is required (not null)
            if (account == null)
            {
                throw new ArgumentNullException("account is a required property for NumbersEFTNullable and cannot be null");
            }
            this.Account = account;
            // to ensure "institution" is required (not null)
            if (institution == null)
            {
                throw new ArgumentNullException("institution is a required property for NumbersEFTNullable and cannot be null");
            }
            this.Institution = institution;
            // to ensure "branch" is required (not null)
            if (branch == null)
            {
                throw new ArgumentNullException("branch is a required property for NumbersEFTNullable and cannot be null");
            }
            this.Branch = branch;
        }

        /// <summary>
        /// The Plaid account ID associated with the account numbers
        /// </summary>
        /// <value>The Plaid account ID associated with the account numbers</value>
        [DataMember(Name = "account_id", IsRequired = true, EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// The EFT account number for the account
        /// </summary>
        /// <value>The EFT account number for the account</value>
        [DataMember(Name = "account", IsRequired = true, EmitDefaultValue = false)]
        public string Account { get; set; }

        /// <summary>
        /// The EFT institution number for the account
        /// </summary>
        /// <value>The EFT institution number for the account</value>
        [DataMember(Name = "institution", IsRequired = true, EmitDefaultValue = false)]
        public string Institution { get; set; }

        /// <summary>
        /// The EFT branch number for the account
        /// </summary>
        /// <value>The EFT branch number for the account</value>
        [DataMember(Name = "branch", IsRequired = true, EmitDefaultValue = false)]
        public string Branch { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NumbersEFTNullable {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Institution: ").Append(Institution).Append("\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NumbersEFTNullable);
        }

        /// <summary>
        /// Returns true if NumbersEFTNullable instances are equal
        /// </summary>
        /// <param name="input">Instance of NumbersEFTNullable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NumbersEFTNullable input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.Institution == input.Institution ||
                    (this.Institution != null &&
                    this.Institution.Equals(input.Institution))
                ) && 
                (
                    this.Branch == input.Branch ||
                    (this.Branch != null &&
                    this.Branch.Equals(input.Branch))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                if (this.Account != null)
                {
                    hashCode = (hashCode * 59) + this.Account.GetHashCode();
                }
                if (this.Institution != null)
                {
                    hashCode = (hashCode * 59) + this.Institution.GetHashCode();
                }
                if (this.Branch != null)
                {
                    hashCode = (hashCode * 59) + this.Branch.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
