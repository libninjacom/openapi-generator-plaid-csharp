/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Information about the student&#39;s eligibility in the Public Service Loan Forgiveness program. This is only returned if the institution is Fedloan (&#x60;ins_116527&#x60;). 
    /// </summary>
    [DataContract(Name = "PSLFStatus")]
    public partial class PSLFStatus : Dictionary<String, Object>, IEquatable<PSLFStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PSLFStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PSLFStatus()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="PSLFStatus" /> class.
        /// </summary>
        /// <param name="estimatedEligibilityDate">The estimated date borrower will have completed 120 qualifying monthly payments. Returned in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). (required).</param>
        /// <param name="paymentsMade">The number of qualifying payments that have been made. (required).</param>
        /// <param name="paymentsRemaining">The number of qualifying payments remaining. (required).</param>
        public PSLFStatus(DateTime? estimatedEligibilityDate = default(DateTime?), decimal? paymentsMade = default(decimal?), decimal? paymentsRemaining = default(decimal?)) : base()
        {
            // to ensure "estimatedEligibilityDate" is required (not null)
            if (estimatedEligibilityDate == null)
            {
                throw new ArgumentNullException("estimatedEligibilityDate is a required property for PSLFStatus and cannot be null");
            }
            this.EstimatedEligibilityDate = estimatedEligibilityDate;
            // to ensure "paymentsMade" is required (not null)
            if (paymentsMade == null)
            {
                throw new ArgumentNullException("paymentsMade is a required property for PSLFStatus and cannot be null");
            }
            this.PaymentsMade = paymentsMade;
            // to ensure "paymentsRemaining" is required (not null)
            if (paymentsRemaining == null)
            {
                throw new ArgumentNullException("paymentsRemaining is a required property for PSLFStatus and cannot be null");
            }
            this.PaymentsRemaining = paymentsRemaining;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The estimated date borrower will have completed 120 qualifying monthly payments. Returned in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
        /// </summary>
        /// <value>The estimated date borrower will have completed 120 qualifying monthly payments. Returned in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).</value>
        [DataMember(Name = "estimated_eligibility_date", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? EstimatedEligibilityDate { get; set; }

        /// <summary>
        /// The number of qualifying payments that have been made.
        /// </summary>
        /// <value>The number of qualifying payments that have been made.</value>
        [DataMember(Name = "payments_made", IsRequired = true, EmitDefaultValue = true)]
        public decimal? PaymentsMade { get; set; }

        /// <summary>
        /// The number of qualifying payments remaining.
        /// </summary>
        /// <value>The number of qualifying payments remaining.</value>
        [DataMember(Name = "payments_remaining", IsRequired = true, EmitDefaultValue = true)]
        public decimal? PaymentsRemaining { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PSLFStatus {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  EstimatedEligibilityDate: ").Append(EstimatedEligibilityDate).Append("\n");
            sb.Append("  PaymentsMade: ").Append(PaymentsMade).Append("\n");
            sb.Append("  PaymentsRemaining: ").Append(PaymentsRemaining).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PSLFStatus);
        }

        /// <summary>
        /// Returns true if PSLFStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of PSLFStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PSLFStatus input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.EstimatedEligibilityDate == input.EstimatedEligibilityDate ||
                    (this.EstimatedEligibilityDate != null &&
                    this.EstimatedEligibilityDate.Equals(input.EstimatedEligibilityDate))
                ) && base.Equals(input) && 
                (
                    this.PaymentsMade == input.PaymentsMade ||
                    (this.PaymentsMade != null &&
                    this.PaymentsMade.Equals(input.PaymentsMade))
                ) && base.Equals(input) && 
                (
                    this.PaymentsRemaining == input.PaymentsRemaining ||
                    (this.PaymentsRemaining != null &&
                    this.PaymentsRemaining.Equals(input.PaymentsRemaining))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.EstimatedEligibilityDate != null)
                {
                    hashCode = (hashCode * 59) + this.EstimatedEligibilityDate.GetHashCode();
                }
                if (this.PaymentsMade != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentsMade.GetHashCode();
                }
                if (this.PaymentsRemaining != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentsRemaining.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
