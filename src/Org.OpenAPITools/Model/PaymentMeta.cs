/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Transaction information specific to inter-bank transfers. If the transaction was not an inter-bank transfer, all fields will be &#x60;null&#x60;.  If the &#x60;transactions&#x60; object was returned by a Transactions endpoint such as &#x60;/transactions/get&#x60;, the &#x60;payment_meta&#x60; key will always appear, but no data elements are guaranteed. If the &#x60;transactions&#x60; object was returned by an Assets endpoint such as &#x60;/asset_report/get/&#x60; or &#x60;/asset_report/pdf/get&#x60;, this field will only appear in an Asset Report with Insights.
    /// </summary>
    [DataContract(Name = "PaymentMeta")]
    public partial class PaymentMeta : Dictionary<String, Object>, IEquatable<PaymentMeta>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMeta" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentMeta()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMeta" /> class.
        /// </summary>
        /// <param name="referenceNumber">The transaction reference number supplied by the financial institution. (required).</param>
        /// <param name="ppdId">The ACH PPD ID for the payer. (required).</param>
        /// <param name="payee">For transfers, the party that is receiving the transaction. (required).</param>
        /// <param name="byOrderOf">The party initiating a wire transfer. Will be &#x60;null&#x60; if the transaction is not a wire transfer. (required).</param>
        /// <param name="payer">For transfers, the party that is paying the transaction. (required).</param>
        /// <param name="paymentMethod">The type of transfer, e.g. &#39;ACH&#39; (required).</param>
        /// <param name="paymentProcessor">The name of the payment processor (required).</param>
        /// <param name="reason">The payer-supplied description of the transfer. (required).</param>
        public PaymentMeta(string referenceNumber = default(string), string ppdId = default(string), string payee = default(string), string byOrderOf = default(string), string payer = default(string), string paymentMethod = default(string), string paymentProcessor = default(string), string reason = default(string)) : base()
        {
            // to ensure "referenceNumber" is required (not null)
            if (referenceNumber == null)
            {
                throw new ArgumentNullException("referenceNumber is a required property for PaymentMeta and cannot be null");
            }
            this.ReferenceNumber = referenceNumber;
            // to ensure "ppdId" is required (not null)
            if (ppdId == null)
            {
                throw new ArgumentNullException("ppdId is a required property for PaymentMeta and cannot be null");
            }
            this.PpdId = ppdId;
            // to ensure "payee" is required (not null)
            if (payee == null)
            {
                throw new ArgumentNullException("payee is a required property for PaymentMeta and cannot be null");
            }
            this.Payee = payee;
            // to ensure "byOrderOf" is required (not null)
            if (byOrderOf == null)
            {
                throw new ArgumentNullException("byOrderOf is a required property for PaymentMeta and cannot be null");
            }
            this.ByOrderOf = byOrderOf;
            // to ensure "payer" is required (not null)
            if (payer == null)
            {
                throw new ArgumentNullException("payer is a required property for PaymentMeta and cannot be null");
            }
            this.Payer = payer;
            // to ensure "paymentMethod" is required (not null)
            if (paymentMethod == null)
            {
                throw new ArgumentNullException("paymentMethod is a required property for PaymentMeta and cannot be null");
            }
            this.PaymentMethod = paymentMethod;
            // to ensure "paymentProcessor" is required (not null)
            if (paymentProcessor == null)
            {
                throw new ArgumentNullException("paymentProcessor is a required property for PaymentMeta and cannot be null");
            }
            this.PaymentProcessor = paymentProcessor;
            // to ensure "reason" is required (not null)
            if (reason == null)
            {
                throw new ArgumentNullException("reason is a required property for PaymentMeta and cannot be null");
            }
            this.Reason = reason;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The transaction reference number supplied by the financial institution.
        /// </summary>
        /// <value>The transaction reference number supplied by the financial institution.</value>
        [DataMember(Name = "reference_number", IsRequired = true, EmitDefaultValue = true)]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// The ACH PPD ID for the payer.
        /// </summary>
        /// <value>The ACH PPD ID for the payer.</value>
        [DataMember(Name = "ppd_id", IsRequired = true, EmitDefaultValue = true)]
        public string PpdId { get; set; }

        /// <summary>
        /// For transfers, the party that is receiving the transaction.
        /// </summary>
        /// <value>For transfers, the party that is receiving the transaction.</value>
        [DataMember(Name = "payee", IsRequired = true, EmitDefaultValue = true)]
        public string Payee { get; set; }

        /// <summary>
        /// The party initiating a wire transfer. Will be &#x60;null&#x60; if the transaction is not a wire transfer.
        /// </summary>
        /// <value>The party initiating a wire transfer. Will be &#x60;null&#x60; if the transaction is not a wire transfer.</value>
        [DataMember(Name = "by_order_of", IsRequired = true, EmitDefaultValue = true)]
        public string ByOrderOf { get; set; }

        /// <summary>
        /// For transfers, the party that is paying the transaction.
        /// </summary>
        /// <value>For transfers, the party that is paying the transaction.</value>
        [DataMember(Name = "payer", IsRequired = true, EmitDefaultValue = true)]
        public string Payer { get; set; }

        /// <summary>
        /// The type of transfer, e.g. &#39;ACH&#39;
        /// </summary>
        /// <value>The type of transfer, e.g. &#39;ACH&#39;</value>
        [DataMember(Name = "payment_method", IsRequired = true, EmitDefaultValue = true)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// The name of the payment processor
        /// </summary>
        /// <value>The name of the payment processor</value>
        [DataMember(Name = "payment_processor", IsRequired = true, EmitDefaultValue = true)]
        public string PaymentProcessor { get; set; }

        /// <summary>
        /// The payer-supplied description of the transfer.
        /// </summary>
        /// <value>The payer-supplied description of the transfer.</value>
        [DataMember(Name = "reason", IsRequired = true, EmitDefaultValue = true)]
        public string Reason { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentMeta {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ReferenceNumber: ").Append(ReferenceNumber).Append("\n");
            sb.Append("  PpdId: ").Append(PpdId).Append("\n");
            sb.Append("  Payee: ").Append(Payee).Append("\n");
            sb.Append("  ByOrderOf: ").Append(ByOrderOf).Append("\n");
            sb.Append("  Payer: ").Append(Payer).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  PaymentProcessor: ").Append(PaymentProcessor).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentMeta);
        }

        /// <summary>
        /// Returns true if PaymentMeta instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentMeta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentMeta input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.ReferenceNumber == input.ReferenceNumber ||
                    (this.ReferenceNumber != null &&
                    this.ReferenceNumber.Equals(input.ReferenceNumber))
                ) && base.Equals(input) && 
                (
                    this.PpdId == input.PpdId ||
                    (this.PpdId != null &&
                    this.PpdId.Equals(input.PpdId))
                ) && base.Equals(input) && 
                (
                    this.Payee == input.Payee ||
                    (this.Payee != null &&
                    this.Payee.Equals(input.Payee))
                ) && base.Equals(input) && 
                (
                    this.ByOrderOf == input.ByOrderOf ||
                    (this.ByOrderOf != null &&
                    this.ByOrderOf.Equals(input.ByOrderOf))
                ) && base.Equals(input) && 
                (
                    this.Payer == input.Payer ||
                    (this.Payer != null &&
                    this.Payer.Equals(input.Payer))
                ) && base.Equals(input) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && base.Equals(input) && 
                (
                    this.PaymentProcessor == input.PaymentProcessor ||
                    (this.PaymentProcessor != null &&
                    this.PaymentProcessor.Equals(input.PaymentProcessor))
                ) && base.Equals(input) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ReferenceNumber != null)
                {
                    hashCode = (hashCode * 59) + this.ReferenceNumber.GetHashCode();
                }
                if (this.PpdId != null)
                {
                    hashCode = (hashCode * 59) + this.PpdId.GetHashCode();
                }
                if (this.Payee != null)
                {
                    hashCode = (hashCode * 59) + this.Payee.GetHashCode();
                }
                if (this.ByOrderOf != null)
                {
                    hashCode = (hashCode * 59) + this.ByOrderOf.GetHashCode();
                }
                if (this.Payer != null)
                {
                    hashCode = (hashCode * 59) + this.Payer.GetHashCode();
                }
                if (this.PaymentMethod != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMethod.GetHashCode();
                }
                if (this.PaymentProcessor != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentProcessor.GetHashCode();
                }
                if (this.Reason != null)
                {
                    hashCode = (hashCode * 59) + this.Reason.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
