/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Taxpayer ID of the individual receiving the paystub.
    /// </summary>
    [DataContract(Name = "TaxpayerID")]
    public partial class TaxpayerID : Dictionary<String, Object>, IEquatable<TaxpayerID>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxpayerID" /> class.
        /// </summary>
        /// <param name="idType">Type of ID, e.g. &#39;SSN&#39;.</param>
        /// <param name="idMask">ID mask; i.e. last 4 digits of the taxpayer ID.</param>
        /// <param name="last4Digits">Last 4 digits of unique number of ID..</param>
        public TaxpayerID(string idType = default(string), string idMask = default(string), string last4Digits = default(string)) : base()
        {
            this.IdType = idType;
            this.IdMask = idMask;
            this.Last4Digits = last4Digits;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Type of ID, e.g. &#39;SSN&#39;
        /// </summary>
        /// <value>Type of ID, e.g. &#39;SSN&#39;</value>
        [DataMember(Name = "id_type", EmitDefaultValue = true)]
        public string IdType { get; set; }

        /// <summary>
        /// ID mask; i.e. last 4 digits of the taxpayer ID
        /// </summary>
        /// <value>ID mask; i.e. last 4 digits of the taxpayer ID</value>
        [DataMember(Name = "id_mask", EmitDefaultValue = true)]
        public string IdMask { get; set; }

        /// <summary>
        /// Last 4 digits of unique number of ID.
        /// </summary>
        /// <value>Last 4 digits of unique number of ID.</value>
        [DataMember(Name = "last_4_digits", EmitDefaultValue = true)]
        [Obsolete]
        public string Last4Digits { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TaxpayerID {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  IdType: ").Append(IdType).Append("\n");
            sb.Append("  IdMask: ").Append(IdMask).Append("\n");
            sb.Append("  Last4Digits: ").Append(Last4Digits).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaxpayerID);
        }

        /// <summary>
        /// Returns true if TaxpayerID instances are equal
        /// </summary>
        /// <param name="input">Instance of TaxpayerID to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxpayerID input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.IdType == input.IdType ||
                    (this.IdType != null &&
                    this.IdType.Equals(input.IdType))
                ) && base.Equals(input) && 
                (
                    this.IdMask == input.IdMask ||
                    (this.IdMask != null &&
                    this.IdMask.Equals(input.IdMask))
                ) && base.Equals(input) && 
                (
                    this.Last4Digits == input.Last4Digits ||
                    (this.Last4Digits != null &&
                    this.Last4Digits.Equals(input.Last4Digits))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.IdType != null)
                {
                    hashCode = (hashCode * 59) + this.IdType.GetHashCode();
                }
                if (this.IdMask != null)
                {
                    hashCode = (hashCode * 59) + this.IdMask.GetHashCode();
                }
                if (this.Last4Digits != null)
                {
                    hashCode = (hashCode * 59) + this.Last4Digits.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Last4Digits (string) maxLength
            if (this.Last4Digits != null && this.Last4Digits.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Last4Digits, length must be less than 4.", new [] { "Last4Digits" });
            }

            // Last4Digits (string) minLength
            if (this.Last4Digits != null && this.Last4Digits.Length < 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Last4Digits, length must be greater than 4.", new [] { "Last4Digits" });
            }

            yield break;
        }
    }

}
