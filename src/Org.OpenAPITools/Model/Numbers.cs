/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Account and bank identifier number data used to configure the test account. All values are optional.
    /// </summary>
    [DataContract(Name = "Numbers")]
    public partial class Numbers : Dictionary<String, Object>, IEquatable<Numbers>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Numbers" /> class.
        /// </summary>
        /// <param name="account">Will be used for the account number..</param>
        /// <param name="achRouting">Must be a valid ACH routing number..</param>
        /// <param name="achWireRouting">Must be a valid wire transfer routing number..</param>
        /// <param name="eftInstitution">EFT institution number. Must be specified alongside &#x60;eft_branch&#x60;..</param>
        /// <param name="eftBranch">EFT branch number. Must be specified alongside &#x60;eft_institution&#x60;..</param>
        /// <param name="internationalBic">Bank identifier code (BIC). Must be specified alongside &#x60;international_iban&#x60;..</param>
        /// <param name="internationalIban">International bank account number (IBAN). If no account number is specified via &#x60;account&#x60;, will also be used as the account number by default. Must be specified alongside &#x60;international_bic&#x60;..</param>
        /// <param name="bacsSortCode">BACS sort code.</param>
        public Numbers(string account = default(string), string achRouting = default(string), string achWireRouting = default(string), string eftInstitution = default(string), string eftBranch = default(string), string internationalBic = default(string), string internationalIban = default(string), string bacsSortCode = default(string)) : base()
        {
            this.Account = account;
            this.AchRouting = achRouting;
            this.AchWireRouting = achWireRouting;
            this.EftInstitution = eftInstitution;
            this.EftBranch = eftBranch;
            this.InternationalBic = internationalBic;
            this.InternationalIban = internationalIban;
            this.BacsSortCode = bacsSortCode;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Will be used for the account number.
        /// </summary>
        /// <value>Will be used for the account number.</value>
        [DataMember(Name = "account", EmitDefaultValue = false)]
        public string Account { get; set; }

        /// <summary>
        /// Must be a valid ACH routing number.
        /// </summary>
        /// <value>Must be a valid ACH routing number.</value>
        [DataMember(Name = "ach_routing", EmitDefaultValue = false)]
        public string AchRouting { get; set; }

        /// <summary>
        /// Must be a valid wire transfer routing number.
        /// </summary>
        /// <value>Must be a valid wire transfer routing number.</value>
        [DataMember(Name = "ach_wire_routing", EmitDefaultValue = false)]
        public string AchWireRouting { get; set; }

        /// <summary>
        /// EFT institution number. Must be specified alongside &#x60;eft_branch&#x60;.
        /// </summary>
        /// <value>EFT institution number. Must be specified alongside &#x60;eft_branch&#x60;.</value>
        [DataMember(Name = "eft_institution", EmitDefaultValue = false)]
        public string EftInstitution { get; set; }

        /// <summary>
        /// EFT branch number. Must be specified alongside &#x60;eft_institution&#x60;.
        /// </summary>
        /// <value>EFT branch number. Must be specified alongside &#x60;eft_institution&#x60;.</value>
        [DataMember(Name = "eft_branch", EmitDefaultValue = false)]
        public string EftBranch { get; set; }

        /// <summary>
        /// Bank identifier code (BIC). Must be specified alongside &#x60;international_iban&#x60;.
        /// </summary>
        /// <value>Bank identifier code (BIC). Must be specified alongside &#x60;international_iban&#x60;.</value>
        [DataMember(Name = "international_bic", EmitDefaultValue = false)]
        public string InternationalBic { get; set; }

        /// <summary>
        /// International bank account number (IBAN). If no account number is specified via &#x60;account&#x60;, will also be used as the account number by default. Must be specified alongside &#x60;international_bic&#x60;.
        /// </summary>
        /// <value>International bank account number (IBAN). If no account number is specified via &#x60;account&#x60;, will also be used as the account number by default. Must be specified alongside &#x60;international_bic&#x60;.</value>
        [DataMember(Name = "international_iban", EmitDefaultValue = false)]
        public string InternationalIban { get; set; }

        /// <summary>
        /// BACS sort code
        /// </summary>
        /// <value>BACS sort code</value>
        [DataMember(Name = "bacs_sort_code", EmitDefaultValue = false)]
        public string BacsSortCode { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Numbers {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  AchRouting: ").Append(AchRouting).Append("\n");
            sb.Append("  AchWireRouting: ").Append(AchWireRouting).Append("\n");
            sb.Append("  EftInstitution: ").Append(EftInstitution).Append("\n");
            sb.Append("  EftBranch: ").Append(EftBranch).Append("\n");
            sb.Append("  InternationalBic: ").Append(InternationalBic).Append("\n");
            sb.Append("  InternationalIban: ").Append(InternationalIban).Append("\n");
            sb.Append("  BacsSortCode: ").Append(BacsSortCode).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Numbers);
        }

        /// <summary>
        /// Returns true if Numbers instances are equal
        /// </summary>
        /// <param name="input">Instance of Numbers to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Numbers input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && base.Equals(input) && 
                (
                    this.AchRouting == input.AchRouting ||
                    (this.AchRouting != null &&
                    this.AchRouting.Equals(input.AchRouting))
                ) && base.Equals(input) && 
                (
                    this.AchWireRouting == input.AchWireRouting ||
                    (this.AchWireRouting != null &&
                    this.AchWireRouting.Equals(input.AchWireRouting))
                ) && base.Equals(input) && 
                (
                    this.EftInstitution == input.EftInstitution ||
                    (this.EftInstitution != null &&
                    this.EftInstitution.Equals(input.EftInstitution))
                ) && base.Equals(input) && 
                (
                    this.EftBranch == input.EftBranch ||
                    (this.EftBranch != null &&
                    this.EftBranch.Equals(input.EftBranch))
                ) && base.Equals(input) && 
                (
                    this.InternationalBic == input.InternationalBic ||
                    (this.InternationalBic != null &&
                    this.InternationalBic.Equals(input.InternationalBic))
                ) && base.Equals(input) && 
                (
                    this.InternationalIban == input.InternationalIban ||
                    (this.InternationalIban != null &&
                    this.InternationalIban.Equals(input.InternationalIban))
                ) && base.Equals(input) && 
                (
                    this.BacsSortCode == input.BacsSortCode ||
                    (this.BacsSortCode != null &&
                    this.BacsSortCode.Equals(input.BacsSortCode))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Account != null)
                {
                    hashCode = (hashCode * 59) + this.Account.GetHashCode();
                }
                if (this.AchRouting != null)
                {
                    hashCode = (hashCode * 59) + this.AchRouting.GetHashCode();
                }
                if (this.AchWireRouting != null)
                {
                    hashCode = (hashCode * 59) + this.AchWireRouting.GetHashCode();
                }
                if (this.EftInstitution != null)
                {
                    hashCode = (hashCode * 59) + this.EftInstitution.GetHashCode();
                }
                if (this.EftBranch != null)
                {
                    hashCode = (hashCode * 59) + this.EftBranch.GetHashCode();
                }
                if (this.InternationalBic != null)
                {
                    hashCode = (hashCode * 59) + this.InternationalBic.GetHashCode();
                }
                if (this.InternationalIban != null)
                {
                    hashCode = (hashCode * 59) + this.InternationalIban.GetHashCode();
                }
                if (this.BacsSortCode != null)
                {
                    hashCode = (hashCode * 59) + this.BacsSortCode.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
