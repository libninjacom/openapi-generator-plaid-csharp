/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines the request schema for &#x60;/sandbox/bank_transfer/simulate&#x60;
    /// </summary>
    [DataContract(Name = "SandboxBankTransferSimulateRequest")]
    public partial class SandboxBankTransferSimulateRequest : IEquatable<SandboxBankTransferSimulateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SandboxBankTransferSimulateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SandboxBankTransferSimulateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SandboxBankTransferSimulateRequest" /> class.
        /// </summary>
        /// <param name="clientId">Your Plaid API &#x60;client_id&#x60;. The &#x60;client_id&#x60; is required and may be provided either in the &#x60;PLAID-CLIENT-ID&#x60; header or as part of a request body..</param>
        /// <param name="secret">Your Plaid API &#x60;secret&#x60;. The &#x60;secret&#x60; is required and may be provided either in the &#x60;PLAID-SECRET&#x60; header or as part of a request body..</param>
        /// <param name="bankTransferId">Plaid’s unique identifier for a bank transfer. (required).</param>
        /// <param name="eventType">The asynchronous event to be simulated. May be: &#x60;posted&#x60;, &#x60;failed&#x60;, or &#x60;reversed&#x60;.  An error will be returned if the event type is incompatible with the current transfer status. Compatible status - -&gt; event type transitions include:  &#x60;pending&#x60; - -&gt; &#x60;failed&#x60;  &#x60;pending&#x60; - -&gt; &#x60;posted&#x60;  &#x60;posted&#x60; - -&gt; &#x60;reversed&#x60;  (required).</param>
        /// <param name="failureReason">failureReason.</param>
        public SandboxBankTransferSimulateRequest(string clientId = default(string), string secret = default(string), string bankTransferId = default(string), string eventType = default(string), BankTransferFailure failureReason = default(BankTransferFailure))
        {
            // to ensure "bankTransferId" is required (not null)
            if (bankTransferId == null)
            {
                throw new ArgumentNullException("bankTransferId is a required property for SandboxBankTransferSimulateRequest and cannot be null");
            }
            this.BankTransferId = bankTransferId;
            // to ensure "eventType" is required (not null)
            if (eventType == null)
            {
                throw new ArgumentNullException("eventType is a required property for SandboxBankTransferSimulateRequest and cannot be null");
            }
            this.EventType = eventType;
            this.ClientId = clientId;
            this.Secret = secret;
            this.FailureReason = failureReason;
        }

        /// <summary>
        /// Your Plaid API &#x60;client_id&#x60;. The &#x60;client_id&#x60; is required and may be provided either in the &#x60;PLAID-CLIENT-ID&#x60; header or as part of a request body.
        /// </summary>
        /// <value>Your Plaid API &#x60;client_id&#x60;. The &#x60;client_id&#x60; is required and may be provided either in the &#x60;PLAID-CLIENT-ID&#x60; header or as part of a request body.</value>
        [DataMember(Name = "client_id", EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Your Plaid API &#x60;secret&#x60;. The &#x60;secret&#x60; is required and may be provided either in the &#x60;PLAID-SECRET&#x60; header or as part of a request body.
        /// </summary>
        /// <value>Your Plaid API &#x60;secret&#x60;. The &#x60;secret&#x60; is required and may be provided either in the &#x60;PLAID-SECRET&#x60; header or as part of a request body.</value>
        [DataMember(Name = "secret", EmitDefaultValue = false)]
        public string Secret { get; set; }

        /// <summary>
        /// Plaid’s unique identifier for a bank transfer.
        /// </summary>
        /// <value>Plaid’s unique identifier for a bank transfer.</value>
        [DataMember(Name = "bank_transfer_id", IsRequired = true, EmitDefaultValue = false)]
        public string BankTransferId { get; set; }

        /// <summary>
        /// The asynchronous event to be simulated. May be: &#x60;posted&#x60;, &#x60;failed&#x60;, or &#x60;reversed&#x60;.  An error will be returned if the event type is incompatible with the current transfer status. Compatible status - -&gt; event type transitions include:  &#x60;pending&#x60; - -&gt; &#x60;failed&#x60;  &#x60;pending&#x60; - -&gt; &#x60;posted&#x60;  &#x60;posted&#x60; - -&gt; &#x60;reversed&#x60; 
        /// </summary>
        /// <value>The asynchronous event to be simulated. May be: &#x60;posted&#x60;, &#x60;failed&#x60;, or &#x60;reversed&#x60;.  An error will be returned if the event type is incompatible with the current transfer status. Compatible status - -&gt; event type transitions include:  &#x60;pending&#x60; - -&gt; &#x60;failed&#x60;  &#x60;pending&#x60; - -&gt; &#x60;posted&#x60;  &#x60;posted&#x60; - -&gt; &#x60;reversed&#x60; </value>
        [DataMember(Name = "event_type", IsRequired = true, EmitDefaultValue = false)]
        public string EventType { get; set; }

        /// <summary>
        /// Gets or Sets FailureReason
        /// </summary>
        [DataMember(Name = "failure_reason", EmitDefaultValue = true)]
        public BankTransferFailure FailureReason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SandboxBankTransferSimulateRequest {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("  BankTransferId: ").Append(BankTransferId).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  FailureReason: ").Append(FailureReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SandboxBankTransferSimulateRequest);
        }

        /// <summary>
        /// Returns true if SandboxBankTransferSimulateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SandboxBankTransferSimulateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SandboxBankTransferSimulateRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.Secret == input.Secret ||
                    (this.Secret != null &&
                    this.Secret.Equals(input.Secret))
                ) && 
                (
                    this.BankTransferId == input.BankTransferId ||
                    (this.BankTransferId != null &&
                    this.BankTransferId.Equals(input.BankTransferId))
                ) && 
                (
                    this.EventType == input.EventType ||
                    (this.EventType != null &&
                    this.EventType.Equals(input.EventType))
                ) && 
                (
                    this.FailureReason == input.FailureReason ||
                    (this.FailureReason != null &&
                    this.FailureReason.Equals(input.FailureReason))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientId.GetHashCode();
                }
                if (this.Secret != null)
                {
                    hashCode = (hashCode * 59) + this.Secret.GetHashCode();
                }
                if (this.BankTransferId != null)
                {
                    hashCode = (hashCode * 59) + this.BankTransferId.GetHashCode();
                }
                if (this.EventType != null)
                {
                    hashCode = (hashCode * 59) + this.EventType.GetHashCode();
                }
                if (this.FailureReason != null)
                {
                    hashCode = (hashCode * 59) + this.FailureReason.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
