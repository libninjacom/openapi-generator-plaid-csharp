/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Object of user ID and auth token pair, permitting Plaid to aggregate a user’s accounts
    /// </summary>
    [DataContract(Name = "ItemImportRequestUserAuth")]
    public partial class ItemImportRequestUserAuth : IEquatable<ItemImportRequestUserAuth>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemImportRequestUserAuth" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ItemImportRequestUserAuth() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemImportRequestUserAuth" /> class.
        /// </summary>
        /// <param name="userId">Opaque user identifier (required).</param>
        /// <param name="authToken">Authorization token Plaid will use to aggregate this user’s accounts (required).</param>
        public ItemImportRequestUserAuth(string userId = default(string), string authToken = default(string))
        {
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new ArgumentNullException("userId is a required property for ItemImportRequestUserAuth and cannot be null");
            }
            this.UserId = userId;
            // to ensure "authToken" is required (not null)
            if (authToken == null)
            {
                throw new ArgumentNullException("authToken is a required property for ItemImportRequestUserAuth and cannot be null");
            }
            this.AuthToken = authToken;
        }

        /// <summary>
        /// Opaque user identifier
        /// </summary>
        /// <value>Opaque user identifier</value>
        [DataMember(Name = "user_id", IsRequired = true, EmitDefaultValue = false)]
        public string UserId { get; set; }

        /// <summary>
        /// Authorization token Plaid will use to aggregate this user’s accounts
        /// </summary>
        /// <value>Authorization token Plaid will use to aggregate this user’s accounts</value>
        [DataMember(Name = "auth_token", IsRequired = true, EmitDefaultValue = false)]
        public string AuthToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ItemImportRequestUserAuth {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  AuthToken: ").Append(AuthToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemImportRequestUserAuth);
        }

        /// <summary>
        /// Returns true if ItemImportRequestUserAuth instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemImportRequestUserAuth to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemImportRequestUserAuth input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.AuthToken == input.AuthToken ||
                    (this.AuthToken != null &&
                    this.AuthToken.Equals(input.AuthToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                if (this.AuthToken != null)
                {
                    hashCode = (hashCode * 59) + this.AuthToken.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
