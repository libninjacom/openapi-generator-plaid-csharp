/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A representation of the status health of a request type. Auth requests, Balance requests, Identity requests, Investments requests, Liabilities requests, Transactions updates, Investments updates, Liabilities updates, and Item logins each have their own status object.
    /// </summary>
    [DataContract(Name = "ProductStatus")]
    public partial class ProductStatus : Dictionary<String, Object>, IEquatable<ProductStatus>, IValidatableObject
    {
        /// <summary>
        /// This field is deprecated in favor of the &#x60;breakdown&#x60; object, which provides more granular institution health data.  &#x60;HEALTHY&#x60;: the majority of requests are successful &#x60;DEGRADED&#x60;: only some requests are successful &#x60;DOWN&#x60;: all requests are failing
        /// </summary>
        /// <value>This field is deprecated in favor of the &#x60;breakdown&#x60; object, which provides more granular institution health data.  &#x60;HEALTHY&#x60;: the majority of requests are successful &#x60;DEGRADED&#x60;: only some requests are successful &#x60;DOWN&#x60;: all requests are failing</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum HEALTHY for value: HEALTHY
            /// </summary>
            [EnumMember(Value = "HEALTHY")]
            HEALTHY = 1,

            /// <summary>
            /// Enum DEGRADED for value: DEGRADED
            /// </summary>
            [EnumMember(Value = "DEGRADED")]
            DEGRADED = 2,

            /// <summary>
            /// Enum DOWN for value: DOWN
            /// </summary>
            [EnumMember(Value = "DOWN")]
            DOWN = 3

        }


        /// <summary>
        /// This field is deprecated in favor of the &#x60;breakdown&#x60; object, which provides more granular institution health data.  &#x60;HEALTHY&#x60;: the majority of requests are successful &#x60;DEGRADED&#x60;: only some requests are successful &#x60;DOWN&#x60;: all requests are failing
        /// </summary>
        /// <value>This field is deprecated in favor of the &#x60;breakdown&#x60; object, which provides more granular institution health data.  &#x60;HEALTHY&#x60;: the majority of requests are successful &#x60;DEGRADED&#x60;: only some requests are successful &#x60;DOWN&#x60;: all requests are failing</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = false)]
        [Obsolete]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProductStatus()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductStatus" /> class.
        /// </summary>
        /// <param name="status">This field is deprecated in favor of the &#x60;breakdown&#x60; object, which provides more granular institution health data.  &#x60;HEALTHY&#x60;: the majority of requests are successful &#x60;DEGRADED&#x60;: only some requests are successful &#x60;DOWN&#x60;: all requests are failing (required).</param>
        /// <param name="lastStatusChange">[ISO 8601](https://wikipedia.org/wiki/ISO_8601) formatted timestamp of the last status change for the institution.  (required).</param>
        /// <param name="breakdown">breakdown (required).</param>
        public ProductStatus(StatusEnum status = default(StatusEnum), DateTime lastStatusChange = default(DateTime), ProductStatusBreakdown breakdown = default(ProductStatusBreakdown)) : base()
        {
            this.Status = status;
            this.LastStatusChange = lastStatusChange;
            // to ensure "breakdown" is required (not null)
            if (breakdown == null)
            {
                throw new ArgumentNullException("breakdown is a required property for ProductStatus and cannot be null");
            }
            this.Breakdown = breakdown;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// [ISO 8601](https://wikipedia.org/wiki/ISO_8601) formatted timestamp of the last status change for the institution. 
        /// </summary>
        /// <value>[ISO 8601](https://wikipedia.org/wiki/ISO_8601) formatted timestamp of the last status change for the institution. </value>
        [DataMember(Name = "last_status_change", IsRequired = true, EmitDefaultValue = false)]
        public DateTime LastStatusChange { get; set; }

        /// <summary>
        /// Gets or Sets Breakdown
        /// </summary>
        [DataMember(Name = "breakdown", IsRequired = true, EmitDefaultValue = false)]
        public ProductStatusBreakdown Breakdown { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductStatus {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  LastStatusChange: ").Append(LastStatusChange).Append("\n");
            sb.Append("  Breakdown: ").Append(Breakdown).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductStatus);
        }

        /// <summary>
        /// Returns true if ProductStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductStatus input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && base.Equals(input) && 
                (
                    this.LastStatusChange == input.LastStatusChange ||
                    (this.LastStatusChange != null &&
                    this.LastStatusChange.Equals(input.LastStatusChange))
                ) && base.Equals(input) && 
                (
                    this.Breakdown == input.Breakdown ||
                    (this.Breakdown != null &&
                    this.Breakdown.Equals(input.Breakdown))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.LastStatusChange != null)
                {
                    hashCode = (hashCode * 59) + this.LastStatusChange.GetHashCode();
                }
                if (this.Breakdown != null)
                {
                    hashCode = (hashCode * 59) + this.Breakdown.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
