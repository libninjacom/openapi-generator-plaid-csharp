/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// An object specifying the arguments originally provided to the &#x60;/link/token/create&#x60; call.
    /// </summary>
    [DataContract(Name = "LinkTokenGetMetadataResponse")]
    public partial class LinkTokenGetMetadataResponse : Dictionary<String, Object>, IEquatable<LinkTokenGetMetadataResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkTokenGetMetadataResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LinkTokenGetMetadataResponse()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkTokenGetMetadataResponse" /> class.
        /// </summary>
        /// <param name="initialProducts">The &#x60;products&#x60; specified in the &#x60;/link/token/create&#x60; call. (required).</param>
        /// <param name="webhook">The &#x60;webhook&#x60; specified in the &#x60;/link/token/create&#x60; call. (required).</param>
        /// <param name="countryCodes">The &#x60;country_codes&#x60; specified in the &#x60;/link/token/create&#x60; call. (required).</param>
        /// <param name="language">The &#x60;language&#x60; specified in the &#x60;/link/token/create&#x60; call. (required).</param>
        /// <param name="accountFilters">accountFilters.</param>
        /// <param name="redirectUri">The &#x60;redirect_uri&#x60; specified in the &#x60;/link/token/create&#x60; call. (required).</param>
        /// <param name="clientName">The &#x60;client_name&#x60; specified in the &#x60;/link/token/create&#x60; call. (required).</param>
        public LinkTokenGetMetadataResponse(List<Products> initialProducts = default(List<Products>), string webhook = default(string), List<CountryCode> countryCodes = default(List<CountryCode>), string language = default(string), AccountFiltersResponse accountFilters = default(AccountFiltersResponse), string redirectUri = default(string), string clientName = default(string)) : base()
        {
            // to ensure "initialProducts" is required (not null)
            if (initialProducts == null)
            {
                throw new ArgumentNullException("initialProducts is a required property for LinkTokenGetMetadataResponse and cannot be null");
            }
            this.InitialProducts = initialProducts;
            // to ensure "webhook" is required (not null)
            if (webhook == null)
            {
                throw new ArgumentNullException("webhook is a required property for LinkTokenGetMetadataResponse and cannot be null");
            }
            this.Webhook = webhook;
            // to ensure "countryCodes" is required (not null)
            if (countryCodes == null)
            {
                throw new ArgumentNullException("countryCodes is a required property for LinkTokenGetMetadataResponse and cannot be null");
            }
            this.CountryCodes = countryCodes;
            // to ensure "language" is required (not null)
            if (language == null)
            {
                throw new ArgumentNullException("language is a required property for LinkTokenGetMetadataResponse and cannot be null");
            }
            this.Language = language;
            // to ensure "redirectUri" is required (not null)
            if (redirectUri == null)
            {
                throw new ArgumentNullException("redirectUri is a required property for LinkTokenGetMetadataResponse and cannot be null");
            }
            this.RedirectUri = redirectUri;
            // to ensure "clientName" is required (not null)
            if (clientName == null)
            {
                throw new ArgumentNullException("clientName is a required property for LinkTokenGetMetadataResponse and cannot be null");
            }
            this.ClientName = clientName;
            this.AccountFilters = accountFilters;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The &#x60;products&#x60; specified in the &#x60;/link/token/create&#x60; call.
        /// </summary>
        /// <value>The &#x60;products&#x60; specified in the &#x60;/link/token/create&#x60; call.</value>
        [DataMember(Name = "initial_products", IsRequired = true, EmitDefaultValue = false)]
        public List<Products> InitialProducts { get; set; }

        /// <summary>
        /// The &#x60;webhook&#x60; specified in the &#x60;/link/token/create&#x60; call.
        /// </summary>
        /// <value>The &#x60;webhook&#x60; specified in the &#x60;/link/token/create&#x60; call.</value>
        [DataMember(Name = "webhook", IsRequired = true, EmitDefaultValue = true)]
        public string Webhook { get; set; }

        /// <summary>
        /// The &#x60;country_codes&#x60; specified in the &#x60;/link/token/create&#x60; call.
        /// </summary>
        /// <value>The &#x60;country_codes&#x60; specified in the &#x60;/link/token/create&#x60; call.</value>
        [DataMember(Name = "country_codes", IsRequired = true, EmitDefaultValue = false)]
        public List<CountryCode> CountryCodes { get; set; }

        /// <summary>
        /// The &#x60;language&#x60; specified in the &#x60;/link/token/create&#x60; call.
        /// </summary>
        /// <value>The &#x60;language&#x60; specified in the &#x60;/link/token/create&#x60; call.</value>
        [DataMember(Name = "language", IsRequired = true, EmitDefaultValue = true)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or Sets AccountFilters
        /// </summary>
        [DataMember(Name = "account_filters", EmitDefaultValue = false)]
        public AccountFiltersResponse AccountFilters { get; set; }

        /// <summary>
        /// The &#x60;redirect_uri&#x60; specified in the &#x60;/link/token/create&#x60; call.
        /// </summary>
        /// <value>The &#x60;redirect_uri&#x60; specified in the &#x60;/link/token/create&#x60; call.</value>
        [DataMember(Name = "redirect_uri", IsRequired = true, EmitDefaultValue = true)]
        public string RedirectUri { get; set; }

        /// <summary>
        /// The &#x60;client_name&#x60; specified in the &#x60;/link/token/create&#x60; call.
        /// </summary>
        /// <value>The &#x60;client_name&#x60; specified in the &#x60;/link/token/create&#x60; call.</value>
        [DataMember(Name = "client_name", IsRequired = true, EmitDefaultValue = true)]
        public string ClientName { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LinkTokenGetMetadataResponse {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  InitialProducts: ").Append(InitialProducts).Append("\n");
            sb.Append("  Webhook: ").Append(Webhook).Append("\n");
            sb.Append("  CountryCodes: ").Append(CountryCodes).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  AccountFilters: ").Append(AccountFilters).Append("\n");
            sb.Append("  RedirectUri: ").Append(RedirectUri).Append("\n");
            sb.Append("  ClientName: ").Append(ClientName).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LinkTokenGetMetadataResponse);
        }

        /// <summary>
        /// Returns true if LinkTokenGetMetadataResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of LinkTokenGetMetadataResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LinkTokenGetMetadataResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.InitialProducts == input.InitialProducts ||
                    this.InitialProducts != null &&
                    input.InitialProducts != null &&
                    this.InitialProducts.SequenceEqual(input.InitialProducts)
                ) && base.Equals(input) && 
                (
                    this.Webhook == input.Webhook ||
                    (this.Webhook != null &&
                    this.Webhook.Equals(input.Webhook))
                ) && base.Equals(input) && 
                (
                    this.CountryCodes == input.CountryCodes ||
                    this.CountryCodes != null &&
                    input.CountryCodes != null &&
                    this.CountryCodes.SequenceEqual(input.CountryCodes)
                ) && base.Equals(input) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && base.Equals(input) && 
                (
                    this.AccountFilters == input.AccountFilters ||
                    (this.AccountFilters != null &&
                    this.AccountFilters.Equals(input.AccountFilters))
                ) && base.Equals(input) && 
                (
                    this.RedirectUri == input.RedirectUri ||
                    (this.RedirectUri != null &&
                    this.RedirectUri.Equals(input.RedirectUri))
                ) && base.Equals(input) && 
                (
                    this.ClientName == input.ClientName ||
                    (this.ClientName != null &&
                    this.ClientName.Equals(input.ClientName))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.InitialProducts != null)
                {
                    hashCode = (hashCode * 59) + this.InitialProducts.GetHashCode();
                }
                if (this.Webhook != null)
                {
                    hashCode = (hashCode * 59) + this.Webhook.GetHashCode();
                }
                if (this.CountryCodes != null)
                {
                    hashCode = (hashCode * 59) + this.CountryCodes.GetHashCode();
                }
                if (this.Language != null)
                {
                    hashCode = (hashCode * 59) + this.Language.GetHashCode();
                }
                if (this.AccountFilters != null)
                {
                    hashCode = (hashCode * 59) + this.AccountFilters.GetHashCode();
                }
                if (this.RedirectUri != null)
                {
                    hashCode = (hashCode * 59) + this.RedirectUri.GetHashCode();
                }
                if (this.ClientName != null)
                {
                    hashCode = (hashCode * 59) + this.ClientName.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
