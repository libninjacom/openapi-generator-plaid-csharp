/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Specify the security associated with the holding or investment transaction. When inputting custom security data to the Sandbox, Plaid will perform post-data-retrieval normalization and enrichment. These processes may cause the data returned by the Sandbox to be slightly different from the data you input. An ISO-4217 currency code and a security identifier (&#x60;ticker_symbol&#x60;, &#x60;cusip&#x60;, &#x60;isin&#x60;, or &#x60;sedol&#x60;) are required.
    /// </summary>
    [DataContract(Name = "SecurityOverride")]
    public partial class SecurityOverride : IEquatable<SecurityOverride>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityOverride" /> class.
        /// </summary>
        /// <param name="isin">12-character ISIN, a globally unique securities identifier..</param>
        /// <param name="cusip">9-character CUSIP, an identifier assigned to North American securities..</param>
        /// <param name="sedol">7-character SEDOL, an identifier assigned to securities in the UK..</param>
        /// <param name="name">A descriptive name for the security, suitable for display..</param>
        /// <param name="tickerSymbol">The security’s trading symbol for publicly traded securities, and otherwise a short identifier if available..</param>
        /// <param name="currency">Either a valid &#x60;iso_currency_code&#x60; or &#x60;unofficial_currency_code&#x60;.</param>
        public SecurityOverride(string isin = default(string), string cusip = default(string), string sedol = default(string), string name = default(string), string tickerSymbol = default(string), string currency = default(string))
        {
            this.Isin = isin;
            this.Cusip = cusip;
            this.Sedol = sedol;
            this.Name = name;
            this.TickerSymbol = tickerSymbol;
            this.Currency = currency;
        }

        /// <summary>
        /// 12-character ISIN, a globally unique securities identifier.
        /// </summary>
        /// <value>12-character ISIN, a globally unique securities identifier.</value>
        [DataMember(Name = "isin", EmitDefaultValue = false)]
        public string Isin { get; set; }

        /// <summary>
        /// 9-character CUSIP, an identifier assigned to North American securities.
        /// </summary>
        /// <value>9-character CUSIP, an identifier assigned to North American securities.</value>
        [DataMember(Name = "cusip", EmitDefaultValue = false)]
        public string Cusip { get; set; }

        /// <summary>
        /// 7-character SEDOL, an identifier assigned to securities in the UK.
        /// </summary>
        /// <value>7-character SEDOL, an identifier assigned to securities in the UK.</value>
        [DataMember(Name = "sedol", EmitDefaultValue = false)]
        public string Sedol { get; set; }

        /// <summary>
        /// A descriptive name for the security, suitable for display.
        /// </summary>
        /// <value>A descriptive name for the security, suitable for display.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The security’s trading symbol for publicly traded securities, and otherwise a short identifier if available.
        /// </summary>
        /// <value>The security’s trading symbol for publicly traded securities, and otherwise a short identifier if available.</value>
        [DataMember(Name = "ticker_symbol", EmitDefaultValue = false)]
        public string TickerSymbol { get; set; }

        /// <summary>
        /// Either a valid &#x60;iso_currency_code&#x60; or &#x60;unofficial_currency_code&#x60;
        /// </summary>
        /// <value>Either a valid &#x60;iso_currency_code&#x60; or &#x60;unofficial_currency_code&#x60;</value>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SecurityOverride {\n");
            sb.Append("  Isin: ").Append(Isin).Append("\n");
            sb.Append("  Cusip: ").Append(Cusip).Append("\n");
            sb.Append("  Sedol: ").Append(Sedol).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TickerSymbol: ").Append(TickerSymbol).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecurityOverride);
        }

        /// <summary>
        /// Returns true if SecurityOverride instances are equal
        /// </summary>
        /// <param name="input">Instance of SecurityOverride to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecurityOverride input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Isin == input.Isin ||
                    (this.Isin != null &&
                    this.Isin.Equals(input.Isin))
                ) && 
                (
                    this.Cusip == input.Cusip ||
                    (this.Cusip != null &&
                    this.Cusip.Equals(input.Cusip))
                ) && 
                (
                    this.Sedol == input.Sedol ||
                    (this.Sedol != null &&
                    this.Sedol.Equals(input.Sedol))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.TickerSymbol == input.TickerSymbol ||
                    (this.TickerSymbol != null &&
                    this.TickerSymbol.Equals(input.TickerSymbol))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Isin != null)
                {
                    hashCode = (hashCode * 59) + this.Isin.GetHashCode();
                }
                if (this.Cusip != null)
                {
                    hashCode = (hashCode * 59) + this.Cusip.GetHashCode();
                }
                if (this.Sedol != null)
                {
                    hashCode = (hashCode * 59) + this.Sedol.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.TickerSymbol != null)
                {
                    hashCode = (hashCode * 59) + this.TickerSymbol.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
