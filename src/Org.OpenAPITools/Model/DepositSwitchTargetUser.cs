/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The deposit switch target user
    /// </summary>
    [DataContract(Name = "DepositSwitchTargetUser")]
    public partial class DepositSwitchTargetUser : Dictionary<String, Object>, IEquatable<DepositSwitchTargetUser>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DepositSwitchTargetUser" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DepositSwitchTargetUser()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="DepositSwitchTargetUser" /> class.
        /// </summary>
        /// <param name="givenName">The given name (first name) of the user. (required).</param>
        /// <param name="familyName">The family name (last name) of the user. (required).</param>
        /// <param name="phone">The phone number of the user. The endpoint can accept a variety of phone number formats, including E.164. (required).</param>
        /// <param name="email">The email address of the user. (required).</param>
        /// <param name="address">address.</param>
        /// <param name="taxPayerId">The taxpayer ID of the user, generally their SSN, EIN, or TIN..</param>
        public DepositSwitchTargetUser(string givenName = default(string), string familyName = default(string), string phone = default(string), string email = default(string), DepositSwitchAddressData address = default(DepositSwitchAddressData), string taxPayerId = default(string)) : base()
        {
            // to ensure "givenName" is required (not null)
            if (givenName == null)
            {
                throw new ArgumentNullException("givenName is a required property for DepositSwitchTargetUser and cannot be null");
            }
            this.GivenName = givenName;
            // to ensure "familyName" is required (not null)
            if (familyName == null)
            {
                throw new ArgumentNullException("familyName is a required property for DepositSwitchTargetUser and cannot be null");
            }
            this.FamilyName = familyName;
            // to ensure "phone" is required (not null)
            if (phone == null)
            {
                throw new ArgumentNullException("phone is a required property for DepositSwitchTargetUser and cannot be null");
            }
            this.Phone = phone;
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for DepositSwitchTargetUser and cannot be null");
            }
            this.Email = email;
            this.Address = address;
            this.TaxPayerId = taxPayerId;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The given name (first name) of the user.
        /// </summary>
        /// <value>The given name (first name) of the user.</value>
        [DataMember(Name = "given_name", IsRequired = true, EmitDefaultValue = false)]
        public string GivenName { get; set; }

        /// <summary>
        /// The family name (last name) of the user.
        /// </summary>
        /// <value>The family name (last name) of the user.</value>
        [DataMember(Name = "family_name", IsRequired = true, EmitDefaultValue = false)]
        public string FamilyName { get; set; }

        /// <summary>
        /// The phone number of the user. The endpoint can accept a variety of phone number formats, including E.164.
        /// </summary>
        /// <value>The phone number of the user. The endpoint can accept a variety of phone number formats, including E.164.</value>
        [DataMember(Name = "phone", IsRequired = true, EmitDefaultValue = false)]
        public string Phone { get; set; }

        /// <summary>
        /// The email address of the user.
        /// </summary>
        /// <value>The email address of the user.</value>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public DepositSwitchAddressData Address { get; set; }

        /// <summary>
        /// The taxpayer ID of the user, generally their SSN, EIN, or TIN.
        /// </summary>
        /// <value>The taxpayer ID of the user, generally their SSN, EIN, or TIN.</value>
        [DataMember(Name = "tax_payer_id", EmitDefaultValue = false)]
        public string TaxPayerId { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DepositSwitchTargetUser {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  GivenName: ").Append(GivenName).Append("\n");
            sb.Append("  FamilyName: ").Append(FamilyName).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  TaxPayerId: ").Append(TaxPayerId).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DepositSwitchTargetUser);
        }

        /// <summary>
        /// Returns true if DepositSwitchTargetUser instances are equal
        /// </summary>
        /// <param name="input">Instance of DepositSwitchTargetUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DepositSwitchTargetUser input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.GivenName == input.GivenName ||
                    (this.GivenName != null &&
                    this.GivenName.Equals(input.GivenName))
                ) && base.Equals(input) && 
                (
                    this.FamilyName == input.FamilyName ||
                    (this.FamilyName != null &&
                    this.FamilyName.Equals(input.FamilyName))
                ) && base.Equals(input) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && base.Equals(input) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && base.Equals(input) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && base.Equals(input) && 
                (
                    this.TaxPayerId == input.TaxPayerId ||
                    (this.TaxPayerId != null &&
                    this.TaxPayerId.Equals(input.TaxPayerId))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.GivenName != null)
                {
                    hashCode = (hashCode * 59) + this.GivenName.GetHashCode();
                }
                if (this.FamilyName != null)
                {
                    hashCode = (hashCode * 59) + this.FamilyName.GetHashCode();
                }
                if (this.Phone != null)
                {
                    hashCode = (hashCode * 59) + this.Phone.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.TaxPayerId != null)
                {
                    hashCode = (hashCode * 59) + this.TaxPayerId.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
