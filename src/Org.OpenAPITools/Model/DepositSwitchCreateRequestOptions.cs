/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Options to configure the &#x60;/deposit_switch/create&#x60; request. If provided, cannot be &#x60;null&#x60;.
    /// </summary>
    [DataContract(Name = "DepositSwitchCreateRequestOptions")]
    public partial class DepositSwitchCreateRequestOptions : IEquatable<DepositSwitchCreateRequestOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DepositSwitchCreateRequestOptions" /> class.
        /// </summary>
        /// <param name="webhook">The URL registered to receive webhooks when the status of a deposit switch request has changed. .</param>
        /// <param name="transactionItemAccessTokens">An array of access tokens corresponding to transaction items to use when attempting to match the user to their Payroll Provider. These tokens must be created by the same client id as the one creating the switch, and have access to the transactions product..</param>
        public DepositSwitchCreateRequestOptions(string webhook = default(string), List<string> transactionItemAccessTokens = default(List<string>))
        {
            this.Webhook = webhook;
            this.TransactionItemAccessTokens = transactionItemAccessTokens;
        }

        /// <summary>
        /// The URL registered to receive webhooks when the status of a deposit switch request has changed. 
        /// </summary>
        /// <value>The URL registered to receive webhooks when the status of a deposit switch request has changed. </value>
        [DataMember(Name = "webhook", EmitDefaultValue = true)]
        public string Webhook { get; set; }

        /// <summary>
        /// An array of access tokens corresponding to transaction items to use when attempting to match the user to their Payroll Provider. These tokens must be created by the same client id as the one creating the switch, and have access to the transactions product.
        /// </summary>
        /// <value>An array of access tokens corresponding to transaction items to use when attempting to match the user to their Payroll Provider. These tokens must be created by the same client id as the one creating the switch, and have access to the transactions product.</value>
        [DataMember(Name = "transaction_item_access_tokens", EmitDefaultValue = false)]
        public List<string> TransactionItemAccessTokens { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DepositSwitchCreateRequestOptions {\n");
            sb.Append("  Webhook: ").Append(Webhook).Append("\n");
            sb.Append("  TransactionItemAccessTokens: ").Append(TransactionItemAccessTokens).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DepositSwitchCreateRequestOptions);
        }

        /// <summary>
        /// Returns true if DepositSwitchCreateRequestOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of DepositSwitchCreateRequestOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DepositSwitchCreateRequestOptions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Webhook == input.Webhook ||
                    (this.Webhook != null &&
                    this.Webhook.Equals(input.Webhook))
                ) && 
                (
                    this.TransactionItemAccessTokens == input.TransactionItemAccessTokens ||
                    this.TransactionItemAccessTokens != null &&
                    input.TransactionItemAccessTokens != null &&
                    this.TransactionItemAccessTokens.SequenceEqual(input.TransactionItemAccessTokens)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Webhook != null)
                {
                    hashCode = (hashCode * 59) + this.Webhook.GetHashCode();
                }
                if (this.TransactionItemAccessTokens != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionItemAccessTokens.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
