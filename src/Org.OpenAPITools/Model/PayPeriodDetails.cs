/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Details about the pay period.
    /// </summary>
    [DataContract(Name = "PayPeriodDetails")]
    public partial class PayPeriodDetails : Dictionary<String, Object>, IEquatable<PayPeriodDetails>, IValidatableObject
    {
        /// <summary>
        /// The frequency at which an individual is paid.
        /// </summary>
        /// <value>The frequency at which an individual is paid.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PayFrequencyEnum
        {
            /// <summary>
            /// Enum PAYFREQUENCYUNKNOWN for value: PAY_FREQUENCY_UNKNOWN
            /// </summary>
            [EnumMember(Value = "PAY_FREQUENCY_UNKNOWN")]
            PAYFREQUENCYUNKNOWN = 1,

            /// <summary>
            /// Enum PAYFREQUENCYWEEKLY for value: PAY_FREQUENCY_WEEKLY
            /// </summary>
            [EnumMember(Value = "PAY_FREQUENCY_WEEKLY")]
            PAYFREQUENCYWEEKLY = 2,

            /// <summary>
            /// Enum PAYFREQUENCYBIWEEKLY for value: PAY_FREQUENCY_BIWEEKLY
            /// </summary>
            [EnumMember(Value = "PAY_FREQUENCY_BIWEEKLY")]
            PAYFREQUENCYBIWEEKLY = 3,

            /// <summary>
            /// Enum PAYFREQUENCYSEMIMONTHLY for value: PAY_FREQUENCY_SEMIMONTHLY
            /// </summary>
            [EnumMember(Value = "PAY_FREQUENCY_SEMIMONTHLY")]
            PAYFREQUENCYSEMIMONTHLY = 4,

            /// <summary>
            /// Enum PAYFREQUENCYMONTHLY for value: PAY_FREQUENCY_MONTHLY
            /// </summary>
            [EnumMember(Value = "PAY_FREQUENCY_MONTHLY")]
            PAYFREQUENCYMONTHLY = 5,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 6

        }


        /// <summary>
        /// The frequency at which an individual is paid.
        /// </summary>
        /// <value>The frequency at which an individual is paid.</value>
        [DataMember(Name = "pay_frequency", EmitDefaultValue = true)]
        public PayFrequencyEnum? PayFrequency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PayPeriodDetails" /> class.
        /// </summary>
        /// <param name="checkAmount">The amount of the paycheck..</param>
        /// <param name="distributionBreakdown">distributionBreakdown.</param>
        /// <param name="endDate">The pay period end date, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format: \&quot;yyyy-mm-dd\&quot;..</param>
        /// <param name="grossEarnings">Total earnings before tax/deductions..</param>
        /// <param name="payDate">The date on which the paystub was issued, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (\&quot;yyyy-mm-dd\&quot;)..</param>
        /// <param name="payFrequency">The frequency at which an individual is paid..</param>
        /// <param name="payDay">The date on which the paystub was issued, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (\&quot;yyyy-mm-dd\&quot;)..</param>
        /// <param name="startDate">The pay period start date, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format: \&quot;yyyy-mm-dd\&quot;..</param>
        public PayPeriodDetails(decimal? checkAmount = default(decimal?), List<DistributionBreakdown> distributionBreakdown = default(List<DistributionBreakdown>), DateTime? endDate = default(DateTime?), decimal? grossEarnings = default(decimal?), DateTime? payDate = default(DateTime?), PayFrequencyEnum? payFrequency = default(PayFrequencyEnum?), DateTime? payDay = default(DateTime?), DateTime? startDate = default(DateTime?)) : base()
        {
            this.CheckAmount = checkAmount;
            this.DistributionBreakdown = distributionBreakdown;
            this.EndDate = endDate;
            this.GrossEarnings = grossEarnings;
            this.PayDate = payDate;
            this.PayFrequency = payFrequency;
            this.PayDay = payDay;
            this.StartDate = startDate;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The amount of the paycheck.
        /// </summary>
        /// <value>The amount of the paycheck.</value>
        [DataMember(Name = "check_amount", EmitDefaultValue = true)]
        public decimal? CheckAmount { get; set; }

        /// <summary>
        /// Gets or Sets DistributionBreakdown
        /// </summary>
        [DataMember(Name = "distribution_breakdown", EmitDefaultValue = false)]
        public List<DistributionBreakdown> DistributionBreakdown { get; set; }

        /// <summary>
        /// The pay period end date, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format: \&quot;yyyy-mm-dd\&quot;.
        /// </summary>
        /// <value>The pay period end date, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format: \&quot;yyyy-mm-dd\&quot;.</value>
        [DataMember(Name = "end_date", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Total earnings before tax/deductions.
        /// </summary>
        /// <value>Total earnings before tax/deductions.</value>
        [DataMember(Name = "gross_earnings", EmitDefaultValue = true)]
        public decimal? GrossEarnings { get; set; }

        /// <summary>
        /// The date on which the paystub was issued, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (\&quot;yyyy-mm-dd\&quot;).
        /// </summary>
        /// <value>The date on which the paystub was issued, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (\&quot;yyyy-mm-dd\&quot;).</value>
        [DataMember(Name = "pay_date", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? PayDate { get; set; }

        /// <summary>
        /// The date on which the paystub was issued, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (\&quot;yyyy-mm-dd\&quot;).
        /// </summary>
        /// <value>The date on which the paystub was issued, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (\&quot;yyyy-mm-dd\&quot;).</value>
        [DataMember(Name = "pay_day", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [Obsolete]
        public DateTime? PayDay { get; set; }

        /// <summary>
        /// The pay period start date, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format: \&quot;yyyy-mm-dd\&quot;.
        /// </summary>
        /// <value>The pay period start date, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format: \&quot;yyyy-mm-dd\&quot;.</value>
        [DataMember(Name = "start_date", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PayPeriodDetails {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  CheckAmount: ").Append(CheckAmount).Append("\n");
            sb.Append("  DistributionBreakdown: ").Append(DistributionBreakdown).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  GrossEarnings: ").Append(GrossEarnings).Append("\n");
            sb.Append("  PayDate: ").Append(PayDate).Append("\n");
            sb.Append("  PayFrequency: ").Append(PayFrequency).Append("\n");
            sb.Append("  PayDay: ").Append(PayDay).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PayPeriodDetails);
        }

        /// <summary>
        /// Returns true if PayPeriodDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of PayPeriodDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PayPeriodDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.CheckAmount == input.CheckAmount ||
                    (this.CheckAmount != null &&
                    this.CheckAmount.Equals(input.CheckAmount))
                ) && base.Equals(input) && 
                (
                    this.DistributionBreakdown == input.DistributionBreakdown ||
                    this.DistributionBreakdown != null &&
                    input.DistributionBreakdown != null &&
                    this.DistributionBreakdown.SequenceEqual(input.DistributionBreakdown)
                ) && base.Equals(input) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && base.Equals(input) && 
                (
                    this.GrossEarnings == input.GrossEarnings ||
                    (this.GrossEarnings != null &&
                    this.GrossEarnings.Equals(input.GrossEarnings))
                ) && base.Equals(input) && 
                (
                    this.PayDate == input.PayDate ||
                    (this.PayDate != null &&
                    this.PayDate.Equals(input.PayDate))
                ) && base.Equals(input) && 
                (
                    this.PayFrequency == input.PayFrequency ||
                    this.PayFrequency.Equals(input.PayFrequency)
                ) && base.Equals(input) && 
                (
                    this.PayDay == input.PayDay ||
                    (this.PayDay != null &&
                    this.PayDay.Equals(input.PayDay))
                ) && base.Equals(input) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.CheckAmount != null)
                {
                    hashCode = (hashCode * 59) + this.CheckAmount.GetHashCode();
                }
                if (this.DistributionBreakdown != null)
                {
                    hashCode = (hashCode * 59) + this.DistributionBreakdown.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                if (this.GrossEarnings != null)
                {
                    hashCode = (hashCode * 59) + this.GrossEarnings.GetHashCode();
                }
                if (this.PayDate != null)
                {
                    hashCode = (hashCode * 59) + this.PayDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PayFrequency.GetHashCode();
                if (this.PayDay != null)
                {
                    hashCode = (hashCode * 59) + this.PayDay.GetHashCode();
                }
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
