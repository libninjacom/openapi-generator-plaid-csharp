/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Used to configure Sandbox test data for the Liabilities product
    /// </summary>
    [DataContract(Name = "LiabilityOverride")]
    public partial class LiabilityOverride : Dictionary<String, Object>, IEquatable<LiabilityOverride>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LiabilityOverride" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LiabilityOverride()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="LiabilityOverride" /> class.
        /// </summary>
        /// <param name="type">The type of the liability object, either &#x60;credit&#x60; or &#x60;student&#x60;. Mortgages are not currently supported in the custom Sandbox. (required).</param>
        /// <param name="purchaseApr">The purchase APR percentage value. For simplicity, this is the only interest rate used to calculate interest charges. Can only be set if &#x60;type&#x60; is &#x60;credit&#x60;. (required).</param>
        /// <param name="cashApr">The cash APR percentage value. Can only be set if &#x60;type&#x60; is &#x60;credit&#x60;. (required).</param>
        /// <param name="balanceTransferApr">The balance transfer APR percentage value. Can only be set if &#x60;type&#x60; is &#x60;credit&#x60;. Can only be set if &#x60;type&#x60; is &#x60;credit&#x60;. (required).</param>
        /// <param name="specialApr">The special APR percentage value. Can only be set if &#x60;type&#x60; is &#x60;credit&#x60;. (required).</param>
        /// <param name="lastPaymentAmount">Override the &#x60;last_payment_amount&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;credit&#x60;. (required).</param>
        /// <param name="minimumPaymentAmount">Override the &#x60;minimum_payment_amount&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;credit&#x60; or &#x60;student&#x60;. (required).</param>
        /// <param name="isOverdue">Override the &#x60;is_overdue&#x60; field (required).</param>
        /// <param name="originationDate">The date on which the loan was initially lent, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;. (required).</param>
        /// <param name="principal">The original loan principal. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;. (required).</param>
        /// <param name="nominalApr">The interest rate on the loan as a percentage. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;. (required).</param>
        /// <param name="interestCapitalizationGracePeriodMonths">If set, interest capitalization begins at the given number of months after loan origination. By default interest is never capitalized. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;. (required).</param>
        /// <param name="repaymentModel">repaymentModel (required).</param>
        /// <param name="expectedPayoffDate">Override the &#x60;expected_payoff_date&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;. (required).</param>
        /// <param name="guarantor">Override the &#x60;guarantor&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;. (required).</param>
        /// <param name="isFederal">Override the &#x60;is_federal&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;. (required).</param>
        /// <param name="loanName">Override the &#x60;loan_name&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;. (required).</param>
        /// <param name="loanStatus">loanStatus (required).</param>
        /// <param name="paymentReferenceNumber">Override the &#x60;payment_reference_number&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;. (required).</param>
        /// <param name="pslfStatus">pslfStatus (required).</param>
        /// <param name="repaymentPlanDescription">Override the &#x60;repayment_plan.description&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;. (required).</param>
        /// <param name="repaymentPlanType">Override the &#x60;repayment_plan.type&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;. Possible values are: &#x60;\&quot;extended graduated\&quot;&#x60;, &#x60;\&quot;extended standard\&quot;&#x60;, &#x60;\&quot;graduated\&quot;&#x60;, &#x60;\&quot;income-contingent repayment\&quot;&#x60;, &#x60;\&quot;income-based repayment\&quot;&#x60;, &#x60;\&quot;interest only\&quot;&#x60;, &#x60;\&quot;other\&quot;&#x60;, &#x60;\&quot;pay as you earn\&quot;&#x60;, &#x60;\&quot;revised pay as you earn\&quot;&#x60;, or &#x60;\&quot;standard\&quot;&#x60;. (required).</param>
        /// <param name="sequenceNumber">Override the &#x60;sequence_number&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;. (required).</param>
        /// <param name="servicerAddress">servicerAddress (required).</param>
        public LiabilityOverride(string type = default(string), decimal purchaseApr = default(decimal), decimal cashApr = default(decimal), decimal balanceTransferApr = default(decimal), decimal specialApr = default(decimal), decimal lastPaymentAmount = default(decimal), decimal minimumPaymentAmount = default(decimal), bool isOverdue = default(bool), DateTime originationDate = default(DateTime), decimal principal = default(decimal), decimal nominalApr = default(decimal), decimal interestCapitalizationGracePeriodMonths = default(decimal), StudentLoanRepaymentModel repaymentModel = default(StudentLoanRepaymentModel), DateTime expectedPayoffDate = default(DateTime), string guarantor = default(string), bool isFederal = default(bool), string loanName = default(string), StudentLoanStatus loanStatus = default(StudentLoanStatus), string paymentReferenceNumber = default(string), PSLFStatus pslfStatus = default(PSLFStatus), string repaymentPlanDescription = default(string), string repaymentPlanType = default(string), string sequenceNumber = default(string), Address servicerAddress = default(Address)) : base()
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for LiabilityOverride and cannot be null");
            }
            this.Type = type;
            this.PurchaseApr = purchaseApr;
            this.CashApr = cashApr;
            this.BalanceTransferApr = balanceTransferApr;
            this.SpecialApr = specialApr;
            this.LastPaymentAmount = lastPaymentAmount;
            this.MinimumPaymentAmount = minimumPaymentAmount;
            this.IsOverdue = isOverdue;
            this.OriginationDate = originationDate;
            this.Principal = principal;
            this.NominalApr = nominalApr;
            this.InterestCapitalizationGracePeriodMonths = interestCapitalizationGracePeriodMonths;
            // to ensure "repaymentModel" is required (not null)
            if (repaymentModel == null)
            {
                throw new ArgumentNullException("repaymentModel is a required property for LiabilityOverride and cannot be null");
            }
            this.RepaymentModel = repaymentModel;
            this.ExpectedPayoffDate = expectedPayoffDate;
            // to ensure "guarantor" is required (not null)
            if (guarantor == null)
            {
                throw new ArgumentNullException("guarantor is a required property for LiabilityOverride and cannot be null");
            }
            this.Guarantor = guarantor;
            this.IsFederal = isFederal;
            // to ensure "loanName" is required (not null)
            if (loanName == null)
            {
                throw new ArgumentNullException("loanName is a required property for LiabilityOverride and cannot be null");
            }
            this.LoanName = loanName;
            // to ensure "loanStatus" is required (not null)
            if (loanStatus == null)
            {
                throw new ArgumentNullException("loanStatus is a required property for LiabilityOverride and cannot be null");
            }
            this.LoanStatus = loanStatus;
            // to ensure "paymentReferenceNumber" is required (not null)
            if (paymentReferenceNumber == null)
            {
                throw new ArgumentNullException("paymentReferenceNumber is a required property for LiabilityOverride and cannot be null");
            }
            this.PaymentReferenceNumber = paymentReferenceNumber;
            // to ensure "pslfStatus" is required (not null)
            if (pslfStatus == null)
            {
                throw new ArgumentNullException("pslfStatus is a required property for LiabilityOverride and cannot be null");
            }
            this.PslfStatus = pslfStatus;
            // to ensure "repaymentPlanDescription" is required (not null)
            if (repaymentPlanDescription == null)
            {
                throw new ArgumentNullException("repaymentPlanDescription is a required property for LiabilityOverride and cannot be null");
            }
            this.RepaymentPlanDescription = repaymentPlanDescription;
            // to ensure "repaymentPlanType" is required (not null)
            if (repaymentPlanType == null)
            {
                throw new ArgumentNullException("repaymentPlanType is a required property for LiabilityOverride and cannot be null");
            }
            this.RepaymentPlanType = repaymentPlanType;
            // to ensure "sequenceNumber" is required (not null)
            if (sequenceNumber == null)
            {
                throw new ArgumentNullException("sequenceNumber is a required property for LiabilityOverride and cannot be null");
            }
            this.SequenceNumber = sequenceNumber;
            // to ensure "servicerAddress" is required (not null)
            if (servicerAddress == null)
            {
                throw new ArgumentNullException("servicerAddress is a required property for LiabilityOverride and cannot be null");
            }
            this.ServicerAddress = servicerAddress;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The type of the liability object, either &#x60;credit&#x60; or &#x60;student&#x60;. Mortgages are not currently supported in the custom Sandbox.
        /// </summary>
        /// <value>The type of the liability object, either &#x60;credit&#x60; or &#x60;student&#x60;. Mortgages are not currently supported in the custom Sandbox.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// The purchase APR percentage value. For simplicity, this is the only interest rate used to calculate interest charges. Can only be set if &#x60;type&#x60; is &#x60;credit&#x60;.
        /// </summary>
        /// <value>The purchase APR percentage value. For simplicity, this is the only interest rate used to calculate interest charges. Can only be set if &#x60;type&#x60; is &#x60;credit&#x60;.</value>
        [DataMember(Name = "purchase_apr", IsRequired = true, EmitDefaultValue = false)]
        public decimal PurchaseApr { get; set; }

        /// <summary>
        /// The cash APR percentage value. Can only be set if &#x60;type&#x60; is &#x60;credit&#x60;.
        /// </summary>
        /// <value>The cash APR percentage value. Can only be set if &#x60;type&#x60; is &#x60;credit&#x60;.</value>
        [DataMember(Name = "cash_apr", IsRequired = true, EmitDefaultValue = false)]
        public decimal CashApr { get; set; }

        /// <summary>
        /// The balance transfer APR percentage value. Can only be set if &#x60;type&#x60; is &#x60;credit&#x60;. Can only be set if &#x60;type&#x60; is &#x60;credit&#x60;.
        /// </summary>
        /// <value>The balance transfer APR percentage value. Can only be set if &#x60;type&#x60; is &#x60;credit&#x60;. Can only be set if &#x60;type&#x60; is &#x60;credit&#x60;.</value>
        [DataMember(Name = "balance_transfer_apr", IsRequired = true, EmitDefaultValue = false)]
        public decimal BalanceTransferApr { get; set; }

        /// <summary>
        /// The special APR percentage value. Can only be set if &#x60;type&#x60; is &#x60;credit&#x60;.
        /// </summary>
        /// <value>The special APR percentage value. Can only be set if &#x60;type&#x60; is &#x60;credit&#x60;.</value>
        [DataMember(Name = "special_apr", IsRequired = true, EmitDefaultValue = false)]
        public decimal SpecialApr { get; set; }

        /// <summary>
        /// Override the &#x60;last_payment_amount&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;credit&#x60;.
        /// </summary>
        /// <value>Override the &#x60;last_payment_amount&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;credit&#x60;.</value>
        [DataMember(Name = "last_payment_amount", IsRequired = true, EmitDefaultValue = false)]
        public decimal LastPaymentAmount { get; set; }

        /// <summary>
        /// Override the &#x60;minimum_payment_amount&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;credit&#x60; or &#x60;student&#x60;.
        /// </summary>
        /// <value>Override the &#x60;minimum_payment_amount&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;credit&#x60; or &#x60;student&#x60;.</value>
        [DataMember(Name = "minimum_payment_amount", IsRequired = true, EmitDefaultValue = false)]
        public decimal MinimumPaymentAmount { get; set; }

        /// <summary>
        /// Override the &#x60;is_overdue&#x60; field
        /// </summary>
        /// <value>Override the &#x60;is_overdue&#x60; field</value>
        [DataMember(Name = "is_overdue", IsRequired = true, EmitDefaultValue = true)]
        public bool IsOverdue { get; set; }

        /// <summary>
        /// The date on which the loan was initially lent, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;.
        /// </summary>
        /// <value>The date on which the loan was initially lent, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;.</value>
        [DataMember(Name = "origination_date", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime OriginationDate { get; set; }

        /// <summary>
        /// The original loan principal. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;.
        /// </summary>
        /// <value>The original loan principal. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;.</value>
        [DataMember(Name = "principal", IsRequired = true, EmitDefaultValue = false)]
        public decimal Principal { get; set; }

        /// <summary>
        /// The interest rate on the loan as a percentage. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;.
        /// </summary>
        /// <value>The interest rate on the loan as a percentage. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;.</value>
        [DataMember(Name = "nominal_apr", IsRequired = true, EmitDefaultValue = false)]
        public decimal NominalApr { get; set; }

        /// <summary>
        /// If set, interest capitalization begins at the given number of months after loan origination. By default interest is never capitalized. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;.
        /// </summary>
        /// <value>If set, interest capitalization begins at the given number of months after loan origination. By default interest is never capitalized. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;.</value>
        [DataMember(Name = "interest_capitalization_grace_period_months", IsRequired = true, EmitDefaultValue = false)]
        public decimal InterestCapitalizationGracePeriodMonths { get; set; }

        /// <summary>
        /// Gets or Sets RepaymentModel
        /// </summary>
        [DataMember(Name = "repayment_model", IsRequired = true, EmitDefaultValue = false)]
        public StudentLoanRepaymentModel RepaymentModel { get; set; }

        /// <summary>
        /// Override the &#x60;expected_payoff_date&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;.
        /// </summary>
        /// <value>Override the &#x60;expected_payoff_date&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;.</value>
        [DataMember(Name = "expected_payoff_date", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime ExpectedPayoffDate { get; set; }

        /// <summary>
        /// Override the &#x60;guarantor&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;.
        /// </summary>
        /// <value>Override the &#x60;guarantor&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;.</value>
        [DataMember(Name = "guarantor", IsRequired = true, EmitDefaultValue = false)]
        public string Guarantor { get; set; }

        /// <summary>
        /// Override the &#x60;is_federal&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;.
        /// </summary>
        /// <value>Override the &#x60;is_federal&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;.</value>
        [DataMember(Name = "is_federal", IsRequired = true, EmitDefaultValue = true)]
        public bool IsFederal { get; set; }

        /// <summary>
        /// Override the &#x60;loan_name&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;.
        /// </summary>
        /// <value>Override the &#x60;loan_name&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;.</value>
        [DataMember(Name = "loan_name", IsRequired = true, EmitDefaultValue = false)]
        public string LoanName { get; set; }

        /// <summary>
        /// Gets or Sets LoanStatus
        /// </summary>
        [DataMember(Name = "loan_status", IsRequired = true, EmitDefaultValue = false)]
        public StudentLoanStatus LoanStatus { get; set; }

        /// <summary>
        /// Override the &#x60;payment_reference_number&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;.
        /// </summary>
        /// <value>Override the &#x60;payment_reference_number&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;.</value>
        [DataMember(Name = "payment_reference_number", IsRequired = true, EmitDefaultValue = false)]
        public string PaymentReferenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets PslfStatus
        /// </summary>
        [DataMember(Name = "pslf_status", IsRequired = true, EmitDefaultValue = false)]
        public PSLFStatus PslfStatus { get; set; }

        /// <summary>
        /// Override the &#x60;repayment_plan.description&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;.
        /// </summary>
        /// <value>Override the &#x60;repayment_plan.description&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;.</value>
        [DataMember(Name = "repayment_plan_description", IsRequired = true, EmitDefaultValue = false)]
        public string RepaymentPlanDescription { get; set; }

        /// <summary>
        /// Override the &#x60;repayment_plan.type&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;. Possible values are: &#x60;\&quot;extended graduated\&quot;&#x60;, &#x60;\&quot;extended standard\&quot;&#x60;, &#x60;\&quot;graduated\&quot;&#x60;, &#x60;\&quot;income-contingent repayment\&quot;&#x60;, &#x60;\&quot;income-based repayment\&quot;&#x60;, &#x60;\&quot;interest only\&quot;&#x60;, &#x60;\&quot;other\&quot;&#x60;, &#x60;\&quot;pay as you earn\&quot;&#x60;, &#x60;\&quot;revised pay as you earn\&quot;&#x60;, or &#x60;\&quot;standard\&quot;&#x60;.
        /// </summary>
        /// <value>Override the &#x60;repayment_plan.type&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;. Possible values are: &#x60;\&quot;extended graduated\&quot;&#x60;, &#x60;\&quot;extended standard\&quot;&#x60;, &#x60;\&quot;graduated\&quot;&#x60;, &#x60;\&quot;income-contingent repayment\&quot;&#x60;, &#x60;\&quot;income-based repayment\&quot;&#x60;, &#x60;\&quot;interest only\&quot;&#x60;, &#x60;\&quot;other\&quot;&#x60;, &#x60;\&quot;pay as you earn\&quot;&#x60;, &#x60;\&quot;revised pay as you earn\&quot;&#x60;, or &#x60;\&quot;standard\&quot;&#x60;.</value>
        [DataMember(Name = "repayment_plan_type", IsRequired = true, EmitDefaultValue = false)]
        public string RepaymentPlanType { get; set; }

        /// <summary>
        /// Override the &#x60;sequence_number&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;.
        /// </summary>
        /// <value>Override the &#x60;sequence_number&#x60; field. Can only be set if &#x60;type&#x60; is &#x60;student&#x60;.</value>
        [DataMember(Name = "sequence_number", IsRequired = true, EmitDefaultValue = false)]
        public string SequenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets ServicerAddress
        /// </summary>
        [DataMember(Name = "servicer_address", IsRequired = true, EmitDefaultValue = false)]
        public Address ServicerAddress { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LiabilityOverride {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  PurchaseApr: ").Append(PurchaseApr).Append("\n");
            sb.Append("  CashApr: ").Append(CashApr).Append("\n");
            sb.Append("  BalanceTransferApr: ").Append(BalanceTransferApr).Append("\n");
            sb.Append("  SpecialApr: ").Append(SpecialApr).Append("\n");
            sb.Append("  LastPaymentAmount: ").Append(LastPaymentAmount).Append("\n");
            sb.Append("  MinimumPaymentAmount: ").Append(MinimumPaymentAmount).Append("\n");
            sb.Append("  IsOverdue: ").Append(IsOverdue).Append("\n");
            sb.Append("  OriginationDate: ").Append(OriginationDate).Append("\n");
            sb.Append("  Principal: ").Append(Principal).Append("\n");
            sb.Append("  NominalApr: ").Append(NominalApr).Append("\n");
            sb.Append("  InterestCapitalizationGracePeriodMonths: ").Append(InterestCapitalizationGracePeriodMonths).Append("\n");
            sb.Append("  RepaymentModel: ").Append(RepaymentModel).Append("\n");
            sb.Append("  ExpectedPayoffDate: ").Append(ExpectedPayoffDate).Append("\n");
            sb.Append("  Guarantor: ").Append(Guarantor).Append("\n");
            sb.Append("  IsFederal: ").Append(IsFederal).Append("\n");
            sb.Append("  LoanName: ").Append(LoanName).Append("\n");
            sb.Append("  LoanStatus: ").Append(LoanStatus).Append("\n");
            sb.Append("  PaymentReferenceNumber: ").Append(PaymentReferenceNumber).Append("\n");
            sb.Append("  PslfStatus: ").Append(PslfStatus).Append("\n");
            sb.Append("  RepaymentPlanDescription: ").Append(RepaymentPlanDescription).Append("\n");
            sb.Append("  RepaymentPlanType: ").Append(RepaymentPlanType).Append("\n");
            sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
            sb.Append("  ServicerAddress: ").Append(ServicerAddress).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LiabilityOverride);
        }

        /// <summary>
        /// Returns true if LiabilityOverride instances are equal
        /// </summary>
        /// <param name="input">Instance of LiabilityOverride to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LiabilityOverride input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && base.Equals(input) && 
                (
                    this.PurchaseApr == input.PurchaseApr ||
                    this.PurchaseApr.Equals(input.PurchaseApr)
                ) && base.Equals(input) && 
                (
                    this.CashApr == input.CashApr ||
                    this.CashApr.Equals(input.CashApr)
                ) && base.Equals(input) && 
                (
                    this.BalanceTransferApr == input.BalanceTransferApr ||
                    this.BalanceTransferApr.Equals(input.BalanceTransferApr)
                ) && base.Equals(input) && 
                (
                    this.SpecialApr == input.SpecialApr ||
                    this.SpecialApr.Equals(input.SpecialApr)
                ) && base.Equals(input) && 
                (
                    this.LastPaymentAmount == input.LastPaymentAmount ||
                    this.LastPaymentAmount.Equals(input.LastPaymentAmount)
                ) && base.Equals(input) && 
                (
                    this.MinimumPaymentAmount == input.MinimumPaymentAmount ||
                    this.MinimumPaymentAmount.Equals(input.MinimumPaymentAmount)
                ) && base.Equals(input) && 
                (
                    this.IsOverdue == input.IsOverdue ||
                    this.IsOverdue.Equals(input.IsOverdue)
                ) && base.Equals(input) && 
                (
                    this.OriginationDate == input.OriginationDate ||
                    (this.OriginationDate != null &&
                    this.OriginationDate.Equals(input.OriginationDate))
                ) && base.Equals(input) && 
                (
                    this.Principal == input.Principal ||
                    this.Principal.Equals(input.Principal)
                ) && base.Equals(input) && 
                (
                    this.NominalApr == input.NominalApr ||
                    this.NominalApr.Equals(input.NominalApr)
                ) && base.Equals(input) && 
                (
                    this.InterestCapitalizationGracePeriodMonths == input.InterestCapitalizationGracePeriodMonths ||
                    this.InterestCapitalizationGracePeriodMonths.Equals(input.InterestCapitalizationGracePeriodMonths)
                ) && base.Equals(input) && 
                (
                    this.RepaymentModel == input.RepaymentModel ||
                    (this.RepaymentModel != null &&
                    this.RepaymentModel.Equals(input.RepaymentModel))
                ) && base.Equals(input) && 
                (
                    this.ExpectedPayoffDate == input.ExpectedPayoffDate ||
                    (this.ExpectedPayoffDate != null &&
                    this.ExpectedPayoffDate.Equals(input.ExpectedPayoffDate))
                ) && base.Equals(input) && 
                (
                    this.Guarantor == input.Guarantor ||
                    (this.Guarantor != null &&
                    this.Guarantor.Equals(input.Guarantor))
                ) && base.Equals(input) && 
                (
                    this.IsFederal == input.IsFederal ||
                    this.IsFederal.Equals(input.IsFederal)
                ) && base.Equals(input) && 
                (
                    this.LoanName == input.LoanName ||
                    (this.LoanName != null &&
                    this.LoanName.Equals(input.LoanName))
                ) && base.Equals(input) && 
                (
                    this.LoanStatus == input.LoanStatus ||
                    (this.LoanStatus != null &&
                    this.LoanStatus.Equals(input.LoanStatus))
                ) && base.Equals(input) && 
                (
                    this.PaymentReferenceNumber == input.PaymentReferenceNumber ||
                    (this.PaymentReferenceNumber != null &&
                    this.PaymentReferenceNumber.Equals(input.PaymentReferenceNumber))
                ) && base.Equals(input) && 
                (
                    this.PslfStatus == input.PslfStatus ||
                    (this.PslfStatus != null &&
                    this.PslfStatus.Equals(input.PslfStatus))
                ) && base.Equals(input) && 
                (
                    this.RepaymentPlanDescription == input.RepaymentPlanDescription ||
                    (this.RepaymentPlanDescription != null &&
                    this.RepaymentPlanDescription.Equals(input.RepaymentPlanDescription))
                ) && base.Equals(input) && 
                (
                    this.RepaymentPlanType == input.RepaymentPlanType ||
                    (this.RepaymentPlanType != null &&
                    this.RepaymentPlanType.Equals(input.RepaymentPlanType))
                ) && base.Equals(input) && 
                (
                    this.SequenceNumber == input.SequenceNumber ||
                    (this.SequenceNumber != null &&
                    this.SequenceNumber.Equals(input.SequenceNumber))
                ) && base.Equals(input) && 
                (
                    this.ServicerAddress == input.ServicerAddress ||
                    (this.ServicerAddress != null &&
                    this.ServicerAddress.Equals(input.ServicerAddress))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PurchaseApr.GetHashCode();
                hashCode = (hashCode * 59) + this.CashApr.GetHashCode();
                hashCode = (hashCode * 59) + this.BalanceTransferApr.GetHashCode();
                hashCode = (hashCode * 59) + this.SpecialApr.GetHashCode();
                hashCode = (hashCode * 59) + this.LastPaymentAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.MinimumPaymentAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.IsOverdue.GetHashCode();
                if (this.OriginationDate != null)
                {
                    hashCode = (hashCode * 59) + this.OriginationDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Principal.GetHashCode();
                hashCode = (hashCode * 59) + this.NominalApr.GetHashCode();
                hashCode = (hashCode * 59) + this.InterestCapitalizationGracePeriodMonths.GetHashCode();
                if (this.RepaymentModel != null)
                {
                    hashCode = (hashCode * 59) + this.RepaymentModel.GetHashCode();
                }
                if (this.ExpectedPayoffDate != null)
                {
                    hashCode = (hashCode * 59) + this.ExpectedPayoffDate.GetHashCode();
                }
                if (this.Guarantor != null)
                {
                    hashCode = (hashCode * 59) + this.Guarantor.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsFederal.GetHashCode();
                if (this.LoanName != null)
                {
                    hashCode = (hashCode * 59) + this.LoanName.GetHashCode();
                }
                if (this.LoanStatus != null)
                {
                    hashCode = (hashCode * 59) + this.LoanStatus.GetHashCode();
                }
                if (this.PaymentReferenceNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentReferenceNumber.GetHashCode();
                }
                if (this.PslfStatus != null)
                {
                    hashCode = (hashCode * 59) + this.PslfStatus.GetHashCode();
                }
                if (this.RepaymentPlanDescription != null)
                {
                    hashCode = (hashCode * 59) + this.RepaymentPlanDescription.GetHashCode();
                }
                if (this.RepaymentPlanType != null)
                {
                    hashCode = (hashCode * 59) + this.RepaymentPlanType.GetHashCode();
                }
                if (this.SequenceNumber != null)
                {
                    hashCode = (hashCode * 59) + this.SequenceNumber.GetHashCode();
                }
                if (this.ServicerAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ServicerAddress.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
