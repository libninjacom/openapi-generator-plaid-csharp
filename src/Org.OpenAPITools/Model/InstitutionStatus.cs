/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The status of an institution is determined by the health of its Item logins, Transactions updates, Investments updates, Liabilities updates, Auth requests, Balance requests, Identity requests, Investments requests, and Liabilities requests. A login attempt is conducted during the initial Item add in Link. If there is not enough traffic to accurately calculate an institution&#39;s status, Plaid will return null rather than potentially inaccurate data.  Institution status is accessible in the Dashboard and via the API using the &#x60;/institutions/get_by_id&#x60; endpoint with the &#x60;include_status&#x60; option set to true. Note that institution status is not available in the Sandbox environment. 
    /// </summary>
    [DataContract(Name = "InstitutionStatus")]
    public partial class InstitutionStatus : Dictionary<String, Object>, IEquatable<InstitutionStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstitutionStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InstitutionStatus()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="InstitutionStatus" /> class.
        /// </summary>
        /// <param name="itemLogins">itemLogins (required).</param>
        /// <param name="transactionsUpdates">transactionsUpdates (required).</param>
        /// <param name="auth">auth (required).</param>
        /// <param name="identity">identity (required).</param>
        /// <param name="investmentsUpdates">investmentsUpdates (required).</param>
        /// <param name="liabilitiesUpdates">liabilitiesUpdates.</param>
        /// <param name="liabilities">liabilities.</param>
        /// <param name="investments">investments.</param>
        /// <param name="healthIncidents">Details of recent health incidents associated with the institution..</param>
        public InstitutionStatus(ProductStatus itemLogins = default(ProductStatus), ProductStatus transactionsUpdates = default(ProductStatus), ProductStatus auth = default(ProductStatus), ProductStatus identity = default(ProductStatus), ProductStatus investmentsUpdates = default(ProductStatus), ProductStatus liabilitiesUpdates = default(ProductStatus), ProductStatus liabilities = default(ProductStatus), ProductStatus investments = default(ProductStatus), List<HealthIncident> healthIncidents = default(List<HealthIncident>)) : base()
        {
            // to ensure "itemLogins" is required (not null)
            if (itemLogins == null)
            {
                throw new ArgumentNullException("itemLogins is a required property for InstitutionStatus and cannot be null");
            }
            this.ItemLogins = itemLogins;
            // to ensure "transactionsUpdates" is required (not null)
            if (transactionsUpdates == null)
            {
                throw new ArgumentNullException("transactionsUpdates is a required property for InstitutionStatus and cannot be null");
            }
            this.TransactionsUpdates = transactionsUpdates;
            // to ensure "auth" is required (not null)
            if (auth == null)
            {
                throw new ArgumentNullException("auth is a required property for InstitutionStatus and cannot be null");
            }
            this.Auth = auth;
            // to ensure "identity" is required (not null)
            if (identity == null)
            {
                throw new ArgumentNullException("identity is a required property for InstitutionStatus and cannot be null");
            }
            this.Identity = identity;
            // to ensure "investmentsUpdates" is required (not null)
            if (investmentsUpdates == null)
            {
                throw new ArgumentNullException("investmentsUpdates is a required property for InstitutionStatus and cannot be null");
            }
            this.InvestmentsUpdates = investmentsUpdates;
            this.LiabilitiesUpdates = liabilitiesUpdates;
            this.Liabilities = liabilities;
            this.Investments = investments;
            this.HealthIncidents = healthIncidents;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets ItemLogins
        /// </summary>
        [DataMember(Name = "item_logins", IsRequired = true, EmitDefaultValue = false)]
        public ProductStatus ItemLogins { get; set; }

        /// <summary>
        /// Gets or Sets TransactionsUpdates
        /// </summary>
        [DataMember(Name = "transactions_updates", IsRequired = true, EmitDefaultValue = false)]
        public ProductStatus TransactionsUpdates { get; set; }

        /// <summary>
        /// Gets or Sets Auth
        /// </summary>
        [DataMember(Name = "auth", IsRequired = true, EmitDefaultValue = false)]
        public ProductStatus Auth { get; set; }

        /// <summary>
        /// Gets or Sets Identity
        /// </summary>
        [DataMember(Name = "identity", IsRequired = true, EmitDefaultValue = false)]
        public ProductStatus Identity { get; set; }

        /// <summary>
        /// Gets or Sets InvestmentsUpdates
        /// </summary>
        [DataMember(Name = "investments_updates", IsRequired = true, EmitDefaultValue = false)]
        public ProductStatus InvestmentsUpdates { get; set; }

        /// <summary>
        /// Gets or Sets LiabilitiesUpdates
        /// </summary>
        [DataMember(Name = "liabilities_updates", EmitDefaultValue = false)]
        public ProductStatus LiabilitiesUpdates { get; set; }

        /// <summary>
        /// Gets or Sets Liabilities
        /// </summary>
        [DataMember(Name = "liabilities", EmitDefaultValue = false)]
        public ProductStatus Liabilities { get; set; }

        /// <summary>
        /// Gets or Sets Investments
        /// </summary>
        [DataMember(Name = "investments", EmitDefaultValue = false)]
        public ProductStatus Investments { get; set; }

        /// <summary>
        /// Details of recent health incidents associated with the institution.
        /// </summary>
        /// <value>Details of recent health incidents associated with the institution.</value>
        [DataMember(Name = "health_incidents", EmitDefaultValue = true)]
        public List<HealthIncident> HealthIncidents { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InstitutionStatus {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ItemLogins: ").Append(ItemLogins).Append("\n");
            sb.Append("  TransactionsUpdates: ").Append(TransactionsUpdates).Append("\n");
            sb.Append("  Auth: ").Append(Auth).Append("\n");
            sb.Append("  Identity: ").Append(Identity).Append("\n");
            sb.Append("  InvestmentsUpdates: ").Append(InvestmentsUpdates).Append("\n");
            sb.Append("  LiabilitiesUpdates: ").Append(LiabilitiesUpdates).Append("\n");
            sb.Append("  Liabilities: ").Append(Liabilities).Append("\n");
            sb.Append("  Investments: ").Append(Investments).Append("\n");
            sb.Append("  HealthIncidents: ").Append(HealthIncidents).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InstitutionStatus);
        }

        /// <summary>
        /// Returns true if InstitutionStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of InstitutionStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstitutionStatus input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.ItemLogins == input.ItemLogins ||
                    (this.ItemLogins != null &&
                    this.ItemLogins.Equals(input.ItemLogins))
                ) && base.Equals(input) && 
                (
                    this.TransactionsUpdates == input.TransactionsUpdates ||
                    (this.TransactionsUpdates != null &&
                    this.TransactionsUpdates.Equals(input.TransactionsUpdates))
                ) && base.Equals(input) && 
                (
                    this.Auth == input.Auth ||
                    (this.Auth != null &&
                    this.Auth.Equals(input.Auth))
                ) && base.Equals(input) && 
                (
                    this.Identity == input.Identity ||
                    (this.Identity != null &&
                    this.Identity.Equals(input.Identity))
                ) && base.Equals(input) && 
                (
                    this.InvestmentsUpdates == input.InvestmentsUpdates ||
                    (this.InvestmentsUpdates != null &&
                    this.InvestmentsUpdates.Equals(input.InvestmentsUpdates))
                ) && base.Equals(input) && 
                (
                    this.LiabilitiesUpdates == input.LiabilitiesUpdates ||
                    (this.LiabilitiesUpdates != null &&
                    this.LiabilitiesUpdates.Equals(input.LiabilitiesUpdates))
                ) && base.Equals(input) && 
                (
                    this.Liabilities == input.Liabilities ||
                    (this.Liabilities != null &&
                    this.Liabilities.Equals(input.Liabilities))
                ) && base.Equals(input) && 
                (
                    this.Investments == input.Investments ||
                    (this.Investments != null &&
                    this.Investments.Equals(input.Investments))
                ) && base.Equals(input) && 
                (
                    this.HealthIncidents == input.HealthIncidents ||
                    this.HealthIncidents != null &&
                    input.HealthIncidents != null &&
                    this.HealthIncidents.SequenceEqual(input.HealthIncidents)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ItemLogins != null)
                {
                    hashCode = (hashCode * 59) + this.ItemLogins.GetHashCode();
                }
                if (this.TransactionsUpdates != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionsUpdates.GetHashCode();
                }
                if (this.Auth != null)
                {
                    hashCode = (hashCode * 59) + this.Auth.GetHashCode();
                }
                if (this.Identity != null)
                {
                    hashCode = (hashCode * 59) + this.Identity.GetHashCode();
                }
                if (this.InvestmentsUpdates != null)
                {
                    hashCode = (hashCode * 59) + this.InvestmentsUpdates.GetHashCode();
                }
                if (this.LiabilitiesUpdates != null)
                {
                    hashCode = (hashCode * 59) + this.LiabilitiesUpdates.GetHashCode();
                }
                if (this.Liabilities != null)
                {
                    hashCode = (hashCode * 59) + this.Liabilities.GetHashCode();
                }
                if (this.Investments != null)
                {
                    hashCode = (hashCode * 59) + this.Investments.GetHashCode();
                }
                if (this.HealthIncidents != null)
                {
                    hashCode = (hashCode * 59) + this.HealthIncidents.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
