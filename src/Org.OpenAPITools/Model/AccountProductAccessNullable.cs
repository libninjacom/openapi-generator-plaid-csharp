/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Allow the application to access specific products on this account
    /// </summary>
    [DataContract(Name = "AccountProductAccessNullable")]
    public partial class AccountProductAccessNullable : IEquatable<AccountProductAccessNullable>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountProductAccessNullable" /> class.
        /// </summary>
        /// <param name="accountData">Allow the application to access account data. Only used by certain partners. If relevant to the partner and unset, defaults to &#x60;true&#x60;. (default to true).</param>
        /// <param name="statements">Allow the application to access bank statements. Only used by certain partners. If relevant to the partner and unset, defaults to &#x60;true&#x60;. (default to true).</param>
        /// <param name="taxDocuments">Allow the application to access tax documents. Only used by certain partners. If relevant to the partner and unset, defaults to &#x60;true&#x60;. (default to true).</param>
        public AccountProductAccessNullable(bool? accountData = true, bool? statements = true, bool? taxDocuments = true)
        {
            // use default value if no "accountData" provided
            this.AccountData = accountData ?? true;
            // use default value if no "statements" provided
            this.Statements = statements ?? true;
            // use default value if no "taxDocuments" provided
            this.TaxDocuments = taxDocuments ?? true;
        }

        /// <summary>
        /// Allow the application to access account data. Only used by certain partners. If relevant to the partner and unset, defaults to &#x60;true&#x60;.
        /// </summary>
        /// <value>Allow the application to access account data. Only used by certain partners. If relevant to the partner and unset, defaults to &#x60;true&#x60;.</value>
        [DataMember(Name = "account_data", EmitDefaultValue = true)]
        public bool? AccountData { get; set; }

        /// <summary>
        /// Allow the application to access bank statements. Only used by certain partners. If relevant to the partner and unset, defaults to &#x60;true&#x60;.
        /// </summary>
        /// <value>Allow the application to access bank statements. Only used by certain partners. If relevant to the partner and unset, defaults to &#x60;true&#x60;.</value>
        [DataMember(Name = "statements", EmitDefaultValue = true)]
        public bool? Statements { get; set; }

        /// <summary>
        /// Allow the application to access tax documents. Only used by certain partners. If relevant to the partner and unset, defaults to &#x60;true&#x60;.
        /// </summary>
        /// <value>Allow the application to access tax documents. Only used by certain partners. If relevant to the partner and unset, defaults to &#x60;true&#x60;.</value>
        [DataMember(Name = "tax_documents", EmitDefaultValue = true)]
        public bool? TaxDocuments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountProductAccessNullable {\n");
            sb.Append("  AccountData: ").Append(AccountData).Append("\n");
            sb.Append("  Statements: ").Append(Statements).Append("\n");
            sb.Append("  TaxDocuments: ").Append(TaxDocuments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountProductAccessNullable);
        }

        /// <summary>
        /// Returns true if AccountProductAccessNullable instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountProductAccessNullable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountProductAccessNullable input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountData == input.AccountData ||
                    (this.AccountData != null &&
                    this.AccountData.Equals(input.AccountData))
                ) && 
                (
                    this.Statements == input.Statements ||
                    (this.Statements != null &&
                    this.Statements.Equals(input.Statements))
                ) && 
                (
                    this.TaxDocuments == input.TaxDocuments ||
                    (this.TaxDocuments != null &&
                    this.TaxDocuments.Equals(input.TaxDocuments))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountData != null)
                {
                    hashCode = (hashCode * 59) + this.AccountData.GetHashCode();
                }
                if (this.Statements != null)
                {
                    hashCode = (hashCode * 59) + this.Statements.GetHashCode();
                }
                if (this.TaxDocuments != null)
                {
                    hashCode = (hashCode * 59) + this.TaxDocuments.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
