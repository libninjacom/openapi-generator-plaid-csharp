/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Details about a certain reason as to why a document could potentially be fraudulent
    /// </summary>
    [DataContract(Name = "VerificationAttribute")]
    public partial class VerificationAttribute : Dictionary<String, Object>, IEquatable<VerificationAttribute>, IValidatableObject
    {
        /// <summary>
        /// Message indicating the reason as to why the verification failed
        /// </summary>
        /// <value>Message indicating the reason as to why the verification failed</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum VERIFICATIONATTRIBUTETYPEUNKNOWN for value: VERIFICATION_ATTRIBUTE_TYPE_UNKNOWN
            /// </summary>
            [EnumMember(Value = "VERIFICATION_ATTRIBUTE_TYPE_UNKNOWN")]
            VERIFICATIONATTRIBUTETYPEUNKNOWN = 1,

            /// <summary>
            /// Enum VERIFICATIONATTRIBUTETYPEAMOUNTMATCH for value: VERIFICATION_ATTRIBUTE_TYPE_AMOUNT_MATCH
            /// </summary>
            [EnumMember(Value = "VERIFICATION_ATTRIBUTE_TYPE_AMOUNT_MATCH")]
            VERIFICATIONATTRIBUTETYPEAMOUNTMATCH = 2,

            /// <summary>
            /// Enum VERIFICATIONATTRIBUTETYPEDATEMATCH for value: VERIFICATION_ATTRIBUTE_TYPE_DATE_MATCH
            /// </summary>
            [EnumMember(Value = "VERIFICATION_ATTRIBUTE_TYPE_DATE_MATCH")]
            VERIFICATIONATTRIBUTETYPEDATEMATCH = 3,

            /// <summary>
            /// Enum VERIFICATIONATTRIBUTETYPEDATEMISMATCH for value: VERIFICATION_ATTRIBUTE_TYPE_DATE_MISMATCH
            /// </summary>
            [EnumMember(Value = "VERIFICATION_ATTRIBUTE_TYPE_DATE_MISMATCH")]
            VERIFICATIONATTRIBUTETYPEDATEMISMATCH = 4,

            /// <summary>
            /// Enum VERIFICATIONATTRIBUTETYPEFILETAMPERING for value: VERIFICATION_ATTRIBUTE_TYPE_FILE_TAMPERING
            /// </summary>
            [EnumMember(Value = "VERIFICATION_ATTRIBUTE_TYPE_FILE_TAMPERING")]
            VERIFICATIONATTRIBUTETYPEFILETAMPERING = 5,

            /// <summary>
            /// Enum VERIFICATIONATTRIBUTETYPEDESCRIPTIONMATCH for value: VERIFICATION_ATTRIBUTE_TYPE_DESCRIPTION_MATCH
            /// </summary>
            [EnumMember(Value = "VERIFICATION_ATTRIBUTE_TYPE_DESCRIPTION_MATCH")]
            VERIFICATIONATTRIBUTETYPEDESCRIPTIONMATCH = 6,

            /// <summary>
            /// Enum VERIFICATIONATTRIBUTETYPEDESCRIPTIONMISMATCH for value: VERIFICATION_ATTRIBUTE_TYPE_DESCRIPTION_MISMATCH
            /// </summary>
            [EnumMember(Value = "VERIFICATION_ATTRIBUTE_TYPE_DESCRIPTION_MISMATCH")]
            VERIFICATIONATTRIBUTETYPEDESCRIPTIONMISMATCH = 7,

            /// <summary>
            /// Enum VERIFICATIONATTRIBUTETYPEFIRSTNAMEMATCH for value: VERIFICATION_ATTRIBUTE_TYPE_FIRST_NAME_MATCH
            /// </summary>
            [EnumMember(Value = "VERIFICATION_ATTRIBUTE_TYPE_FIRST_NAME_MATCH")]
            VERIFICATIONATTRIBUTETYPEFIRSTNAMEMATCH = 8,

            /// <summary>
            /// Enum VERIFICATIONATTRIBUTETYPEFIRSTNAMEMISMATCH for value: VERIFICATION_ATTRIBUTE_TYPE_FIRST_NAME_MISMATCH
            /// </summary>
            [EnumMember(Value = "VERIFICATION_ATTRIBUTE_TYPE_FIRST_NAME_MISMATCH")]
            VERIFICATIONATTRIBUTETYPEFIRSTNAMEMISMATCH = 9,

            /// <summary>
            /// Enum VERIFICATIONATTRIBUTETYPELASTNAMEMATCH for value: VERIFICATION_ATTRIBUTE_TYPE_LAST_NAME_MATCH
            /// </summary>
            [EnumMember(Value = "VERIFICATION_ATTRIBUTE_TYPE_LAST_NAME_MATCH")]
            VERIFICATIONATTRIBUTETYPELASTNAMEMATCH = 10,

            /// <summary>
            /// Enum VERIFICATIONATTRIBUTETYPELASTNAMEMISMATCH for value: VERIFICATION_ATTRIBUTE_TYPE_LAST_NAME_MISMATCH
            /// </summary>
            [EnumMember(Value = "VERIFICATION_ATTRIBUTE_TYPE_LAST_NAME_MISMATCH")]
            VERIFICATIONATTRIBUTETYPELASTNAMEMISMATCH = 11,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 12

        }


        /// <summary>
        /// Message indicating the reason as to why the verification failed
        /// </summary>
        /// <value>Message indicating the reason as to why the verification failed</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VerificationAttribute" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VerificationAttribute()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="VerificationAttribute" /> class.
        /// </summary>
        /// <param name="type">Message indicating the reason as to why the verification failed (required).</param>
        public VerificationAttribute(TypeEnum type = default(TypeEnum)) : base()
        {
            this.Type = type;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VerificationAttribute {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VerificationAttribute);
        }

        /// <summary>
        /// Returns true if VerificationAttribute instances are equal
        /// </summary>
        /// <param name="input">Instance of VerificationAttribute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VerificationAttribute input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
