/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// IncomeVerificationPrecheckRequest defines the request schema for &#x60;/income/verification/precheck&#x60;
    /// </summary>
    [DataContract(Name = "IncomeVerificationPrecheckRequest")]
    public partial class IncomeVerificationPrecheckRequest : IEquatable<IncomeVerificationPrecheckRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IncomeVerificationPrecheckRequest" /> class.
        /// </summary>
        /// <param name="clientId">Your Plaid API &#x60;client_id&#x60;. The &#x60;client_id&#x60; is required and may be provided either in the &#x60;PLAID-CLIENT-ID&#x60; header or as part of a request body..</param>
        /// <param name="secret">Your Plaid API &#x60;secret&#x60;. The &#x60;secret&#x60; is required and may be provided either in the &#x60;PLAID-SECRET&#x60; header or as part of a request body..</param>
        /// <param name="user">user.</param>
        /// <param name="employer">employer.</param>
        /// <param name="transactionsAccessToken">transactionsAccessToken.</param>
        /// <param name="transactionsAccessTokens">An array of access tokens corresponding to Items belonging to the user whose eligibility is being checked. Note that if the Items specified here are not already initialized with &#x60;transactions&#x60;, providing them in this field will cause these Items to be initialized with (and billed for) the Transactions product..</param>
        /// <param name="usMilitaryInfo">usMilitaryInfo.</param>
        public IncomeVerificationPrecheckRequest(string clientId = default(string), string secret = default(string), IncomeVerificationPrecheckUser user = default(IncomeVerificationPrecheckUser), IncomeVerificationPrecheckEmployer employer = default(IncomeVerificationPrecheckEmployer), string transactionsAccessToken = default(string), List<string> transactionsAccessTokens = default(List<string>), IncomeVerificationPrecheckMilitaryInfo usMilitaryInfo = default(IncomeVerificationPrecheckMilitaryInfo))
        {
            this.ClientId = clientId;
            this.Secret = secret;
            this.User = user;
            this.Employer = employer;
            this.TransactionsAccessToken = transactionsAccessToken;
            this.TransactionsAccessTokens = transactionsAccessTokens;
            this.UsMilitaryInfo = usMilitaryInfo;
        }

        /// <summary>
        /// Your Plaid API &#x60;client_id&#x60;. The &#x60;client_id&#x60; is required and may be provided either in the &#x60;PLAID-CLIENT-ID&#x60; header or as part of a request body.
        /// </summary>
        /// <value>Your Plaid API &#x60;client_id&#x60;. The &#x60;client_id&#x60; is required and may be provided either in the &#x60;PLAID-CLIENT-ID&#x60; header or as part of a request body.</value>
        [DataMember(Name = "client_id", EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Your Plaid API &#x60;secret&#x60;. The &#x60;secret&#x60; is required and may be provided either in the &#x60;PLAID-SECRET&#x60; header or as part of a request body.
        /// </summary>
        /// <value>Your Plaid API &#x60;secret&#x60;. The &#x60;secret&#x60; is required and may be provided either in the &#x60;PLAID-SECRET&#x60; header or as part of a request body.</value>
        [DataMember(Name = "secret", EmitDefaultValue = false)]
        public string Secret { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = true)]
        public IncomeVerificationPrecheckUser User { get; set; }

        /// <summary>
        /// Gets or Sets Employer
        /// </summary>
        [DataMember(Name = "employer", EmitDefaultValue = true)]
        public IncomeVerificationPrecheckEmployer Employer { get; set; }

        /// <summary>
        /// Gets or Sets TransactionsAccessToken
        /// </summary>
        [DataMember(Name = "transactions_access_token", EmitDefaultValue = true)]
        [Obsolete]
        public string TransactionsAccessToken { get; set; }

        /// <summary>
        /// An array of access tokens corresponding to Items belonging to the user whose eligibility is being checked. Note that if the Items specified here are not already initialized with &#x60;transactions&#x60;, providing them in this field will cause these Items to be initialized with (and billed for) the Transactions product.
        /// </summary>
        /// <value>An array of access tokens corresponding to Items belonging to the user whose eligibility is being checked. Note that if the Items specified here are not already initialized with &#x60;transactions&#x60;, providing them in this field will cause these Items to be initialized with (and billed for) the Transactions product.</value>
        [DataMember(Name = "transactions_access_tokens", EmitDefaultValue = false)]
        public List<string> TransactionsAccessTokens { get; set; }

        /// <summary>
        /// Gets or Sets UsMilitaryInfo
        /// </summary>
        [DataMember(Name = "us_military_info", EmitDefaultValue = true)]
        public IncomeVerificationPrecheckMilitaryInfo UsMilitaryInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IncomeVerificationPrecheckRequest {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Employer: ").Append(Employer).Append("\n");
            sb.Append("  TransactionsAccessToken: ").Append(TransactionsAccessToken).Append("\n");
            sb.Append("  TransactionsAccessTokens: ").Append(TransactionsAccessTokens).Append("\n");
            sb.Append("  UsMilitaryInfo: ").Append(UsMilitaryInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IncomeVerificationPrecheckRequest);
        }

        /// <summary>
        /// Returns true if IncomeVerificationPrecheckRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of IncomeVerificationPrecheckRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IncomeVerificationPrecheckRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.Secret == input.Secret ||
                    (this.Secret != null &&
                    this.Secret.Equals(input.Secret))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Employer == input.Employer ||
                    (this.Employer != null &&
                    this.Employer.Equals(input.Employer))
                ) && 
                (
                    this.TransactionsAccessToken == input.TransactionsAccessToken ||
                    (this.TransactionsAccessToken != null &&
                    this.TransactionsAccessToken.Equals(input.TransactionsAccessToken))
                ) && 
                (
                    this.TransactionsAccessTokens == input.TransactionsAccessTokens ||
                    this.TransactionsAccessTokens != null &&
                    input.TransactionsAccessTokens != null &&
                    this.TransactionsAccessTokens.SequenceEqual(input.TransactionsAccessTokens)
                ) && 
                (
                    this.UsMilitaryInfo == input.UsMilitaryInfo ||
                    (this.UsMilitaryInfo != null &&
                    this.UsMilitaryInfo.Equals(input.UsMilitaryInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientId.GetHashCode();
                }
                if (this.Secret != null)
                {
                    hashCode = (hashCode * 59) + this.Secret.GetHashCode();
                }
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                if (this.Employer != null)
                {
                    hashCode = (hashCode * 59) + this.Employer.GetHashCode();
                }
                if (this.TransactionsAccessToken != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionsAccessToken.GetHashCode();
                }
                if (this.TransactionsAccessTokens != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionsAccessTokens.GetHashCode();
                }
                if (this.UsMilitaryInfo != null)
                {
                    hashCode = (hashCode * 59) + this.UsMilitaryInfo.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
