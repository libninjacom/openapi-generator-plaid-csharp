/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// An optional set of options to be used when configuring the Item. If specified, must not be &#x60;null&#x60;.
    /// </summary>
    [DataContract(Name = "SandboxProcessorTokenCreateRequestOptions")]
    public partial class SandboxProcessorTokenCreateRequestOptions : IEquatable<SandboxProcessorTokenCreateRequestOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SandboxProcessorTokenCreateRequestOptions" /> class.
        /// </summary>
        /// <param name="overrideUsername">Test username to use for the creation of the Sandbox Item. Default value is &#x60;user_good&#x60;. (default to &quot;user_good&quot;).</param>
        /// <param name="overridePassword">Test password to use for the creation of the Sandbox Item. Default value is &#x60;pass_good&#x60;. (default to &quot;pass_good&quot;).</param>
        public SandboxProcessorTokenCreateRequestOptions(string overrideUsername = "user_good", string overridePassword = "pass_good")
        {
            // use default value if no "overrideUsername" provided
            this.OverrideUsername = overrideUsername ?? "user_good";
            // use default value if no "overridePassword" provided
            this.OverridePassword = overridePassword ?? "pass_good";
        }

        /// <summary>
        /// Test username to use for the creation of the Sandbox Item. Default value is &#x60;user_good&#x60;.
        /// </summary>
        /// <value>Test username to use for the creation of the Sandbox Item. Default value is &#x60;user_good&#x60;.</value>
        [DataMember(Name = "override_username", EmitDefaultValue = true)]
        public string OverrideUsername { get; set; }

        /// <summary>
        /// Test password to use for the creation of the Sandbox Item. Default value is &#x60;pass_good&#x60;.
        /// </summary>
        /// <value>Test password to use for the creation of the Sandbox Item. Default value is &#x60;pass_good&#x60;.</value>
        [DataMember(Name = "override_password", EmitDefaultValue = true)]
        public string OverridePassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SandboxProcessorTokenCreateRequestOptions {\n");
            sb.Append("  OverrideUsername: ").Append(OverrideUsername).Append("\n");
            sb.Append("  OverridePassword: ").Append(OverridePassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SandboxProcessorTokenCreateRequestOptions);
        }

        /// <summary>
        /// Returns true if SandboxProcessorTokenCreateRequestOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of SandboxProcessorTokenCreateRequestOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SandboxProcessorTokenCreateRequestOptions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OverrideUsername == input.OverrideUsername ||
                    (this.OverrideUsername != null &&
                    this.OverrideUsername.Equals(input.OverrideUsername))
                ) && 
                (
                    this.OverridePassword == input.OverridePassword ||
                    (this.OverridePassword != null &&
                    this.OverridePassword.Equals(input.OverridePassword))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OverrideUsername != null)
                {
                    hashCode = (hashCode * 59) + this.OverrideUsername.GetHashCode();
                }
                if (this.OverridePassword != null)
                {
                    hashCode = (hashCode * 59) + this.OverridePassword.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
