/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Data about military info in the income verification precheck.
    /// </summary>
    [DataContract(Name = "IncomeVerificationPrecheckMilitaryInfo")]
    public partial class IncomeVerificationPrecheckMilitaryInfo : IEquatable<IncomeVerificationPrecheckMilitaryInfo>, IValidatableObject
    {
        /// <summary>
        /// If the user is currently serving in the US military, the branch of the military they are serving in
        /// </summary>
        /// <value>If the user is currently serving in the US military, the branch of the military they are serving in</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BranchEnum
        {
            /// <summary>
            /// Enum AIRFORCE for value: AIR FORCE
            /// </summary>
            [EnumMember(Value = "AIR FORCE")]
            AIRFORCE = 1,

            /// <summary>
            /// Enum ARMY for value: ARMY
            /// </summary>
            [EnumMember(Value = "ARMY")]
            ARMY = 2,

            /// <summary>
            /// Enum COASTGUARD for value: COAST GUARD
            /// </summary>
            [EnumMember(Value = "COAST GUARD")]
            COASTGUARD = 3,

            /// <summary>
            /// Enum MARINES for value: MARINES
            /// </summary>
            [EnumMember(Value = "MARINES")]
            MARINES = 4,

            /// <summary>
            /// Enum NAVY for value: NAVY
            /// </summary>
            [EnumMember(Value = "NAVY")]
            NAVY = 5,

            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 6

        }


        /// <summary>
        /// If the user is currently serving in the US military, the branch of the military they are serving in
        /// </summary>
        /// <value>If the user is currently serving in the US military, the branch of the military they are serving in</value>
        [DataMember(Name = "branch", EmitDefaultValue = true)]
        public BranchEnum? Branch { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IncomeVerificationPrecheckMilitaryInfo" /> class.
        /// </summary>
        /// <param name="isActiveDuty">Is the user currently active duty in the US military.</param>
        /// <param name="branch">If the user is currently serving in the US military, the branch of the military they are serving in.</param>
        public IncomeVerificationPrecheckMilitaryInfo(bool? isActiveDuty = default(bool?), BranchEnum? branch = default(BranchEnum?))
        {
            this.IsActiveDuty = isActiveDuty;
            this.Branch = branch;
        }

        /// <summary>
        /// Is the user currently active duty in the US military
        /// </summary>
        /// <value>Is the user currently active duty in the US military</value>
        [DataMember(Name = "is_active_duty", EmitDefaultValue = true)]
        public bool? IsActiveDuty { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IncomeVerificationPrecheckMilitaryInfo {\n");
            sb.Append("  IsActiveDuty: ").Append(IsActiveDuty).Append("\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IncomeVerificationPrecheckMilitaryInfo);
        }

        /// <summary>
        /// Returns true if IncomeVerificationPrecheckMilitaryInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of IncomeVerificationPrecheckMilitaryInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IncomeVerificationPrecheckMilitaryInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IsActiveDuty == input.IsActiveDuty ||
                    (this.IsActiveDuty != null &&
                    this.IsActiveDuty.Equals(input.IsActiveDuty))
                ) && 
                (
                    this.Branch == input.Branch ||
                    this.Branch.Equals(input.Branch)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsActiveDuty != null)
                {
                    hashCode = (hashCode * 59) + this.IsActiveDuty.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Branch.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
