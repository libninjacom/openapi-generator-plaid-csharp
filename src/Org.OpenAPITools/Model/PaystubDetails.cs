/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// An object representing details that can be found on the paystub.
    /// </summary>
    [DataContract(Name = "PaystubDetails")]
    public partial class PaystubDetails : Dictionary<String, Object>, IEquatable<PaystubDetails>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets PayFrequency
        /// </summary>
        [DataMember(Name = "pay_frequency", EmitDefaultValue = true)]
        public PaystubPayFrequency? PayFrequency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaystubDetails" /> class.
        /// </summary>
        /// <param name="payPeriodStartDate">Beginning date of the pay period on the paystub in the &#39;YYYY-MM-DD&#39; format..</param>
        /// <param name="payPeriodEndDate">Ending date of the pay period on the paystub in the &#39;YYYY-MM-DD&#39; format..</param>
        /// <param name="payDate">Pay date on the paystub in the &#39;YYYY-MM-DD&#39; format..</param>
        /// <param name="paystubProvider">The name of the payroll provider that generated the paystub, e.g. ADP.</param>
        /// <param name="payFrequency">payFrequency.</param>
        public PaystubDetails(DateTime? payPeriodStartDate = default(DateTime?), DateTime? payPeriodEndDate = default(DateTime?), DateTime? payDate = default(DateTime?), string paystubProvider = default(string), PaystubPayFrequency? payFrequency = default(PaystubPayFrequency?)) : base()
        {
            this.PayPeriodStartDate = payPeriodStartDate;
            this.PayPeriodEndDate = payPeriodEndDate;
            this.PayDate = payDate;
            this.PaystubProvider = paystubProvider;
            this.PayFrequency = payFrequency;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Beginning date of the pay period on the paystub in the &#39;YYYY-MM-DD&#39; format.
        /// </summary>
        /// <value>Beginning date of the pay period on the paystub in the &#39;YYYY-MM-DD&#39; format.</value>
        [DataMember(Name = "pay_period_start_date", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? PayPeriodStartDate { get; set; }

        /// <summary>
        /// Ending date of the pay period on the paystub in the &#39;YYYY-MM-DD&#39; format.
        /// </summary>
        /// <value>Ending date of the pay period on the paystub in the &#39;YYYY-MM-DD&#39; format.</value>
        [DataMember(Name = "pay_period_end_date", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? PayPeriodEndDate { get; set; }

        /// <summary>
        /// Pay date on the paystub in the &#39;YYYY-MM-DD&#39; format.
        /// </summary>
        /// <value>Pay date on the paystub in the &#39;YYYY-MM-DD&#39; format.</value>
        [DataMember(Name = "pay_date", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? PayDate { get; set; }

        /// <summary>
        /// The name of the payroll provider that generated the paystub, e.g. ADP
        /// </summary>
        /// <value>The name of the payroll provider that generated the paystub, e.g. ADP</value>
        [DataMember(Name = "paystub_provider", EmitDefaultValue = true)]
        public string PaystubProvider { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaystubDetails {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  PayPeriodStartDate: ").Append(PayPeriodStartDate).Append("\n");
            sb.Append("  PayPeriodEndDate: ").Append(PayPeriodEndDate).Append("\n");
            sb.Append("  PayDate: ").Append(PayDate).Append("\n");
            sb.Append("  PaystubProvider: ").Append(PaystubProvider).Append("\n");
            sb.Append("  PayFrequency: ").Append(PayFrequency).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaystubDetails);
        }

        /// <summary>
        /// Returns true if PaystubDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of PaystubDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaystubDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.PayPeriodStartDate == input.PayPeriodStartDate ||
                    (this.PayPeriodStartDate != null &&
                    this.PayPeriodStartDate.Equals(input.PayPeriodStartDate))
                ) && base.Equals(input) && 
                (
                    this.PayPeriodEndDate == input.PayPeriodEndDate ||
                    (this.PayPeriodEndDate != null &&
                    this.PayPeriodEndDate.Equals(input.PayPeriodEndDate))
                ) && base.Equals(input) && 
                (
                    this.PayDate == input.PayDate ||
                    (this.PayDate != null &&
                    this.PayDate.Equals(input.PayDate))
                ) && base.Equals(input) && 
                (
                    this.PaystubProvider == input.PaystubProvider ||
                    (this.PaystubProvider != null &&
                    this.PaystubProvider.Equals(input.PaystubProvider))
                ) && base.Equals(input) && 
                (
                    this.PayFrequency == input.PayFrequency ||
                    this.PayFrequency.Equals(input.PayFrequency)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.PayPeriodStartDate != null)
                {
                    hashCode = (hashCode * 59) + this.PayPeriodStartDate.GetHashCode();
                }
                if (this.PayPeriodEndDate != null)
                {
                    hashCode = (hashCode * 59) + this.PayPeriodEndDate.GetHashCode();
                }
                if (this.PayDate != null)
                {
                    hashCode = (hashCode * 59) + this.PayDate.GetHashCode();
                }
                if (this.PaystubProvider != null)
                {
                    hashCode = (hashCode * 59) + this.PaystubProvider.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PayFrequency.GetHashCode();
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
