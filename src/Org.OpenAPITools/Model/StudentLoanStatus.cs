/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// An object representing the status of the student loan
    /// </summary>
    [DataContract(Name = "StudentLoanStatus")]
    public partial class StudentLoanStatus : Dictionary<String, Object>, IEquatable<StudentLoanStatus>, IValidatableObject
    {
        /// <summary>
        /// The status type of the student loan
        /// </summary>
        /// <value>The status type of the student loan</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Cancelled for value: cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            Cancelled = 1,

            /// <summary>
            /// Enum ChargedOff for value: charged off
            /// </summary>
            [EnumMember(Value = "charged off")]
            ChargedOff = 2,

            /// <summary>
            /// Enum Claim for value: claim
            /// </summary>
            [EnumMember(Value = "claim")]
            Claim = 3,

            /// <summary>
            /// Enum Consolidated for value: consolidated
            /// </summary>
            [EnumMember(Value = "consolidated")]
            Consolidated = 4,

            /// <summary>
            /// Enum Deferment for value: deferment
            /// </summary>
            [EnumMember(Value = "deferment")]
            Deferment = 5,

            /// <summary>
            /// Enum Delinquent for value: delinquent
            /// </summary>
            [EnumMember(Value = "delinquent")]
            Delinquent = 6,

            /// <summary>
            /// Enum Discharged for value: discharged
            /// </summary>
            [EnumMember(Value = "discharged")]
            Discharged = 7,

            /// <summary>
            /// Enum Extension for value: extension
            /// </summary>
            [EnumMember(Value = "extension")]
            Extension = 8,

            /// <summary>
            /// Enum Forbearance for value: forbearance
            /// </summary>
            [EnumMember(Value = "forbearance")]
            Forbearance = 9,

            /// <summary>
            /// Enum InGrace for value: in grace
            /// </summary>
            [EnumMember(Value = "in grace")]
            InGrace = 10,

            /// <summary>
            /// Enum InMilitary for value: in military
            /// </summary>
            [EnumMember(Value = "in military")]
            InMilitary = 11,

            /// <summary>
            /// Enum InSchool for value: in school
            /// </summary>
            [EnumMember(Value = "in school")]
            InSchool = 12,

            /// <summary>
            /// Enum NotFullyDisbursed for value: not fully disbursed
            /// </summary>
            [EnumMember(Value = "not fully disbursed")]
            NotFullyDisbursed = 13,

            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 14,

            /// <summary>
            /// Enum PaidInFull for value: paid in full
            /// </summary>
            [EnumMember(Value = "paid in full")]
            PaidInFull = 15,

            /// <summary>
            /// Enum Refunded for value: refunded
            /// </summary>
            [EnumMember(Value = "refunded")]
            Refunded = 16,

            /// <summary>
            /// Enum Repayment for value: repayment
            /// </summary>
            [EnumMember(Value = "repayment")]
            Repayment = 17,

            /// <summary>
            /// Enum Transferred for value: transferred
            /// </summary>
            [EnumMember(Value = "transferred")]
            Transferred = 18

        }


        /// <summary>
        /// The status type of the student loan
        /// </summary>
        /// <value>The status type of the student loan</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StudentLoanStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StudentLoanStatus()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="StudentLoanStatus" /> class.
        /// </summary>
        /// <param name="endDate">The date until which the loan will be in its current status. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).  (required).</param>
        /// <param name="type">The status type of the student loan (required).</param>
        public StudentLoanStatus(DateTime? endDate = default(DateTime?), TypeEnum type = default(TypeEnum)) : base()
        {
            // to ensure "endDate" is required (not null)
            if (endDate == null)
            {
                throw new ArgumentNullException("endDate is a required property for StudentLoanStatus and cannot be null");
            }
            this.EndDate = endDate;
            this.Type = type;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The date until which the loan will be in its current status. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). 
        /// </summary>
        /// <value>The date until which the loan will be in its current status. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). </value>
        [DataMember(Name = "end_date", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StudentLoanStatus {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StudentLoanStatus);
        }

        /// <summary>
        /// Returns true if StudentLoanStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of StudentLoanStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StudentLoanStatus input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
