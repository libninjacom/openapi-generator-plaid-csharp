/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// An object representing metadata from the end user&#39;s uploaded document.
    /// </summary>
    [DataContract(Name = "DocumentMetadata")]
    public partial class DocumentMetadata : Dictionary<String, Object>, IEquatable<DocumentMetadata>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets DocType
        /// </summary>
        [DataMember(Name = "doc_type", EmitDefaultValue = false)]
        public DocType? DocType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentMetadata" /> class.
        /// </summary>
        /// <param name="name">The name of the document..</param>
        /// <param name="status">The processing status of the document..</param>
        /// <param name="docId">An identifier of the document that is also present in the paystub response..</param>
        /// <param name="docType">docType.</param>
        public DocumentMetadata(string name = default(string), string status = default(string), string docId = default(string), DocType? docType = default(DocType?)) : base()
        {
            this.Name = name;
            this.Status = status;
            this.DocId = docId;
            this.DocType = docType;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The name of the document.
        /// </summary>
        /// <value>The name of the document.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The processing status of the document.
        /// </summary>
        /// <value>The processing status of the document.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// An identifier of the document that is also present in the paystub response.
        /// </summary>
        /// <value>An identifier of the document that is also present in the paystub response.</value>
        [DataMember(Name = "doc_id", EmitDefaultValue = false)]
        public string DocId { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DocumentMetadata {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  DocId: ").Append(DocId).Append("\n");
            sb.Append("  DocType: ").Append(DocType).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentMetadata);
        }

        /// <summary>
        /// Returns true if DocumentMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentMetadata input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && base.Equals(input) && 
                (
                    this.DocId == input.DocId ||
                    (this.DocId != null &&
                    this.DocId.Equals(input.DocId))
                ) && base.Equals(input) && 
                (
                    this.DocType == input.DocType ||
                    this.DocType.Equals(input.DocType)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.DocId != null)
                {
                    hashCode = (hashCode * 59) + this.DocId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DocType.GetHashCode();
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
