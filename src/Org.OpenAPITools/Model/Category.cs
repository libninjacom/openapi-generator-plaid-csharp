/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Information describing a transaction category
    /// </summary>
    [DataContract(Name = "Category")]
    public partial class Category : Dictionary<String, Object>, IEquatable<Category>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Category" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Category()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Category" /> class.
        /// </summary>
        /// <param name="categoryId">An identifying number for the category. &#x60;category_id&#x60; is a Plaid-specific identifier and does not necessarily correspond to merchant category codes. (required).</param>
        /// <param name="group">&#x60;place&#x60; for physical transactions or &#x60;special&#x60; for other transactions such as bank charges. (required).</param>
        /// <param name="hierarchy">A hierarchical array of the categories to which this &#x60;category_id&#x60; belongs. (required).</param>
        public Category(string categoryId = default(string), string group = default(string), List<string> hierarchy = default(List<string>)) : base()
        {
            // to ensure "categoryId" is required (not null)
            if (categoryId == null)
            {
                throw new ArgumentNullException("categoryId is a required property for Category and cannot be null");
            }
            this.CategoryId = categoryId;
            // to ensure "group" is required (not null)
            if (group == null)
            {
                throw new ArgumentNullException("group is a required property for Category and cannot be null");
            }
            this.Group = group;
            // to ensure "hierarchy" is required (not null)
            if (hierarchy == null)
            {
                throw new ArgumentNullException("hierarchy is a required property for Category and cannot be null");
            }
            this.Hierarchy = hierarchy;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// An identifying number for the category. &#x60;category_id&#x60; is a Plaid-specific identifier and does not necessarily correspond to merchant category codes.
        /// </summary>
        /// <value>An identifying number for the category. &#x60;category_id&#x60; is a Plaid-specific identifier and does not necessarily correspond to merchant category codes.</value>
        [DataMember(Name = "category_id", IsRequired = true, EmitDefaultValue = false)]
        public string CategoryId { get; set; }

        /// <summary>
        /// &#x60;place&#x60; for physical transactions or &#x60;special&#x60; for other transactions such as bank charges.
        /// </summary>
        /// <value>&#x60;place&#x60; for physical transactions or &#x60;special&#x60; for other transactions such as bank charges.</value>
        [DataMember(Name = "group", IsRequired = true, EmitDefaultValue = false)]
        public string Group { get; set; }

        /// <summary>
        /// A hierarchical array of the categories to which this &#x60;category_id&#x60; belongs.
        /// </summary>
        /// <value>A hierarchical array of the categories to which this &#x60;category_id&#x60; belongs.</value>
        [DataMember(Name = "hierarchy", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Hierarchy { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Category {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Hierarchy: ").Append(Hierarchy).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Category);
        }

        /// <summary>
        /// Returns true if Category instances are equal
        /// </summary>
        /// <param name="input">Instance of Category to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Category input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.CategoryId == input.CategoryId ||
                    (this.CategoryId != null &&
                    this.CategoryId.Equals(input.CategoryId))
                ) && base.Equals(input) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && base.Equals(input) && 
                (
                    this.Hierarchy == input.Hierarchy ||
                    this.Hierarchy != null &&
                    input.Hierarchy != null &&
                    this.Hierarchy.SequenceEqual(input.Hierarchy)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.CategoryId != null)
                {
                    hashCode = (hashCode * 59) + this.CategoryId.GetHashCode();
                }
                if (this.Group != null)
                {
                    hashCode = (hashCode * 59) + this.Group.GetHashCode();
                }
                if (this.Hierarchy != null)
                {
                    hashCode = (hashCode * 59) + this.Hierarchy.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
