/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Identifying information for transferring money to or from an international bank account via wire transfer.
    /// </summary>
    [DataContract(Name = "NumbersInternationalNullable")]
    public partial class NumbersInternationalNullable : IEquatable<NumbersInternationalNullable>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NumbersInternationalNullable" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NumbersInternationalNullable() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NumbersInternationalNullable" /> class.
        /// </summary>
        /// <param name="accountId">The Plaid account ID associated with the account numbers (required).</param>
        /// <param name="iban">The International Bank Account Number (IBAN) for the account (required).</param>
        /// <param name="bic">The Bank Identifier Code (BIC) for the account (required).</param>
        public NumbersInternationalNullable(string accountId = default(string), string iban = default(string), string bic = default(string))
        {
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new ArgumentNullException("accountId is a required property for NumbersInternationalNullable and cannot be null");
            }
            this.AccountId = accountId;
            // to ensure "iban" is required (not null)
            if (iban == null)
            {
                throw new ArgumentNullException("iban is a required property for NumbersInternationalNullable and cannot be null");
            }
            this.Iban = iban;
            // to ensure "bic" is required (not null)
            if (bic == null)
            {
                throw new ArgumentNullException("bic is a required property for NumbersInternationalNullable and cannot be null");
            }
            this.Bic = bic;
        }

        /// <summary>
        /// The Plaid account ID associated with the account numbers
        /// </summary>
        /// <value>The Plaid account ID associated with the account numbers</value>
        [DataMember(Name = "account_id", IsRequired = true, EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// The International Bank Account Number (IBAN) for the account
        /// </summary>
        /// <value>The International Bank Account Number (IBAN) for the account</value>
        [DataMember(Name = "iban", IsRequired = true, EmitDefaultValue = false)]
        public string Iban { get; set; }

        /// <summary>
        /// The Bank Identifier Code (BIC) for the account
        /// </summary>
        /// <value>The Bank Identifier Code (BIC) for the account</value>
        [DataMember(Name = "bic", IsRequired = true, EmitDefaultValue = false)]
        public string Bic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NumbersInternationalNullable {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Iban: ").Append(Iban).Append("\n");
            sb.Append("  Bic: ").Append(Bic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NumbersInternationalNullable);
        }

        /// <summary>
        /// Returns true if NumbersInternationalNullable instances are equal
        /// </summary>
        /// <param name="input">Instance of NumbersInternationalNullable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NumbersInternationalNullable input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.Iban == input.Iban ||
                    (this.Iban != null &&
                    this.Iban.Equals(input.Iban))
                ) && 
                (
                    this.Bic == input.Bic ||
                    (this.Bic != null &&
                    this.Bic.Equals(input.Bic))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                if (this.Iban != null)
                {
                    hashCode = (hashCode * 59) + this.Iban.GetHashCode();
                }
                if (this.Bic != null)
                {
                    hashCode = (hashCode * 59) + this.Bic.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
