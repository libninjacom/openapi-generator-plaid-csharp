/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Fired when the status of a payment has changed.
    /// </summary>
    [DataContract(Name = "PaymentStatusUpdateWebhook")]
    public partial class PaymentStatusUpdateWebhook : Dictionary<String, Object>, IEquatable<PaymentStatusUpdateWebhook>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets NewPaymentStatus
        /// </summary>
        [DataMember(Name = "new_payment_status", IsRequired = true, EmitDefaultValue = false)]
        public PaymentInitiationPaymentStatus NewPaymentStatus { get; set; }

        /// <summary>
        /// Gets or Sets OldPaymentStatus
        /// </summary>
        [DataMember(Name = "old_payment_status", IsRequired = true, EmitDefaultValue = false)]
        public PaymentInitiationPaymentStatus OldPaymentStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentStatusUpdateWebhook" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentStatusUpdateWebhook()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentStatusUpdateWebhook" /> class.
        /// </summary>
        /// <param name="webhookType">&#x60;PAYMENT_INITIATION&#x60; (required).</param>
        /// <param name="webhookCode">&#x60;PAYMENT_STATUS_UPDATE&#x60; (required).</param>
        /// <param name="paymentId">The &#x60;payment_id&#x60; for the payment being updated (required).</param>
        /// <param name="newPaymentStatus">newPaymentStatus (required).</param>
        /// <param name="oldPaymentStatus">oldPaymentStatus (required).</param>
        /// <param name="originalReference">The original value of the reference when creating the payment. (required).</param>
        /// <param name="adjustedReference">The value of the reference sent to the bank after adjustment to pass bank validation rules..</param>
        /// <param name="originalStartDate">The original value of the &#x60;start_date&#x60; provided during the creation of a standing order. If the payment is not a standing order, this field will be &#x60;null&#x60;. (required).</param>
        /// <param name="adjustedStartDate">The start date sent to the bank after adjusting for holidays or weekends.  Will be provided in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). If the start date did not require adjustment, or if the payment is not a standing order, this field will be &#x60;null&#x60;. (required).</param>
        /// <param name="timestamp">The timestamp of the update, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. &#x60;\&quot;2017-09-14T14:42:19.350Z\&quot;&#x60; (required).</param>
        /// <param name="error">error.</param>
        public PaymentStatusUpdateWebhook(string webhookType = default(string), string webhookCode = default(string), string paymentId = default(string), PaymentInitiationPaymentStatus newPaymentStatus = default(PaymentInitiationPaymentStatus), PaymentInitiationPaymentStatus oldPaymentStatus = default(PaymentInitiationPaymentStatus), string originalReference = default(string), string adjustedReference = default(string), DateTime? originalStartDate = default(DateTime?), DateTime? adjustedStartDate = default(DateTime?), DateTime timestamp = default(DateTime), PlaidError error = default(PlaidError)) : base()
        {
            // to ensure "webhookType" is required (not null)
            if (webhookType == null)
            {
                throw new ArgumentNullException("webhookType is a required property for PaymentStatusUpdateWebhook and cannot be null");
            }
            this.WebhookType = webhookType;
            // to ensure "webhookCode" is required (not null)
            if (webhookCode == null)
            {
                throw new ArgumentNullException("webhookCode is a required property for PaymentStatusUpdateWebhook and cannot be null");
            }
            this.WebhookCode = webhookCode;
            // to ensure "paymentId" is required (not null)
            if (paymentId == null)
            {
                throw new ArgumentNullException("paymentId is a required property for PaymentStatusUpdateWebhook and cannot be null");
            }
            this.PaymentId = paymentId;
            this.NewPaymentStatus = newPaymentStatus;
            this.OldPaymentStatus = oldPaymentStatus;
            // to ensure "originalReference" is required (not null)
            if (originalReference == null)
            {
                throw new ArgumentNullException("originalReference is a required property for PaymentStatusUpdateWebhook and cannot be null");
            }
            this.OriginalReference = originalReference;
            // to ensure "originalStartDate" is required (not null)
            if (originalStartDate == null)
            {
                throw new ArgumentNullException("originalStartDate is a required property for PaymentStatusUpdateWebhook and cannot be null");
            }
            this.OriginalStartDate = originalStartDate;
            // to ensure "adjustedStartDate" is required (not null)
            if (adjustedStartDate == null)
            {
                throw new ArgumentNullException("adjustedStartDate is a required property for PaymentStatusUpdateWebhook and cannot be null");
            }
            this.AdjustedStartDate = adjustedStartDate;
            this.Timestamp = timestamp;
            this.AdjustedReference = adjustedReference;
            this.Error = error;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// &#x60;PAYMENT_INITIATION&#x60;
        /// </summary>
        /// <value>&#x60;PAYMENT_INITIATION&#x60;</value>
        [DataMember(Name = "webhook_type", IsRequired = true, EmitDefaultValue = false)]
        public string WebhookType { get; set; }

        /// <summary>
        /// &#x60;PAYMENT_STATUS_UPDATE&#x60;
        /// </summary>
        /// <value>&#x60;PAYMENT_STATUS_UPDATE&#x60;</value>
        [DataMember(Name = "webhook_code", IsRequired = true, EmitDefaultValue = false)]
        public string WebhookCode { get; set; }

        /// <summary>
        /// The &#x60;payment_id&#x60; for the payment being updated
        /// </summary>
        /// <value>The &#x60;payment_id&#x60; for the payment being updated</value>
        [DataMember(Name = "payment_id", IsRequired = true, EmitDefaultValue = false)]
        public string PaymentId { get; set; }

        /// <summary>
        /// The original value of the reference when creating the payment.
        /// </summary>
        /// <value>The original value of the reference when creating the payment.</value>
        [DataMember(Name = "original_reference", IsRequired = true, EmitDefaultValue = true)]
        public string OriginalReference { get; set; }

        /// <summary>
        /// The value of the reference sent to the bank after adjustment to pass bank validation rules.
        /// </summary>
        /// <value>The value of the reference sent to the bank after adjustment to pass bank validation rules.</value>
        [DataMember(Name = "adjusted_reference", EmitDefaultValue = true)]
        public string AdjustedReference { get; set; }

        /// <summary>
        /// The original value of the &#x60;start_date&#x60; provided during the creation of a standing order. If the payment is not a standing order, this field will be &#x60;null&#x60;.
        /// </summary>
        /// <value>The original value of the &#x60;start_date&#x60; provided during the creation of a standing order. If the payment is not a standing order, this field will be &#x60;null&#x60;.</value>
        [DataMember(Name = "original_start_date", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? OriginalStartDate { get; set; }

        /// <summary>
        /// The start date sent to the bank after adjusting for holidays or weekends.  Will be provided in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). If the start date did not require adjustment, or if the payment is not a standing order, this field will be &#x60;null&#x60;.
        /// </summary>
        /// <value>The start date sent to the bank after adjusting for holidays or weekends.  Will be provided in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). If the start date did not require adjustment, or if the payment is not a standing order, this field will be &#x60;null&#x60;.</value>
        [DataMember(Name = "adjusted_start_date", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? AdjustedStartDate { get; set; }

        /// <summary>
        /// The timestamp of the update, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. &#x60;\&quot;2017-09-14T14:42:19.350Z\&quot;&#x60;
        /// </summary>
        /// <value>The timestamp of the update, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. &#x60;\&quot;2017-09-14T14:42:19.350Z\&quot;&#x60;</value>
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = false)]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public PlaidError Error { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentStatusUpdateWebhook {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  WebhookType: ").Append(WebhookType).Append("\n");
            sb.Append("  WebhookCode: ").Append(WebhookCode).Append("\n");
            sb.Append("  PaymentId: ").Append(PaymentId).Append("\n");
            sb.Append("  NewPaymentStatus: ").Append(NewPaymentStatus).Append("\n");
            sb.Append("  OldPaymentStatus: ").Append(OldPaymentStatus).Append("\n");
            sb.Append("  OriginalReference: ").Append(OriginalReference).Append("\n");
            sb.Append("  AdjustedReference: ").Append(AdjustedReference).Append("\n");
            sb.Append("  OriginalStartDate: ").Append(OriginalStartDate).Append("\n");
            sb.Append("  AdjustedStartDate: ").Append(AdjustedStartDate).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentStatusUpdateWebhook);
        }

        /// <summary>
        /// Returns true if PaymentStatusUpdateWebhook instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentStatusUpdateWebhook to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentStatusUpdateWebhook input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.WebhookType == input.WebhookType ||
                    (this.WebhookType != null &&
                    this.WebhookType.Equals(input.WebhookType))
                ) && base.Equals(input) && 
                (
                    this.WebhookCode == input.WebhookCode ||
                    (this.WebhookCode != null &&
                    this.WebhookCode.Equals(input.WebhookCode))
                ) && base.Equals(input) && 
                (
                    this.PaymentId == input.PaymentId ||
                    (this.PaymentId != null &&
                    this.PaymentId.Equals(input.PaymentId))
                ) && base.Equals(input) && 
                (
                    this.NewPaymentStatus == input.NewPaymentStatus ||
                    this.NewPaymentStatus.Equals(input.NewPaymentStatus)
                ) && base.Equals(input) && 
                (
                    this.OldPaymentStatus == input.OldPaymentStatus ||
                    this.OldPaymentStatus.Equals(input.OldPaymentStatus)
                ) && base.Equals(input) && 
                (
                    this.OriginalReference == input.OriginalReference ||
                    (this.OriginalReference != null &&
                    this.OriginalReference.Equals(input.OriginalReference))
                ) && base.Equals(input) && 
                (
                    this.AdjustedReference == input.AdjustedReference ||
                    (this.AdjustedReference != null &&
                    this.AdjustedReference.Equals(input.AdjustedReference))
                ) && base.Equals(input) && 
                (
                    this.OriginalStartDate == input.OriginalStartDate ||
                    (this.OriginalStartDate != null &&
                    this.OriginalStartDate.Equals(input.OriginalStartDate))
                ) && base.Equals(input) && 
                (
                    this.AdjustedStartDate == input.AdjustedStartDate ||
                    (this.AdjustedStartDate != null &&
                    this.AdjustedStartDate.Equals(input.AdjustedStartDate))
                ) && base.Equals(input) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && base.Equals(input) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.WebhookType != null)
                {
                    hashCode = (hashCode * 59) + this.WebhookType.GetHashCode();
                }
                if (this.WebhookCode != null)
                {
                    hashCode = (hashCode * 59) + this.WebhookCode.GetHashCode();
                }
                if (this.PaymentId != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NewPaymentStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.OldPaymentStatus.GetHashCode();
                if (this.OriginalReference != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalReference.GetHashCode();
                }
                if (this.AdjustedReference != null)
                {
                    hashCode = (hashCode * 59) + this.AdjustedReference.GetHashCode();
                }
                if (this.OriginalStartDate != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalStartDate.GetHashCode();
                }
                if (this.AdjustedStartDate != null)
                {
                    hashCode = (hashCode * 59) + this.AdjustedStartDate.GetHashCode();
                }
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                if (this.Error != null)
                {
                    hashCode = (hashCode * 59) + this.Error.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
