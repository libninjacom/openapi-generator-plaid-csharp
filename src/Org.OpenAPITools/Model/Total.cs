/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// An object representing both the current pay period and year to date amount for a category.
    /// </summary>
    [DataContract(Name = "Total")]
    public partial class Total : Dictionary<String, Object>, IEquatable<Total>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets CanonicalDescription
        /// </summary>
        [DataMember(Name = "canonical_description", EmitDefaultValue = true)]
        public TotalCanonicalDescription? CanonicalDescription { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Total" /> class.
        /// </summary>
        /// <param name="canonicalDescription">canonicalDescription.</param>
        /// <param name="description">Text of the line item as printed on the paystub..</param>
        /// <param name="currentPay">currentPay.</param>
        /// <param name="ytdPay">ytdPay.</param>
        public Total(TotalCanonicalDescription? canonicalDescription = default(TotalCanonicalDescription?), string description = default(string), Pay currentPay = default(Pay), Pay ytdPay = default(Pay)) : base()
        {
            this.CanonicalDescription = canonicalDescription;
            this.Description = description;
            this.CurrentPay = currentPay;
            this.YtdPay = ytdPay;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Text of the line item as printed on the paystub.
        /// </summary>
        /// <value>Text of the line item as printed on the paystub.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets CurrentPay
        /// </summary>
        [DataMember(Name = "current_pay", EmitDefaultValue = false)]
        [Obsolete]
        public Pay CurrentPay { get; set; }

        /// <summary>
        /// Gets or Sets YtdPay
        /// </summary>
        [DataMember(Name = "ytd_pay", EmitDefaultValue = false)]
        [Obsolete]
        public Pay YtdPay { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Total {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  CanonicalDescription: ").Append(CanonicalDescription).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CurrentPay: ").Append(CurrentPay).Append("\n");
            sb.Append("  YtdPay: ").Append(YtdPay).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Total);
        }

        /// <summary>
        /// Returns true if Total instances are equal
        /// </summary>
        /// <param name="input">Instance of Total to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Total input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.CanonicalDescription == input.CanonicalDescription ||
                    this.CanonicalDescription.Equals(input.CanonicalDescription)
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.CurrentPay == input.CurrentPay ||
                    (this.CurrentPay != null &&
                    this.CurrentPay.Equals(input.CurrentPay))
                ) && base.Equals(input) && 
                (
                    this.YtdPay == input.YtdPay ||
                    (this.YtdPay != null &&
                    this.YtdPay.Equals(input.YtdPay))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                hashCode = (hashCode * 59) + this.CanonicalDescription.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.CurrentPay != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentPay.GetHashCode();
                }
                if (this.YtdPay != null)
                {
                    hashCode = (hashCode * 59) + this.YtdPay.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
