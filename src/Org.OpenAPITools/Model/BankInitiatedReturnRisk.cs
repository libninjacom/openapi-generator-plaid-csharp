/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The object contains a risk score and a risk tier that evaluate the transaction return risk because an account is overdrawn or because an ineligible account is used. Common return codes in this category include: \&quot;R01\&quot;, \&quot;R02\&quot;, \&quot;R03\&quot;, \&quot;R04\&quot;, \&quot;R06\&quot;, \&quot;R08\&quot;,  \&quot;R09\&quot;, \&quot;R13\&quot;, \&quot;R16\&quot;, \&quot;R17\&quot;, \&quot;R20\&quot;, \&quot;R23\&quot;. These returns have a turnaround time of 2 banking days.
    /// </summary>
    [DataContract(Name = "BankInitiatedReturnRisk")]
    public partial class BankInitiatedReturnRisk : IEquatable<BankInitiatedReturnRisk>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BankInitiatedReturnRisk" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BankInitiatedReturnRisk() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BankInitiatedReturnRisk" /> class.
        /// </summary>
        /// <param name="score">A score from 0-99 that indicates the transaction return risk: a higher risk score suggests a higher return likelihood. (required).</param>
        /// <param name="riskTier">In the &#x60;bank_initiated_return_risk&#x60; object, there are eight risk tiers corresponding to the scores:   1: Predicted bank-initiated return incidence rate between 0.0% - 0.5%   2: Predicted bank-initiated return incidence rate between 0.5% - 1.5%   3: Predicted bank-initiated return incidence rate between 1.5% - 3%   4: Predicted bank-initiated return incidence rate between 3% - 5%   5: Predicted bank-initiated return incidence rate between 5% - 10%   6: Predicted bank-initiated return incidence rate between 10% - 15%   7: Predicted bank-initiated return incidence rate between 15% and 50%   8: Predicted bank-initiated return incidence rate greater than 50%  (required).</param>
        public BankInitiatedReturnRisk(int score = default(int), int riskTier = default(int))
        {
            this.Score = score;
            this.RiskTier = riskTier;
        }

        /// <summary>
        /// A score from 0-99 that indicates the transaction return risk: a higher risk score suggests a higher return likelihood.
        /// </summary>
        /// <value>A score from 0-99 that indicates the transaction return risk: a higher risk score suggests a higher return likelihood.</value>
        [DataMember(Name = "score", IsRequired = true, EmitDefaultValue = false)]
        public int Score { get; set; }

        /// <summary>
        /// In the &#x60;bank_initiated_return_risk&#x60; object, there are eight risk tiers corresponding to the scores:   1: Predicted bank-initiated return incidence rate between 0.0% - 0.5%   2: Predicted bank-initiated return incidence rate between 0.5% - 1.5%   3: Predicted bank-initiated return incidence rate between 1.5% - 3%   4: Predicted bank-initiated return incidence rate between 3% - 5%   5: Predicted bank-initiated return incidence rate between 5% - 10%   6: Predicted bank-initiated return incidence rate between 10% - 15%   7: Predicted bank-initiated return incidence rate between 15% and 50%   8: Predicted bank-initiated return incidence rate greater than 50% 
        /// </summary>
        /// <value>In the &#x60;bank_initiated_return_risk&#x60; object, there are eight risk tiers corresponding to the scores:   1: Predicted bank-initiated return incidence rate between 0.0% - 0.5%   2: Predicted bank-initiated return incidence rate between 0.5% - 1.5%   3: Predicted bank-initiated return incidence rate between 1.5% - 3%   4: Predicted bank-initiated return incidence rate between 3% - 5%   5: Predicted bank-initiated return incidence rate between 5% - 10%   6: Predicted bank-initiated return incidence rate between 10% - 15%   7: Predicted bank-initiated return incidence rate between 15% and 50%   8: Predicted bank-initiated return incidence rate greater than 50% </value>
        [DataMember(Name = "risk_tier", IsRequired = true, EmitDefaultValue = false)]
        public int RiskTier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BankInitiatedReturnRisk {\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  RiskTier: ").Append(RiskTier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BankInitiatedReturnRisk);
        }

        /// <summary>
        /// Returns true if BankInitiatedReturnRisk instances are equal
        /// </summary>
        /// <param name="input">Instance of BankInitiatedReturnRisk to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankInitiatedReturnRisk input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Score == input.Score ||
                    this.Score.Equals(input.Score)
                ) && 
                (
                    this.RiskTier == input.RiskTier ||
                    this.RiskTier.Equals(input.RiskTier)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Score.GetHashCode();
                hashCode = (hashCode * 59) + this.RiskTier.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Score (int) maximum
            if (this.Score > (int)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Score, must be a value less than or equal to 100.", new [] { "Score" });
            }

            // Score (int) minimum
            if (this.Score < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Score, must be a value greater than or equal to 0.", new [] { "Score" });
            }

            // RiskTier (int) maximum
            if (this.RiskTier > (int)8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RiskTier, must be a value less than or equal to 8.", new [] { "RiskTier" });
            }

            // RiskTier (int) minimum
            if (this.RiskTier < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RiskTier, must be a value greater than or equal to 1.", new [] { "RiskTier" });
            }

            yield break;
        }
    }

}
