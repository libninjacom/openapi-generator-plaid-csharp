/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Data about the employer.
    /// </summary>
    [DataContract(Name = "Employer")]
    public partial class Employer : Dictionary<String, Object>, IEquatable<Employer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Employer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Employer()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Employer" /> class.
        /// </summary>
        /// <param name="employerId">Plaid&#39;s unique identifier for the employer. (required).</param>
        /// <param name="name">The name of the employer (required).</param>
        /// <param name="address">address (required).</param>
        /// <param name="confidenceScore">A number from 0 to 1 indicating Plaid&#39;s level of confidence in the pairing between the employer and the institution (not yet implemented). (required).</param>
        public Employer(string employerId = default(string), string name = default(string), AddressDataNullable address = default(AddressDataNullable), decimal confidenceScore = default(decimal)) : base()
        {
            // to ensure "employerId" is required (not null)
            if (employerId == null)
            {
                throw new ArgumentNullException("employerId is a required property for Employer and cannot be null");
            }
            this.EmployerId = employerId;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Employer and cannot be null");
            }
            this.Name = name;
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for Employer and cannot be null");
            }
            this.Address = address;
            this.ConfidenceScore = confidenceScore;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Plaid&#39;s unique identifier for the employer.
        /// </summary>
        /// <value>Plaid&#39;s unique identifier for the employer.</value>
        [DataMember(Name = "employer_id", IsRequired = true, EmitDefaultValue = false)]
        public string EmployerId { get; set; }

        /// <summary>
        /// The name of the employer
        /// </summary>
        /// <value>The name of the employer</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public AddressDataNullable Address { get; set; }

        /// <summary>
        /// A number from 0 to 1 indicating Plaid&#39;s level of confidence in the pairing between the employer and the institution (not yet implemented).
        /// </summary>
        /// <value>A number from 0 to 1 indicating Plaid&#39;s level of confidence in the pairing between the employer and the institution (not yet implemented).</value>
        [DataMember(Name = "confidence_score", IsRequired = true, EmitDefaultValue = false)]
        public decimal ConfidenceScore { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Employer {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  EmployerId: ").Append(EmployerId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  ConfidenceScore: ").Append(ConfidenceScore).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Employer);
        }

        /// <summary>
        /// Returns true if Employer instances are equal
        /// </summary>
        /// <param name="input">Instance of Employer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Employer input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.EmployerId == input.EmployerId ||
                    (this.EmployerId != null &&
                    this.EmployerId.Equals(input.EmployerId))
                ) && base.Equals(input) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && base.Equals(input) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && base.Equals(input) && 
                (
                    this.ConfidenceScore == input.ConfidenceScore ||
                    this.ConfidenceScore.Equals(input.ConfidenceScore)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.EmployerId != null)
                {
                    hashCode = (hashCode * 59) + this.EmployerId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ConfidenceScore.GetHashCode();
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
