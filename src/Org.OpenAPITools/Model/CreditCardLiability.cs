/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// An object representing a credit card account.
    /// </summary>
    [DataContract(Name = "CreditCardLiability")]
    public partial class CreditCardLiability : Dictionary<String, Object>, IEquatable<CreditCardLiability>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditCardLiability" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreditCardLiability()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditCardLiability" /> class.
        /// </summary>
        /// <param name="accountId">The ID of the account that this liability belongs to. (required).</param>
        /// <param name="aprs">The various interest rates that apply to the account. (required).</param>
        /// <param name="isOverdue">true if a payment is currently overdue. Availability for this field is limited. (required).</param>
        /// <param name="lastPaymentAmount">The amount of the last payment. (required).</param>
        /// <param name="lastPaymentDate">The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Availability for this field is limited. (required).</param>
        /// <param name="lastStatementIssueDate">The date of the last statement. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). (required).</param>
        /// <param name="lastStatementBalance">The total amount owed as of the last statement issued (required).</param>
        /// <param name="minimumPaymentAmount">The minimum payment due for the next billing cycle. (required).</param>
        /// <param name="nextPaymentDueDate">The due date for the next payment. The due date is &#x60;null&#x60; if a payment is not expected. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). (required).</param>
        public CreditCardLiability(string accountId = default(string), List<APR> aprs = default(List<APR>), bool? isOverdue = default(bool?), decimal lastPaymentAmount = default(decimal), DateTime? lastPaymentDate = default(DateTime?), DateTime lastStatementIssueDate = default(DateTime), decimal lastStatementBalance = default(decimal), decimal minimumPaymentAmount = default(decimal), DateTime? nextPaymentDueDate = default(DateTime?)) : base()
        {
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new ArgumentNullException("accountId is a required property for CreditCardLiability and cannot be null");
            }
            this.AccountId = accountId;
            // to ensure "aprs" is required (not null)
            if (aprs == null)
            {
                throw new ArgumentNullException("aprs is a required property for CreditCardLiability and cannot be null");
            }
            this.Aprs = aprs;
            // to ensure "isOverdue" is required (not null)
            if (isOverdue == null)
            {
                throw new ArgumentNullException("isOverdue is a required property for CreditCardLiability and cannot be null");
            }
            this.IsOverdue = isOverdue;
            this.LastPaymentAmount = lastPaymentAmount;
            // to ensure "lastPaymentDate" is required (not null)
            if (lastPaymentDate == null)
            {
                throw new ArgumentNullException("lastPaymentDate is a required property for CreditCardLiability and cannot be null");
            }
            this.LastPaymentDate = lastPaymentDate;
            this.LastStatementIssueDate = lastStatementIssueDate;
            this.LastStatementBalance = lastStatementBalance;
            this.MinimumPaymentAmount = minimumPaymentAmount;
            // to ensure "nextPaymentDueDate" is required (not null)
            if (nextPaymentDueDate == null)
            {
                throw new ArgumentNullException("nextPaymentDueDate is a required property for CreditCardLiability and cannot be null");
            }
            this.NextPaymentDueDate = nextPaymentDueDate;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The ID of the account that this liability belongs to.
        /// </summary>
        /// <value>The ID of the account that this liability belongs to.</value>
        [DataMember(Name = "account_id", IsRequired = true, EmitDefaultValue = true)]
        public string AccountId { get; set; }

        /// <summary>
        /// The various interest rates that apply to the account.
        /// </summary>
        /// <value>The various interest rates that apply to the account.</value>
        [DataMember(Name = "aprs", IsRequired = true, EmitDefaultValue = false)]
        public List<APR> Aprs { get; set; }

        /// <summary>
        /// true if a payment is currently overdue. Availability for this field is limited.
        /// </summary>
        /// <value>true if a payment is currently overdue. Availability for this field is limited.</value>
        [DataMember(Name = "is_overdue", IsRequired = true, EmitDefaultValue = true)]
        public bool? IsOverdue { get; set; }

        /// <summary>
        /// The amount of the last payment.
        /// </summary>
        /// <value>The amount of the last payment.</value>
        [DataMember(Name = "last_payment_amount", IsRequired = true, EmitDefaultValue = false)]
        public decimal LastPaymentAmount { get; set; }

        /// <summary>
        /// The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Availability for this field is limited.
        /// </summary>
        /// <value>The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Availability for this field is limited.</value>
        [DataMember(Name = "last_payment_date", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? LastPaymentDate { get; set; }

        /// <summary>
        /// The date of the last statement. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
        /// </summary>
        /// <value>The date of the last statement. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).</value>
        [DataMember(Name = "last_statement_issue_date", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime LastStatementIssueDate { get; set; }

        /// <summary>
        /// The total amount owed as of the last statement issued
        /// </summary>
        /// <value>The total amount owed as of the last statement issued</value>
        [DataMember(Name = "last_statement_balance", IsRequired = true, EmitDefaultValue = false)]
        public decimal LastStatementBalance { get; set; }

        /// <summary>
        /// The minimum payment due for the next billing cycle.
        /// </summary>
        /// <value>The minimum payment due for the next billing cycle.</value>
        [DataMember(Name = "minimum_payment_amount", IsRequired = true, EmitDefaultValue = false)]
        public decimal MinimumPaymentAmount { get; set; }

        /// <summary>
        /// The due date for the next payment. The due date is &#x60;null&#x60; if a payment is not expected. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
        /// </summary>
        /// <value>The due date for the next payment. The due date is &#x60;null&#x60; if a payment is not expected. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).</value>
        [DataMember(Name = "next_payment_due_date", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? NextPaymentDueDate { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreditCardLiability {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Aprs: ").Append(Aprs).Append("\n");
            sb.Append("  IsOverdue: ").Append(IsOverdue).Append("\n");
            sb.Append("  LastPaymentAmount: ").Append(LastPaymentAmount).Append("\n");
            sb.Append("  LastPaymentDate: ").Append(LastPaymentDate).Append("\n");
            sb.Append("  LastStatementIssueDate: ").Append(LastStatementIssueDate).Append("\n");
            sb.Append("  LastStatementBalance: ").Append(LastStatementBalance).Append("\n");
            sb.Append("  MinimumPaymentAmount: ").Append(MinimumPaymentAmount).Append("\n");
            sb.Append("  NextPaymentDueDate: ").Append(NextPaymentDueDate).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreditCardLiability);
        }

        /// <summary>
        /// Returns true if CreditCardLiability instances are equal
        /// </summary>
        /// <param name="input">Instance of CreditCardLiability to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditCardLiability input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && base.Equals(input) && 
                (
                    this.Aprs == input.Aprs ||
                    this.Aprs != null &&
                    input.Aprs != null &&
                    this.Aprs.SequenceEqual(input.Aprs)
                ) && base.Equals(input) && 
                (
                    this.IsOverdue == input.IsOverdue ||
                    (this.IsOverdue != null &&
                    this.IsOverdue.Equals(input.IsOverdue))
                ) && base.Equals(input) && 
                (
                    this.LastPaymentAmount == input.LastPaymentAmount ||
                    this.LastPaymentAmount.Equals(input.LastPaymentAmount)
                ) && base.Equals(input) && 
                (
                    this.LastPaymentDate == input.LastPaymentDate ||
                    (this.LastPaymentDate != null &&
                    this.LastPaymentDate.Equals(input.LastPaymentDate))
                ) && base.Equals(input) && 
                (
                    this.LastStatementIssueDate == input.LastStatementIssueDate ||
                    (this.LastStatementIssueDate != null &&
                    this.LastStatementIssueDate.Equals(input.LastStatementIssueDate))
                ) && base.Equals(input) && 
                (
                    this.LastStatementBalance == input.LastStatementBalance ||
                    this.LastStatementBalance.Equals(input.LastStatementBalance)
                ) && base.Equals(input) && 
                (
                    this.MinimumPaymentAmount == input.MinimumPaymentAmount ||
                    this.MinimumPaymentAmount.Equals(input.MinimumPaymentAmount)
                ) && base.Equals(input) && 
                (
                    this.NextPaymentDueDate == input.NextPaymentDueDate ||
                    (this.NextPaymentDueDate != null &&
                    this.NextPaymentDueDate.Equals(input.NextPaymentDueDate))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                if (this.Aprs != null)
                {
                    hashCode = (hashCode * 59) + this.Aprs.GetHashCode();
                }
                if (this.IsOverdue != null)
                {
                    hashCode = (hashCode * 59) + this.IsOverdue.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LastPaymentAmount.GetHashCode();
                if (this.LastPaymentDate != null)
                {
                    hashCode = (hashCode * 59) + this.LastPaymentDate.GetHashCode();
                }
                if (this.LastStatementIssueDate != null)
                {
                    hashCode = (hashCode * 59) + this.LastStatementIssueDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LastStatementBalance.GetHashCode();
                hashCode = (hashCode * 59) + this.MinimumPaymentAmount.GetHashCode();
                if (this.NextPaymentDueDate != null)
                {
                    hashCode = (hashCode * 59) + this.NextPaymentDueDate.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
