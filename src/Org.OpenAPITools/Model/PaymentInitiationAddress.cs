/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The optional address of the payment recipient. This object is not currently required to make payments from UK institutions and should not be populated, though may be necessary for future European expansion.
    /// </summary>
    [DataContract(Name = "PaymentInitiationAddress")]
    public partial class PaymentInitiationAddress : Dictionary<String, Object>, IEquatable<PaymentInitiationAddress>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentInitiationAddress" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentInitiationAddress()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentInitiationAddress" /> class.
        /// </summary>
        /// <param name="street">An array of length 1-2 representing the street address where the recipient is located. Maximum of 70 characters. (required).</param>
        /// <param name="city">The city where the recipient is located. Maximum of 35 characters. (required).</param>
        /// <param name="postalCode">The postal code where the recipient is located. Maximum of 16 characters. (required).</param>
        /// <param name="country">The ISO 3166-1 alpha-2 country code where the recipient is located. (required).</param>
        public PaymentInitiationAddress(List<string> street = default(List<string>), string city = default(string), string postalCode = default(string), string country = default(string)) : base()
        {
            // to ensure "street" is required (not null)
            if (street == null)
            {
                throw new ArgumentNullException("street is a required property for PaymentInitiationAddress and cannot be null");
            }
            this.Street = street;
            // to ensure "city" is required (not null)
            if (city == null)
            {
                throw new ArgumentNullException("city is a required property for PaymentInitiationAddress and cannot be null");
            }
            this.City = city;
            // to ensure "postalCode" is required (not null)
            if (postalCode == null)
            {
                throw new ArgumentNullException("postalCode is a required property for PaymentInitiationAddress and cannot be null");
            }
            this.PostalCode = postalCode;
            // to ensure "country" is required (not null)
            if (country == null)
            {
                throw new ArgumentNullException("country is a required property for PaymentInitiationAddress and cannot be null");
            }
            this.Country = country;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// An array of length 1-2 representing the street address where the recipient is located. Maximum of 70 characters.
        /// </summary>
        /// <value>An array of length 1-2 representing the street address where the recipient is located. Maximum of 70 characters.</value>
        [DataMember(Name = "street", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Street { get; set; }

        /// <summary>
        /// The city where the recipient is located. Maximum of 35 characters.
        /// </summary>
        /// <value>The city where the recipient is located. Maximum of 35 characters.</value>
        [DataMember(Name = "city", IsRequired = true, EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// The postal code where the recipient is located. Maximum of 16 characters.
        /// </summary>
        /// <value>The postal code where the recipient is located. Maximum of 16 characters.</value>
        [DataMember(Name = "postal_code", IsRequired = true, EmitDefaultValue = false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// The ISO 3166-1 alpha-2 country code where the recipient is located.
        /// </summary>
        /// <value>The ISO 3166-1 alpha-2 country code where the recipient is located.</value>
        [DataMember(Name = "country", IsRequired = true, EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentInitiationAddress {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentInitiationAddress);
        }

        /// <summary>
        /// Returns true if PaymentInitiationAddress instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentInitiationAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentInitiationAddress input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Street == input.Street ||
                    this.Street != null &&
                    input.Street != null &&
                    this.Street.SequenceEqual(input.Street)
                ) && base.Equals(input) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && base.Equals(input) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && base.Equals(input) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Street != null)
                {
                    hashCode = (hashCode * 59) + this.Street.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.PostalCode != null)
                {
                    hashCode = (hashCode * 59) + this.PostalCode.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // City (string) maxLength
            if (this.City != null && this.City.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for City, length must be less than 35.", new [] { "City" });
            }

            // City (string) minLength
            if (this.City != null && this.City.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for City, length must be greater than 1.", new [] { "City" });
            }

            // PostalCode (string) maxLength
            if (this.PostalCode != null && this.PostalCode.Length > 16)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PostalCode, length must be less than 16.", new [] { "PostalCode" });
            }

            // PostalCode (string) minLength
            if (this.PostalCode != null && this.PostalCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PostalCode, length must be greater than 1.", new [] { "PostalCode" });
            }

            // Country (string) maxLength
            if (this.Country != null && this.Country.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Country, length must be less than 2.", new [] { "Country" });
            }

            // Country (string) minLength
            if (this.Country != null && this.Country.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Country, length must be greater than 2.", new [] { "Country" });
            }

            yield break;
        }
    }

}
