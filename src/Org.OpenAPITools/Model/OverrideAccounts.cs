/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Data to use to set values of test accounts. Some values cannot be specified in the schema and will instead will be calculated from other test data in order to achieve more consistent, realistic test data.
    /// </summary>
    [DataContract(Name = "OverrideAccounts")]
    public partial class OverrideAccounts : Dictionary<String, Object>, IEquatable<OverrideAccounts>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public OverrideAccountType Type { get; set; }

        /// <summary>
        /// Gets or Sets Subtype
        /// </summary>
        [DataMember(Name = "subtype", IsRequired = true, EmitDefaultValue = true)]
        public AccountSubtype Subtype { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OverrideAccounts" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OverrideAccounts()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="OverrideAccounts" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="subtype">subtype (required).</param>
        /// <param name="startingBalance">If provided, the account will start with this amount as the current balance.  (required).</param>
        /// <param name="forceAvailableBalance">If provided, the account will always have this amount as its  available balance, regardless of current balance or changes in transactions over time. (required).</param>
        /// <param name="currency">ISO-4217 currency code. If provided, the account will be denominated in the given currency. Transactions will also be in this currency by default. (required).</param>
        /// <param name="meta">meta (required).</param>
        /// <param name="numbers">numbers (required).</param>
        /// <param name="transactions">Specify the list of transactions on the account. (required).</param>
        /// <param name="holdings">holdings.</param>
        /// <param name="investmentTransactions">investmentTransactions.</param>
        /// <param name="identity">identity (required).</param>
        /// <param name="liability">liability (required).</param>
        /// <param name="inflowModel">inflowModel (required).</param>
        /// <param name="income">income.</param>
        public OverrideAccounts(OverrideAccountType type = default(OverrideAccountType), AccountSubtype subtype = default(AccountSubtype), decimal startingBalance = default(decimal), decimal forceAvailableBalance = default(decimal), string currency = default(string), Meta meta = default(Meta), Numbers numbers = default(Numbers), List<TransactionOverride> transactions = default(List<TransactionOverride>), HoldingsOverride holdings = default(HoldingsOverride), InvestmentsTransactionsOverride investmentTransactions = default(InvestmentsTransactionsOverride), OwnerOverride identity = default(OwnerOverride), LiabilityOverride liability = default(LiabilityOverride), InflowModel inflowModel = default(InflowModel), IncomeOverride income = default(IncomeOverride)) : base()
        {
            this.Type = type;
            this.Subtype = subtype;
            this.StartingBalance = startingBalance;
            this.ForceAvailableBalance = forceAvailableBalance;
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new ArgumentNullException("currency is a required property for OverrideAccounts and cannot be null");
            }
            this.Currency = currency;
            // to ensure "meta" is required (not null)
            if (meta == null)
            {
                throw new ArgumentNullException("meta is a required property for OverrideAccounts and cannot be null");
            }
            this.Meta = meta;
            // to ensure "numbers" is required (not null)
            if (numbers == null)
            {
                throw new ArgumentNullException("numbers is a required property for OverrideAccounts and cannot be null");
            }
            this.Numbers = numbers;
            // to ensure "transactions" is required (not null)
            if (transactions == null)
            {
                throw new ArgumentNullException("transactions is a required property for OverrideAccounts and cannot be null");
            }
            this.Transactions = transactions;
            // to ensure "identity" is required (not null)
            if (identity == null)
            {
                throw new ArgumentNullException("identity is a required property for OverrideAccounts and cannot be null");
            }
            this.Identity = identity;
            // to ensure "liability" is required (not null)
            if (liability == null)
            {
                throw new ArgumentNullException("liability is a required property for OverrideAccounts and cannot be null");
            }
            this.Liability = liability;
            // to ensure "inflowModel" is required (not null)
            if (inflowModel == null)
            {
                throw new ArgumentNullException("inflowModel is a required property for OverrideAccounts and cannot be null");
            }
            this.InflowModel = inflowModel;
            this.Holdings = holdings;
            this.InvestmentTransactions = investmentTransactions;
            this.Income = income;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// If provided, the account will start with this amount as the current balance. 
        /// </summary>
        /// <value>If provided, the account will start with this amount as the current balance. </value>
        [DataMember(Name = "starting_balance", IsRequired = true, EmitDefaultValue = false)]
        public decimal StartingBalance { get; set; }

        /// <summary>
        /// If provided, the account will always have this amount as its  available balance, regardless of current balance or changes in transactions over time.
        /// </summary>
        /// <value>If provided, the account will always have this amount as its  available balance, regardless of current balance or changes in transactions over time.</value>
        [DataMember(Name = "force_available_balance", IsRequired = true, EmitDefaultValue = false)]
        public decimal ForceAvailableBalance { get; set; }

        /// <summary>
        /// ISO-4217 currency code. If provided, the account will be denominated in the given currency. Transactions will also be in this currency by default.
        /// </summary>
        /// <value>ISO-4217 currency code. If provided, the account will be denominated in the given currency. Transactions will also be in this currency by default.</value>
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [DataMember(Name = "meta", IsRequired = true, EmitDefaultValue = false)]
        public Meta Meta { get; set; }

        /// <summary>
        /// Gets or Sets Numbers
        /// </summary>
        [DataMember(Name = "numbers", IsRequired = true, EmitDefaultValue = false)]
        public Numbers Numbers { get; set; }

        /// <summary>
        /// Specify the list of transactions on the account.
        /// </summary>
        /// <value>Specify the list of transactions on the account.</value>
        [DataMember(Name = "transactions", IsRequired = true, EmitDefaultValue = false)]
        public List<TransactionOverride> Transactions { get; set; }

        /// <summary>
        /// Gets or Sets Holdings
        /// </summary>
        [DataMember(Name = "holdings", EmitDefaultValue = false)]
        public HoldingsOverride Holdings { get; set; }

        /// <summary>
        /// Gets or Sets InvestmentTransactions
        /// </summary>
        [DataMember(Name = "investment_transactions", EmitDefaultValue = false)]
        public InvestmentsTransactionsOverride InvestmentTransactions { get; set; }

        /// <summary>
        /// Gets or Sets Identity
        /// </summary>
        [DataMember(Name = "identity", IsRequired = true, EmitDefaultValue = false)]
        public OwnerOverride Identity { get; set; }

        /// <summary>
        /// Gets or Sets Liability
        /// </summary>
        [DataMember(Name = "liability", IsRequired = true, EmitDefaultValue = false)]
        public LiabilityOverride Liability { get; set; }

        /// <summary>
        /// Gets or Sets InflowModel
        /// </summary>
        [DataMember(Name = "inflow_model", IsRequired = true, EmitDefaultValue = false)]
        public InflowModel InflowModel { get; set; }

        /// <summary>
        /// Gets or Sets Income
        /// </summary>
        [DataMember(Name = "income", EmitDefaultValue = false)]
        public IncomeOverride Income { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OverrideAccounts {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Subtype: ").Append(Subtype).Append("\n");
            sb.Append("  StartingBalance: ").Append(StartingBalance).Append("\n");
            sb.Append("  ForceAvailableBalance: ").Append(ForceAvailableBalance).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  Numbers: ").Append(Numbers).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("  Holdings: ").Append(Holdings).Append("\n");
            sb.Append("  InvestmentTransactions: ").Append(InvestmentTransactions).Append("\n");
            sb.Append("  Identity: ").Append(Identity).Append("\n");
            sb.Append("  Liability: ").Append(Liability).Append("\n");
            sb.Append("  InflowModel: ").Append(InflowModel).Append("\n");
            sb.Append("  Income: ").Append(Income).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OverrideAccounts);
        }

        /// <summary>
        /// Returns true if OverrideAccounts instances are equal
        /// </summary>
        /// <param name="input">Instance of OverrideAccounts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OverrideAccounts input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && base.Equals(input) && 
                (
                    this.Subtype == input.Subtype ||
                    this.Subtype.Equals(input.Subtype)
                ) && base.Equals(input) && 
                (
                    this.StartingBalance == input.StartingBalance ||
                    this.StartingBalance.Equals(input.StartingBalance)
                ) && base.Equals(input) && 
                (
                    this.ForceAvailableBalance == input.ForceAvailableBalance ||
                    this.ForceAvailableBalance.Equals(input.ForceAvailableBalance)
                ) && base.Equals(input) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && base.Equals(input) && 
                (
                    this.Meta == input.Meta ||
                    (this.Meta != null &&
                    this.Meta.Equals(input.Meta))
                ) && base.Equals(input) && 
                (
                    this.Numbers == input.Numbers ||
                    (this.Numbers != null &&
                    this.Numbers.Equals(input.Numbers))
                ) && base.Equals(input) && 
                (
                    this.Transactions == input.Transactions ||
                    this.Transactions != null &&
                    input.Transactions != null &&
                    this.Transactions.SequenceEqual(input.Transactions)
                ) && base.Equals(input) && 
                (
                    this.Holdings == input.Holdings ||
                    (this.Holdings != null &&
                    this.Holdings.Equals(input.Holdings))
                ) && base.Equals(input) && 
                (
                    this.InvestmentTransactions == input.InvestmentTransactions ||
                    (this.InvestmentTransactions != null &&
                    this.InvestmentTransactions.Equals(input.InvestmentTransactions))
                ) && base.Equals(input) && 
                (
                    this.Identity == input.Identity ||
                    (this.Identity != null &&
                    this.Identity.Equals(input.Identity))
                ) && base.Equals(input) && 
                (
                    this.Liability == input.Liability ||
                    (this.Liability != null &&
                    this.Liability.Equals(input.Liability))
                ) && base.Equals(input) && 
                (
                    this.InflowModel == input.InflowModel ||
                    (this.InflowModel != null &&
                    this.InflowModel.Equals(input.InflowModel))
                ) && base.Equals(input) && 
                (
                    this.Income == input.Income ||
                    (this.Income != null &&
                    this.Income.Equals(input.Income))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.Subtype.GetHashCode();
                hashCode = (hashCode * 59) + this.StartingBalance.GetHashCode();
                hashCode = (hashCode * 59) + this.ForceAvailableBalance.GetHashCode();
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.Meta != null)
                {
                    hashCode = (hashCode * 59) + this.Meta.GetHashCode();
                }
                if (this.Numbers != null)
                {
                    hashCode = (hashCode * 59) + this.Numbers.GetHashCode();
                }
                if (this.Transactions != null)
                {
                    hashCode = (hashCode * 59) + this.Transactions.GetHashCode();
                }
                if (this.Holdings != null)
                {
                    hashCode = (hashCode * 59) + this.Holdings.GetHashCode();
                }
                if (this.InvestmentTransactions != null)
                {
                    hashCode = (hashCode * 59) + this.InvestmentTransactions.GetHashCode();
                }
                if (this.Identity != null)
                {
                    hashCode = (hashCode * 59) + this.Identity.GetHashCode();
                }
                if (this.Liability != null)
                {
                    hashCode = (hashCode * 59) + this.Liability.GetHashCode();
                }
                if (this.InflowModel != null)
                {
                    hashCode = (hashCode * 59) + this.InflowModel.GetHashCode();
                }
                if (this.Income != null)
                {
                    hashCode = (hashCode * 59) + this.Income.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
