/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A JSON Web Key (JWK) that can be used in conjunction with [JWT libraries](https://jwt.io/#libraries-io) to verify Plaid webhooks
    /// </summary>
    [DataContract(Name = "JWKPublicKey")]
    public partial class JWKPublicKey : Dictionary<String, Object>, IEquatable<JWKPublicKey>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JWKPublicKey" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected JWKPublicKey()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="JWKPublicKey" /> class.
        /// </summary>
        /// <param name="alg">The alg member identifies the cryptographic algorithm family used with the key. (required).</param>
        /// <param name="crv">The crv member identifies the cryptographic curve used with the key. (required).</param>
        /// <param name="kid">The kid (Key ID) member can be used to match a specific key. This can be used, for instance, to choose among a set of keys within the JWK during key rollover. (required).</param>
        /// <param name="kty">The kty (key type) parameter identifies the cryptographic algorithm family used with the key, such as RSA or EC. (required).</param>
        /// <param name="use">The use (public key use) parameter identifies the intended use of the public key. (required).</param>
        /// <param name="x">The x member contains the x coordinate for the elliptic curve point. (required).</param>
        /// <param name="y">The y member contains the y coordinate for the elliptic curve point. (required).</param>
        /// <param name="createdAt">The timestamp when the key was created, in Unix time. (required).</param>
        /// <param name="expiredAt">The timestamp when the key expired, in Unix time. (required).</param>
        public JWKPublicKey(string alg = default(string), string crv = default(string), string kid = default(string), string kty = default(string), string use = default(string), string x = default(string), string y = default(string), int createdAt = default(int), int? expiredAt = default(int?)) : base()
        {
            // to ensure "alg" is required (not null)
            if (alg == null)
            {
                throw new ArgumentNullException("alg is a required property for JWKPublicKey and cannot be null");
            }
            this.Alg = alg;
            // to ensure "crv" is required (not null)
            if (crv == null)
            {
                throw new ArgumentNullException("crv is a required property for JWKPublicKey and cannot be null");
            }
            this.Crv = crv;
            // to ensure "kid" is required (not null)
            if (kid == null)
            {
                throw new ArgumentNullException("kid is a required property for JWKPublicKey and cannot be null");
            }
            this.Kid = kid;
            // to ensure "kty" is required (not null)
            if (kty == null)
            {
                throw new ArgumentNullException("kty is a required property for JWKPublicKey and cannot be null");
            }
            this.Kty = kty;
            // to ensure "use" is required (not null)
            if (use == null)
            {
                throw new ArgumentNullException("use is a required property for JWKPublicKey and cannot be null");
            }
            this.Use = use;
            // to ensure "x" is required (not null)
            if (x == null)
            {
                throw new ArgumentNullException("x is a required property for JWKPublicKey and cannot be null");
            }
            this.X = x;
            // to ensure "y" is required (not null)
            if (y == null)
            {
                throw new ArgumentNullException("y is a required property for JWKPublicKey and cannot be null");
            }
            this.Y = y;
            this.CreatedAt = createdAt;
            // to ensure "expiredAt" is required (not null)
            if (expiredAt == null)
            {
                throw new ArgumentNullException("expiredAt is a required property for JWKPublicKey and cannot be null");
            }
            this.ExpiredAt = expiredAt;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The alg member identifies the cryptographic algorithm family used with the key.
        /// </summary>
        /// <value>The alg member identifies the cryptographic algorithm family used with the key.</value>
        [DataMember(Name = "alg", IsRequired = true, EmitDefaultValue = false)]
        public string Alg { get; set; }

        /// <summary>
        /// The crv member identifies the cryptographic curve used with the key.
        /// </summary>
        /// <value>The crv member identifies the cryptographic curve used with the key.</value>
        [DataMember(Name = "crv", IsRequired = true, EmitDefaultValue = false)]
        public string Crv { get; set; }

        /// <summary>
        /// The kid (Key ID) member can be used to match a specific key. This can be used, for instance, to choose among a set of keys within the JWK during key rollover.
        /// </summary>
        /// <value>The kid (Key ID) member can be used to match a specific key. This can be used, for instance, to choose among a set of keys within the JWK during key rollover.</value>
        [DataMember(Name = "kid", IsRequired = true, EmitDefaultValue = false)]
        public string Kid { get; set; }

        /// <summary>
        /// The kty (key type) parameter identifies the cryptographic algorithm family used with the key, such as RSA or EC.
        /// </summary>
        /// <value>The kty (key type) parameter identifies the cryptographic algorithm family used with the key, such as RSA or EC.</value>
        [DataMember(Name = "kty", IsRequired = true, EmitDefaultValue = false)]
        public string Kty { get; set; }

        /// <summary>
        /// The use (public key use) parameter identifies the intended use of the public key.
        /// </summary>
        /// <value>The use (public key use) parameter identifies the intended use of the public key.</value>
        [DataMember(Name = "use", IsRequired = true, EmitDefaultValue = false)]
        public string Use { get; set; }

        /// <summary>
        /// The x member contains the x coordinate for the elliptic curve point.
        /// </summary>
        /// <value>The x member contains the x coordinate for the elliptic curve point.</value>
        [DataMember(Name = "x", IsRequired = true, EmitDefaultValue = false)]
        public string X { get; set; }

        /// <summary>
        /// The y member contains the y coordinate for the elliptic curve point.
        /// </summary>
        /// <value>The y member contains the y coordinate for the elliptic curve point.</value>
        [DataMember(Name = "y", IsRequired = true, EmitDefaultValue = false)]
        public string Y { get; set; }

        /// <summary>
        /// The timestamp when the key was created, in Unix time.
        /// </summary>
        /// <value>The timestamp when the key was created, in Unix time.</value>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = false)]
        public int CreatedAt { get; set; }

        /// <summary>
        /// The timestamp when the key expired, in Unix time.
        /// </summary>
        /// <value>The timestamp when the key expired, in Unix time.</value>
        [DataMember(Name = "expired_at", IsRequired = true, EmitDefaultValue = true)]
        public int? ExpiredAt { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JWKPublicKey {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Alg: ").Append(Alg).Append("\n");
            sb.Append("  Crv: ").Append(Crv).Append("\n");
            sb.Append("  Kid: ").Append(Kid).Append("\n");
            sb.Append("  Kty: ").Append(Kty).Append("\n");
            sb.Append("  Use: ").Append(Use).Append("\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ExpiredAt: ").Append(ExpiredAt).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JWKPublicKey);
        }

        /// <summary>
        /// Returns true if JWKPublicKey instances are equal
        /// </summary>
        /// <param name="input">Instance of JWKPublicKey to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JWKPublicKey input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Alg == input.Alg ||
                    (this.Alg != null &&
                    this.Alg.Equals(input.Alg))
                ) && base.Equals(input) && 
                (
                    this.Crv == input.Crv ||
                    (this.Crv != null &&
                    this.Crv.Equals(input.Crv))
                ) && base.Equals(input) && 
                (
                    this.Kid == input.Kid ||
                    (this.Kid != null &&
                    this.Kid.Equals(input.Kid))
                ) && base.Equals(input) && 
                (
                    this.Kty == input.Kty ||
                    (this.Kty != null &&
                    this.Kty.Equals(input.Kty))
                ) && base.Equals(input) && 
                (
                    this.Use == input.Use ||
                    (this.Use != null &&
                    this.Use.Equals(input.Use))
                ) && base.Equals(input) && 
                (
                    this.X == input.X ||
                    (this.X != null &&
                    this.X.Equals(input.X))
                ) && base.Equals(input) && 
                (
                    this.Y == input.Y ||
                    (this.Y != null &&
                    this.Y.Equals(input.Y))
                ) && base.Equals(input) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    this.CreatedAt.Equals(input.CreatedAt)
                ) && base.Equals(input) && 
                (
                    this.ExpiredAt == input.ExpiredAt ||
                    (this.ExpiredAt != null &&
                    this.ExpiredAt.Equals(input.ExpiredAt))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Alg != null)
                {
                    hashCode = (hashCode * 59) + this.Alg.GetHashCode();
                }
                if (this.Crv != null)
                {
                    hashCode = (hashCode * 59) + this.Crv.GetHashCode();
                }
                if (this.Kid != null)
                {
                    hashCode = (hashCode * 59) + this.Kid.GetHashCode();
                }
                if (this.Kty != null)
                {
                    hashCode = (hashCode * 59) + this.Kty.GetHashCode();
                }
                if (this.Use != null)
                {
                    hashCode = (hashCode * 59) + this.Use.GetHashCode();
                }
                if (this.X != null)
                {
                    hashCode = (hashCode * 59) + this.X.GetHashCode();
                }
                if (this.Y != null)
                {
                    hashCode = (hashCode * 59) + this.Y.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                if (this.ExpiredAt != null)
                {
                    hashCode = (hashCode * 59) + this.ExpiredAt.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
