/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ProcessorTokenCreateRequest defines the request schema for &#x60;/processor/token/create&#x60;
    /// </summary>
    [DataContract(Name = "ProcessorTokenCreateRequest")]
    public partial class ProcessorTokenCreateRequest : IEquatable<ProcessorTokenCreateRequest>, IValidatableObject
    {
        /// <summary>
        /// The processor you are integrating with.
        /// </summary>
        /// <value>The processor you are integrating with.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProcessorEnum
        {
            /// <summary>
            /// Enum Achq for value: achq
            /// </summary>
            [EnumMember(Value = "achq")]
            Achq = 1,

            /// <summary>
            /// Enum Alpaca for value: alpaca
            /// </summary>
            [EnumMember(Value = "alpaca")]
            Alpaca = 2,

            /// <summary>
            /// Enum Astra for value: astra
            /// </summary>
            [EnumMember(Value = "astra")]
            Astra = 3,

            /// <summary>
            /// Enum Check for value: check
            /// </summary>
            [EnumMember(Value = "check")]
            Check = 4,

            /// <summary>
            /// Enum Checkbook for value: checkbook
            /// </summary>
            [EnumMember(Value = "checkbook")]
            Checkbook = 5,

            /// <summary>
            /// Enum Circle for value: circle
            /// </summary>
            [EnumMember(Value = "circle")]
            Circle = 6,

            /// <summary>
            /// Enum Drivewealth for value: drivewealth
            /// </summary>
            [EnumMember(Value = "drivewealth")]
            Drivewealth = 7,

            /// <summary>
            /// Enum Dwolla for value: dwolla
            /// </summary>
            [EnumMember(Value = "dwolla")]
            Dwolla = 8,

            /// <summary>
            /// Enum Galileo for value: galileo
            /// </summary>
            [EnumMember(Value = "galileo")]
            Galileo = 9,

            /// <summary>
            /// Enum Lithic for value: lithic
            /// </summary>
            [EnumMember(Value = "lithic")]
            Lithic = 10,

            /// <summary>
            /// Enum ModernTreasury for value: modern_treasury
            /// </summary>
            [EnumMember(Value = "modern_treasury")]
            ModernTreasury = 11,

            /// <summary>
            /// Enum Moov for value: moov
            /// </summary>
            [EnumMember(Value = "moov")]
            Moov = 12,

            /// <summary>
            /// Enum Ocrolus for value: ocrolus
            /// </summary>
            [EnumMember(Value = "ocrolus")]
            Ocrolus = 13,

            /// <summary>
            /// Enum PrimeTrust for value: prime_trust
            /// </summary>
            [EnumMember(Value = "prime_trust")]
            PrimeTrust = 14,

            /// <summary>
            /// Enum Rize for value: rize
            /// </summary>
            [EnumMember(Value = "rize")]
            Rize = 15,

            /// <summary>
            /// Enum SilaMoney for value: sila_money
            /// </summary>
            [EnumMember(Value = "sila_money")]
            SilaMoney = 16,

            /// <summary>
            /// Enum SvbApi for value: svb_api
            /// </summary>
            [EnumMember(Value = "svb_api")]
            SvbApi = 17,

            /// <summary>
            /// Enum TreasuryPrime for value: treasury_prime
            /// </summary>
            [EnumMember(Value = "treasury_prime")]
            TreasuryPrime = 18,

            /// <summary>
            /// Enum Unit for value: unit
            /// </summary>
            [EnumMember(Value = "unit")]
            Unit = 19,

            /// <summary>
            /// Enum Vesta for value: vesta
            /// </summary>
            [EnumMember(Value = "vesta")]
            Vesta = 20,

            /// <summary>
            /// Enum Vopay for value: vopay
            /// </summary>
            [EnumMember(Value = "vopay")]
            Vopay = 21,

            /// <summary>
            /// Enum Wyre for value: wyre
            /// </summary>
            [EnumMember(Value = "wyre")]
            Wyre = 22

        }


        /// <summary>
        /// The processor you are integrating with.
        /// </summary>
        /// <value>The processor you are integrating with.</value>
        [DataMember(Name = "processor", IsRequired = true, EmitDefaultValue = false)]
        public ProcessorEnum Processor { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessorTokenCreateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProcessorTokenCreateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessorTokenCreateRequest" /> class.
        /// </summary>
        /// <param name="clientId">Your Plaid API &#x60;client_id&#x60;. The &#x60;client_id&#x60; is required and may be provided either in the &#x60;PLAID-CLIENT-ID&#x60; header or as part of a request body..</param>
        /// <param name="secret">Your Plaid API &#x60;secret&#x60;. The &#x60;secret&#x60; is required and may be provided either in the &#x60;PLAID-SECRET&#x60; header or as part of a request body..</param>
        /// <param name="accessToken">The access token associated with the Item data is being requested for. (required).</param>
        /// <param name="accountId">The &#x60;account_id&#x60; value obtained from the &#x60;onSuccess&#x60; callback in Link (required).</param>
        /// <param name="processor">The processor you are integrating with. (required).</param>
        public ProcessorTokenCreateRequest(string clientId = default(string), string secret = default(string), string accessToken = default(string), string accountId = default(string), ProcessorEnum processor = default(ProcessorEnum))
        {
            // to ensure "accessToken" is required (not null)
            if (accessToken == null)
            {
                throw new ArgumentNullException("accessToken is a required property for ProcessorTokenCreateRequest and cannot be null");
            }
            this.AccessToken = accessToken;
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new ArgumentNullException("accountId is a required property for ProcessorTokenCreateRequest and cannot be null");
            }
            this.AccountId = accountId;
            this.Processor = processor;
            this.ClientId = clientId;
            this.Secret = secret;
        }

        /// <summary>
        /// Your Plaid API &#x60;client_id&#x60;. The &#x60;client_id&#x60; is required and may be provided either in the &#x60;PLAID-CLIENT-ID&#x60; header or as part of a request body.
        /// </summary>
        /// <value>Your Plaid API &#x60;client_id&#x60;. The &#x60;client_id&#x60; is required and may be provided either in the &#x60;PLAID-CLIENT-ID&#x60; header or as part of a request body.</value>
        [DataMember(Name = "client_id", EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Your Plaid API &#x60;secret&#x60;. The &#x60;secret&#x60; is required and may be provided either in the &#x60;PLAID-SECRET&#x60; header or as part of a request body.
        /// </summary>
        /// <value>Your Plaid API &#x60;secret&#x60;. The &#x60;secret&#x60; is required and may be provided either in the &#x60;PLAID-SECRET&#x60; header or as part of a request body.</value>
        [DataMember(Name = "secret", EmitDefaultValue = false)]
        public string Secret { get; set; }

        /// <summary>
        /// The access token associated with the Item data is being requested for.
        /// </summary>
        /// <value>The access token associated with the Item data is being requested for.</value>
        [DataMember(Name = "access_token", IsRequired = true, EmitDefaultValue = false)]
        public string AccessToken { get; set; }

        /// <summary>
        /// The &#x60;account_id&#x60; value obtained from the &#x60;onSuccess&#x60; callback in Link
        /// </summary>
        /// <value>The &#x60;account_id&#x60; value obtained from the &#x60;onSuccess&#x60; callback in Link</value>
        [DataMember(Name = "account_id", IsRequired = true, EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProcessorTokenCreateRequest {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Processor: ").Append(Processor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessorTokenCreateRequest);
        }

        /// <summary>
        /// Returns true if ProcessorTokenCreateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessorTokenCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessorTokenCreateRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.Secret == input.Secret ||
                    (this.Secret != null &&
                    this.Secret.Equals(input.Secret))
                ) && 
                (
                    this.AccessToken == input.AccessToken ||
                    (this.AccessToken != null &&
                    this.AccessToken.Equals(input.AccessToken))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.Processor == input.Processor ||
                    this.Processor.Equals(input.Processor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientId.GetHashCode();
                }
                if (this.Secret != null)
                {
                    hashCode = (hashCode * 59) + this.Secret.GetHashCode();
                }
                if (this.AccessToken != null)
                {
                    hashCode = (hashCode * 59) + this.AccessToken.GetHashCode();
                }
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Processor.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
