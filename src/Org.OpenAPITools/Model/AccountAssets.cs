/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Asset information about an account
    /// </summary>
    [DataContract(Name = "AccountAssets")]
    public partial class AccountAssets : IEquatable<AccountAssets>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public AccountType Type { get; set; }

        /// <summary>
        /// Gets or Sets Subtype
        /// </summary>
        [DataMember(Name = "subtype", IsRequired = true, EmitDefaultValue = true)]
        public AccountSubtype Subtype { get; set; }
        /// <summary>
        /// The current verification status of an Auth Item initiated through Automated or Manual micro-deposits.  Returned for Auth Items only.  &#x60;pending_automatic_verification&#x60;: The Item is pending automatic verification  &#x60;pending_manual_verification&#x60;: The Item is pending manual micro-deposit verification. Items remain in this state until the user successfully verifies the two amounts.  &#x60;automatically_verified&#x60;: The Item has successfully been automatically verified   &#x60;manually_verified&#x60;: The Item has successfully been manually verified  &#x60;verification_expired&#x60;: Plaid was unable to automatically verify the deposit within 7 calendar days and will no longer attempt to validate the Item. Users may retry by submitting their information again through Link.  &#x60;verification_failed&#x60;: The Item failed manual micro-deposit verification because the user exhausted all 3 verification attempts. Users may retry by submitting their information again through Link.   
        /// </summary>
        /// <value>The current verification status of an Auth Item initiated through Automated or Manual micro-deposits.  Returned for Auth Items only.  &#x60;pending_automatic_verification&#x60;: The Item is pending automatic verification  &#x60;pending_manual_verification&#x60;: The Item is pending manual micro-deposit verification. Items remain in this state until the user successfully verifies the two amounts.  &#x60;automatically_verified&#x60;: The Item has successfully been automatically verified   &#x60;manually_verified&#x60;: The Item has successfully been manually verified  &#x60;verification_expired&#x60;: Plaid was unable to automatically verify the deposit within 7 calendar days and will no longer attempt to validate the Item. Users may retry by submitting their information again through Link.  &#x60;verification_failed&#x60;: The Item failed manual micro-deposit verification because the user exhausted all 3 verification attempts. Users may retry by submitting their information again through Link.   </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VerificationStatusEnum
        {
            /// <summary>
            /// Enum AutomaticallyVerified for value: automatically_verified
            /// </summary>
            [EnumMember(Value = "automatically_verified")]
            AutomaticallyVerified = 1,

            /// <summary>
            /// Enum PendingAutomaticVerification for value: pending_automatic_verification
            /// </summary>
            [EnumMember(Value = "pending_automatic_verification")]
            PendingAutomaticVerification = 2,

            /// <summary>
            /// Enum PendingManualVerification for value: pending_manual_verification
            /// </summary>
            [EnumMember(Value = "pending_manual_verification")]
            PendingManualVerification = 3,

            /// <summary>
            /// Enum ManuallyVerified for value: manually_verified
            /// </summary>
            [EnumMember(Value = "manually_verified")]
            ManuallyVerified = 4,

            /// <summary>
            /// Enum VerificationExpired for value: verification_expired
            /// </summary>
            [EnumMember(Value = "verification_expired")]
            VerificationExpired = 5,

            /// <summary>
            /// Enum VerificationFailed for value: verification_failed
            /// </summary>
            [EnumMember(Value = "verification_failed")]
            VerificationFailed = 6

        }


        /// <summary>
        /// The current verification status of an Auth Item initiated through Automated or Manual micro-deposits.  Returned for Auth Items only.  &#x60;pending_automatic_verification&#x60;: The Item is pending automatic verification  &#x60;pending_manual_verification&#x60;: The Item is pending manual micro-deposit verification. Items remain in this state until the user successfully verifies the two amounts.  &#x60;automatically_verified&#x60;: The Item has successfully been automatically verified   &#x60;manually_verified&#x60;: The Item has successfully been manually verified  &#x60;verification_expired&#x60;: Plaid was unable to automatically verify the deposit within 7 calendar days and will no longer attempt to validate the Item. Users may retry by submitting their information again through Link.  &#x60;verification_failed&#x60;: The Item failed manual micro-deposit verification because the user exhausted all 3 verification attempts. Users may retry by submitting their information again through Link.   
        /// </summary>
        /// <value>The current verification status of an Auth Item initiated through Automated or Manual micro-deposits.  Returned for Auth Items only.  &#x60;pending_automatic_verification&#x60;: The Item is pending automatic verification  &#x60;pending_manual_verification&#x60;: The Item is pending manual micro-deposit verification. Items remain in this state until the user successfully verifies the two amounts.  &#x60;automatically_verified&#x60;: The Item has successfully been automatically verified   &#x60;manually_verified&#x60;: The Item has successfully been manually verified  &#x60;verification_expired&#x60;: Plaid was unable to automatically verify the deposit within 7 calendar days and will no longer attempt to validate the Item. Users may retry by submitting their information again through Link.  &#x60;verification_failed&#x60;: The Item failed manual micro-deposit verification because the user exhausted all 3 verification attempts. Users may retry by submitting their information again through Link.   </value>
        [DataMember(Name = "verification_status", EmitDefaultValue = false)]
        public VerificationStatusEnum? VerificationStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountAssets" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountAssets() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountAssets" /> class.
        /// </summary>
        /// <param name="accountId">Plaidâ€™s unique identifier for the account. This value will not change unless Plaid can&#39;t reconcile the account with the data returned by the financial institution. This may occur, for example, when the name of the account changes. If this happens a new &#x60;account_id&#x60; will be assigned to the account.  The &#x60;account_id&#x60; can also change if the &#x60;access_token&#x60; is deleted and the same credentials that were used to generate that &#x60;access_token&#x60; are used to generate a new &#x60;access_token&#x60; on a later date. In that case, the new &#x60;account_id&#x60; will be different from the old &#x60;account_id&#x60;.  If an account with a specific &#x60;account_id&#x60; disappears instead of changing, the account is likely closed. Closed accounts are not returned by the Plaid API.  Like all Plaid identifiers, the &#x60;account_id&#x60; is case sensitive. (required).</param>
        /// <param name="balances">balances (required).</param>
        /// <param name="mask">The last 2-4 alphanumeric characters of an account&#39;s official account number. Note that the mask may be non-unique between an Item&#39;s accounts, and it may also not match the mask that the bank displays to the user. (required).</param>
        /// <param name="name">The name of the account, either assigned by the user or by the financial institution itself (required).</param>
        /// <param name="officialName">The official name of the account as given by the financial institution (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="subtype">subtype (required).</param>
        /// <param name="verificationStatus">The current verification status of an Auth Item initiated through Automated or Manual micro-deposits.  Returned for Auth Items only.  &#x60;pending_automatic_verification&#x60;: The Item is pending automatic verification  &#x60;pending_manual_verification&#x60;: The Item is pending manual micro-deposit verification. Items remain in this state until the user successfully verifies the two amounts.  &#x60;automatically_verified&#x60;: The Item has successfully been automatically verified   &#x60;manually_verified&#x60;: The Item has successfully been manually verified  &#x60;verification_expired&#x60;: Plaid was unable to automatically verify the deposit within 7 calendar days and will no longer attempt to validate the Item. Users may retry by submitting their information again through Link.  &#x60;verification_failed&#x60;: The Item failed manual micro-deposit verification because the user exhausted all 3 verification attempts. Users may retry by submitting their information again through Link.   .</param>
        /// <param name="daysAvailable">The duration of transaction history available for this Item, typically defined as the time since the date of the earliest transaction in that account. Only returned by Assets endpoints. (required).</param>
        /// <param name="transactions">Transaction history associated with the account. Only returned by Assets endpoints. Transaction history returned by endpoints such as &#x60;/transactions/get&#x60; or &#x60;/investments/transactions/get&#x60; will be returned in the top-level &#x60;transactions&#x60; field instead. (required).</param>
        /// <param name="owners">Data returned by the financial institution about the account owner or owners. Only returned by Identity or Assets endpoints. For business accounts, the name reported may be either the name of the individual or the name of the business, depending on the institution. Multiple owners on a single account will be represented in the same &#x60;owner&#x60; object, not in multiple owner objects within the array. In API versions 2018-05-22 and earlier, the &#x60;owners&#x60; object is not returned, and instead identity information is returned in the top level &#x60;identity&#x60; object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29) (required).</param>
        /// <param name="historicalBalances">Calculated data about the historical balances on the account. Only returned by Assets endpoints and currently not supported by &#x60;brokerage&#x60; or &#x60;investment&#x60; accounts. (required).</param>
        public AccountAssets(string accountId = default(string), AccountBalance balances = default(AccountBalance), string mask = default(string), string name = default(string), string officialName = default(string), AccountType type = default(AccountType), AccountSubtype subtype = default(AccountSubtype), VerificationStatusEnum? verificationStatus = default(VerificationStatusEnum?), decimal daysAvailable = default(decimal), List<AssetReportTransaction> transactions = default(List<AssetReportTransaction>), List<Owner> owners = default(List<Owner>), List<HistoricalBalance> historicalBalances = default(List<HistoricalBalance>))
        {
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new ArgumentNullException("accountId is a required property for AccountAssets and cannot be null");
            }
            this.AccountId = accountId;
            // to ensure "balances" is required (not null)
            if (balances == null)
            {
                throw new ArgumentNullException("balances is a required property for AccountAssets and cannot be null");
            }
            this.Balances = balances;
            // to ensure "mask" is required (not null)
            if (mask == null)
            {
                throw new ArgumentNullException("mask is a required property for AccountAssets and cannot be null");
            }
            this.Mask = mask;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for AccountAssets and cannot be null");
            }
            this.Name = name;
            // to ensure "officialName" is required (not null)
            if (officialName == null)
            {
                throw new ArgumentNullException("officialName is a required property for AccountAssets and cannot be null");
            }
            this.OfficialName = officialName;
            this.Type = type;
            this.Subtype = subtype;
            this.DaysAvailable = daysAvailable;
            // to ensure "transactions" is required (not null)
            if (transactions == null)
            {
                throw new ArgumentNullException("transactions is a required property for AccountAssets and cannot be null");
            }
            this.Transactions = transactions;
            // to ensure "owners" is required (not null)
            if (owners == null)
            {
                throw new ArgumentNullException("owners is a required property for AccountAssets and cannot be null");
            }
            this.Owners = owners;
            // to ensure "historicalBalances" is required (not null)
            if (historicalBalances == null)
            {
                throw new ArgumentNullException("historicalBalances is a required property for AccountAssets and cannot be null");
            }
            this.HistoricalBalances = historicalBalances;
            this.VerificationStatus = verificationStatus;
        }

        /// <summary>
        /// Plaidâ€™s unique identifier for the account. This value will not change unless Plaid can&#39;t reconcile the account with the data returned by the financial institution. This may occur, for example, when the name of the account changes. If this happens a new &#x60;account_id&#x60; will be assigned to the account.  The &#x60;account_id&#x60; can also change if the &#x60;access_token&#x60; is deleted and the same credentials that were used to generate that &#x60;access_token&#x60; are used to generate a new &#x60;access_token&#x60; on a later date. In that case, the new &#x60;account_id&#x60; will be different from the old &#x60;account_id&#x60;.  If an account with a specific &#x60;account_id&#x60; disappears instead of changing, the account is likely closed. Closed accounts are not returned by the Plaid API.  Like all Plaid identifiers, the &#x60;account_id&#x60; is case sensitive.
        /// </summary>
        /// <value>Plaidâ€™s unique identifier for the account. This value will not change unless Plaid can&#39;t reconcile the account with the data returned by the financial institution. This may occur, for example, when the name of the account changes. If this happens a new &#x60;account_id&#x60; will be assigned to the account.  The &#x60;account_id&#x60; can also change if the &#x60;access_token&#x60; is deleted and the same credentials that were used to generate that &#x60;access_token&#x60; are used to generate a new &#x60;access_token&#x60; on a later date. In that case, the new &#x60;account_id&#x60; will be different from the old &#x60;account_id&#x60;.  If an account with a specific &#x60;account_id&#x60; disappears instead of changing, the account is likely closed. Closed accounts are not returned by the Plaid API.  Like all Plaid identifiers, the &#x60;account_id&#x60; is case sensitive.</value>
        [DataMember(Name = "account_id", IsRequired = true, EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Gets or Sets Balances
        /// </summary>
        [DataMember(Name = "balances", IsRequired = true, EmitDefaultValue = false)]
        public AccountBalance Balances { get; set; }

        /// <summary>
        /// The last 2-4 alphanumeric characters of an account&#39;s official account number. Note that the mask may be non-unique between an Item&#39;s accounts, and it may also not match the mask that the bank displays to the user.
        /// </summary>
        /// <value>The last 2-4 alphanumeric characters of an account&#39;s official account number. Note that the mask may be non-unique between an Item&#39;s accounts, and it may also not match the mask that the bank displays to the user.</value>
        [DataMember(Name = "mask", IsRequired = true, EmitDefaultValue = true)]
        public string Mask { get; set; }

        /// <summary>
        /// The name of the account, either assigned by the user or by the financial institution itself
        /// </summary>
        /// <value>The name of the account, either assigned by the user or by the financial institution itself</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The official name of the account as given by the financial institution
        /// </summary>
        /// <value>The official name of the account as given by the financial institution</value>
        [DataMember(Name = "official_name", IsRequired = true, EmitDefaultValue = true)]
        public string OfficialName { get; set; }

        /// <summary>
        /// The duration of transaction history available for this Item, typically defined as the time since the date of the earliest transaction in that account. Only returned by Assets endpoints.
        /// </summary>
        /// <value>The duration of transaction history available for this Item, typically defined as the time since the date of the earliest transaction in that account. Only returned by Assets endpoints.</value>
        [DataMember(Name = "days_available", IsRequired = true, EmitDefaultValue = false)]
        public decimal DaysAvailable { get; set; }

        /// <summary>
        /// Transaction history associated with the account. Only returned by Assets endpoints. Transaction history returned by endpoints such as &#x60;/transactions/get&#x60; or &#x60;/investments/transactions/get&#x60; will be returned in the top-level &#x60;transactions&#x60; field instead.
        /// </summary>
        /// <value>Transaction history associated with the account. Only returned by Assets endpoints. Transaction history returned by endpoints such as &#x60;/transactions/get&#x60; or &#x60;/investments/transactions/get&#x60; will be returned in the top-level &#x60;transactions&#x60; field instead.</value>
        [DataMember(Name = "transactions", IsRequired = true, EmitDefaultValue = false)]
        public List<AssetReportTransaction> Transactions { get; set; }

        /// <summary>
        /// Data returned by the financial institution about the account owner or owners. Only returned by Identity or Assets endpoints. For business accounts, the name reported may be either the name of the individual or the name of the business, depending on the institution. Multiple owners on a single account will be represented in the same &#x60;owner&#x60; object, not in multiple owner objects within the array. In API versions 2018-05-22 and earlier, the &#x60;owners&#x60; object is not returned, and instead identity information is returned in the top level &#x60;identity&#x60; object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29)
        /// </summary>
        /// <value>Data returned by the financial institution about the account owner or owners. Only returned by Identity or Assets endpoints. For business accounts, the name reported may be either the name of the individual or the name of the business, depending on the institution. Multiple owners on a single account will be represented in the same &#x60;owner&#x60; object, not in multiple owner objects within the array. In API versions 2018-05-22 and earlier, the &#x60;owners&#x60; object is not returned, and instead identity information is returned in the top level &#x60;identity&#x60; object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29)</value>
        [DataMember(Name = "owners", IsRequired = true, EmitDefaultValue = false)]
        public List<Owner> Owners { get; set; }

        /// <summary>
        /// Calculated data about the historical balances on the account. Only returned by Assets endpoints and currently not supported by &#x60;brokerage&#x60; or &#x60;investment&#x60; accounts.
        /// </summary>
        /// <value>Calculated data about the historical balances on the account. Only returned by Assets endpoints and currently not supported by &#x60;brokerage&#x60; or &#x60;investment&#x60; accounts.</value>
        [DataMember(Name = "historical_balances", IsRequired = true, EmitDefaultValue = false)]
        public List<HistoricalBalance> HistoricalBalances { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountAssets {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Balances: ").Append(Balances).Append("\n");
            sb.Append("  Mask: ").Append(Mask).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OfficialName: ").Append(OfficialName).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Subtype: ").Append(Subtype).Append("\n");
            sb.Append("  VerificationStatus: ").Append(VerificationStatus).Append("\n");
            sb.Append("  DaysAvailable: ").Append(DaysAvailable).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("  Owners: ").Append(Owners).Append("\n");
            sb.Append("  HistoricalBalances: ").Append(HistoricalBalances).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountAssets);
        }

        /// <summary>
        /// Returns true if AccountAssets instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountAssets to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountAssets input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.Balances == input.Balances ||
                    (this.Balances != null &&
                    this.Balances.Equals(input.Balances))
                ) && 
                (
                    this.Mask == input.Mask ||
                    (this.Mask != null &&
                    this.Mask.Equals(input.Mask))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OfficialName == input.OfficialName ||
                    (this.OfficialName != null &&
                    this.OfficialName.Equals(input.OfficialName))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Subtype == input.Subtype ||
                    this.Subtype.Equals(input.Subtype)
                ) && 
                (
                    this.VerificationStatus == input.VerificationStatus ||
                    this.VerificationStatus.Equals(input.VerificationStatus)
                ) && 
                (
                    this.DaysAvailable == input.DaysAvailable ||
                    this.DaysAvailable.Equals(input.DaysAvailable)
                ) && 
                (
                    this.Transactions == input.Transactions ||
                    this.Transactions != null &&
                    input.Transactions != null &&
                    this.Transactions.SequenceEqual(input.Transactions)
                ) && 
                (
                    this.Owners == input.Owners ||
                    this.Owners != null &&
                    input.Owners != null &&
                    this.Owners.SequenceEqual(input.Owners)
                ) && 
                (
                    this.HistoricalBalances == input.HistoricalBalances ||
                    this.HistoricalBalances != null &&
                    input.HistoricalBalances != null &&
                    this.HistoricalBalances.SequenceEqual(input.HistoricalBalances)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                if (this.Balances != null)
                {
                    hashCode = (hashCode * 59) + this.Balances.GetHashCode();
                }
                if (this.Mask != null)
                {
                    hashCode = (hashCode * 59) + this.Mask.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.OfficialName != null)
                {
                    hashCode = (hashCode * 59) + this.OfficialName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.Subtype.GetHashCode();
                hashCode = (hashCode * 59) + this.VerificationStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.DaysAvailable.GetHashCode();
                if (this.Transactions != null)
                {
                    hashCode = (hashCode * 59) + this.Transactions.GetHashCode();
                }
                if (this.Owners != null)
                {
                    hashCode = (hashCode * 59) + this.Owners.GetHashCode();
                }
                if (this.HistoricalBalances != null)
                {
                    hashCode = (hashCode * 59) + this.HistoricalBalances.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
