/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DepositSwitchCreateRequest defines the request schema for &#x60;/deposit_switch/create&#x60;
    /// </summary>
    [DataContract(Name = "DepositSwitchCreateRequest")]
    public partial class DepositSwitchCreateRequest : IEquatable<DepositSwitchCreateRequest>, IValidatableObject
    {
        /// <summary>
        /// ISO-3166-1 alpha-2 country code standard.
        /// </summary>
        /// <value>ISO-3166-1 alpha-2 country code standard.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CountryCodeEnum
        {
            /// <summary>
            /// Enum US for value: US
            /// </summary>
            [EnumMember(Value = "US")]
            US = 1,

            /// <summary>
            /// Enum CA for value: CA
            /// </summary>
            [EnumMember(Value = "CA")]
            CA = 2

        }


        /// <summary>
        /// ISO-3166-1 alpha-2 country code standard.
        /// </summary>
        /// <value>ISO-3166-1 alpha-2 country code standard.</value>
        [DataMember(Name = "country_code", EmitDefaultValue = true)]
        public CountryCodeEnum? CountryCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DepositSwitchCreateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DepositSwitchCreateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DepositSwitchCreateRequest" /> class.
        /// </summary>
        /// <param name="clientId">Your Plaid API &#x60;client_id&#x60;. The &#x60;client_id&#x60; is required and may be provided either in the &#x60;PLAID-CLIENT-ID&#x60; header or as part of a request body..</param>
        /// <param name="secret">Your Plaid API &#x60;secret&#x60;. The &#x60;secret&#x60; is required and may be provided either in the &#x60;PLAID-SECRET&#x60; header or as part of a request body..</param>
        /// <param name="targetAccessToken">Access token for the target Item, typically provided in the Import Item response.  (required).</param>
        /// <param name="targetAccountId">Plaid Account ID that specifies the target bank account. This account will become the recipient for a user&#39;s direct deposit. (required).</param>
        /// <param name="countryCode">ISO-3166-1 alpha-2 country code standard..</param>
        /// <param name="options">options.</param>
        public DepositSwitchCreateRequest(string clientId = default(string), string secret = default(string), string targetAccessToken = default(string), string targetAccountId = default(string), CountryCodeEnum? countryCode = default(CountryCodeEnum?), DepositSwitchCreateRequestOptions options = default(DepositSwitchCreateRequestOptions))
        {
            // to ensure "targetAccessToken" is required (not null)
            if (targetAccessToken == null)
            {
                throw new ArgumentNullException("targetAccessToken is a required property for DepositSwitchCreateRequest and cannot be null");
            }
            this.TargetAccessToken = targetAccessToken;
            // to ensure "targetAccountId" is required (not null)
            if (targetAccountId == null)
            {
                throw new ArgumentNullException("targetAccountId is a required property for DepositSwitchCreateRequest and cannot be null");
            }
            this.TargetAccountId = targetAccountId;
            this.ClientId = clientId;
            this.Secret = secret;
            this.CountryCode = countryCode;
            this.Options = options;
        }

        /// <summary>
        /// Your Plaid API &#x60;client_id&#x60;. The &#x60;client_id&#x60; is required and may be provided either in the &#x60;PLAID-CLIENT-ID&#x60; header or as part of a request body.
        /// </summary>
        /// <value>Your Plaid API &#x60;client_id&#x60;. The &#x60;client_id&#x60; is required and may be provided either in the &#x60;PLAID-CLIENT-ID&#x60; header or as part of a request body.</value>
        [DataMember(Name = "client_id", EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Your Plaid API &#x60;secret&#x60;. The &#x60;secret&#x60; is required and may be provided either in the &#x60;PLAID-SECRET&#x60; header or as part of a request body.
        /// </summary>
        /// <value>Your Plaid API &#x60;secret&#x60;. The &#x60;secret&#x60; is required and may be provided either in the &#x60;PLAID-SECRET&#x60; header or as part of a request body.</value>
        [DataMember(Name = "secret", EmitDefaultValue = false)]
        public string Secret { get; set; }

        /// <summary>
        /// Access token for the target Item, typically provided in the Import Item response. 
        /// </summary>
        /// <value>Access token for the target Item, typically provided in the Import Item response. </value>
        [DataMember(Name = "target_access_token", IsRequired = true, EmitDefaultValue = false)]
        public string TargetAccessToken { get; set; }

        /// <summary>
        /// Plaid Account ID that specifies the target bank account. This account will become the recipient for a user&#39;s direct deposit.
        /// </summary>
        /// <value>Plaid Account ID that specifies the target bank account. This account will become the recipient for a user&#39;s direct deposit.</value>
        [DataMember(Name = "target_account_id", IsRequired = true, EmitDefaultValue = false)]
        public string TargetAccountId { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        public DepositSwitchCreateRequestOptions Options { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DepositSwitchCreateRequest {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("  TargetAccessToken: ").Append(TargetAccessToken).Append("\n");
            sb.Append("  TargetAccountId: ").Append(TargetAccountId).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DepositSwitchCreateRequest);
        }

        /// <summary>
        /// Returns true if DepositSwitchCreateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of DepositSwitchCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DepositSwitchCreateRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.Secret == input.Secret ||
                    (this.Secret != null &&
                    this.Secret.Equals(input.Secret))
                ) && 
                (
                    this.TargetAccessToken == input.TargetAccessToken ||
                    (this.TargetAccessToken != null &&
                    this.TargetAccessToken.Equals(input.TargetAccessToken))
                ) && 
                (
                    this.TargetAccountId == input.TargetAccountId ||
                    (this.TargetAccountId != null &&
                    this.TargetAccountId.Equals(input.TargetAccountId))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    this.CountryCode.Equals(input.CountryCode)
                ) && 
                (
                    this.Options == input.Options ||
                    (this.Options != null &&
                    this.Options.Equals(input.Options))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientId.GetHashCode();
                }
                if (this.Secret != null)
                {
                    hashCode = (hashCode * 59) + this.Secret.GetHashCode();
                }
                if (this.TargetAccessToken != null)
                {
                    hashCode = (hashCode * 59) + this.TargetAccessToken.GetHashCode();
                }
                if (this.TargetAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.TargetAccountId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CountryCode.GetHashCode();
                if (this.Options != null)
                {
                    hashCode = (hashCode * 59) + this.Options.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
