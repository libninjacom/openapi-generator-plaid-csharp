/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// W2 state and local wages
    /// </summary>
    [DataContract(Name = "W2StateAndLocalWages")]
    public partial class W2StateAndLocalWages : Dictionary<String, Object>, IEquatable<W2StateAndLocalWages>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="W2StateAndLocalWages" /> class.
        /// </summary>
        /// <param name="state">State associated with the wage..</param>
        /// <param name="employerStateIdNumber">State identification number of the employer..</param>
        /// <param name="stateWagesTips">Wages and tips from the specified state..</param>
        /// <param name="stateIncomeTax">Income tax from the specified state..</param>
        /// <param name="localWagesTips">Wages and tips from the locality..</param>
        /// <param name="localIncomeTax">Income tax from the locality..</param>
        /// <param name="localityName">Name of the locality..</param>
        public W2StateAndLocalWages(string state = default(string), string employerStateIdNumber = default(string), string stateWagesTips = default(string), string stateIncomeTax = default(string), string localWagesTips = default(string), string localIncomeTax = default(string), string localityName = default(string)) : base()
        {
            this.State = state;
            this.EmployerStateIdNumber = employerStateIdNumber;
            this.StateWagesTips = stateWagesTips;
            this.StateIncomeTax = stateIncomeTax;
            this.LocalWagesTips = localWagesTips;
            this.LocalIncomeTax = localIncomeTax;
            this.LocalityName = localityName;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// State associated with the wage.
        /// </summary>
        /// <value>State associated with the wage.</value>
        [DataMember(Name = "state", EmitDefaultValue = true)]
        public string State { get; set; }

        /// <summary>
        /// State identification number of the employer.
        /// </summary>
        /// <value>State identification number of the employer.</value>
        [DataMember(Name = "employer_state_id_number", EmitDefaultValue = true)]
        public string EmployerStateIdNumber { get; set; }

        /// <summary>
        /// Wages and tips from the specified state.
        /// </summary>
        /// <value>Wages and tips from the specified state.</value>
        [DataMember(Name = "state_wages_tips", EmitDefaultValue = true)]
        public string StateWagesTips { get; set; }

        /// <summary>
        /// Income tax from the specified state.
        /// </summary>
        /// <value>Income tax from the specified state.</value>
        [DataMember(Name = "state_income_tax", EmitDefaultValue = true)]
        public string StateIncomeTax { get; set; }

        /// <summary>
        /// Wages and tips from the locality.
        /// </summary>
        /// <value>Wages and tips from the locality.</value>
        [DataMember(Name = "local_wages_tips", EmitDefaultValue = true)]
        public string LocalWagesTips { get; set; }

        /// <summary>
        /// Income tax from the locality.
        /// </summary>
        /// <value>Income tax from the locality.</value>
        [DataMember(Name = "local_income_tax", EmitDefaultValue = true)]
        public string LocalIncomeTax { get; set; }

        /// <summary>
        /// Name of the locality.
        /// </summary>
        /// <value>Name of the locality.</value>
        [DataMember(Name = "locality_name", EmitDefaultValue = true)]
        public string LocalityName { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class W2StateAndLocalWages {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  EmployerStateIdNumber: ").Append(EmployerStateIdNumber).Append("\n");
            sb.Append("  StateWagesTips: ").Append(StateWagesTips).Append("\n");
            sb.Append("  StateIncomeTax: ").Append(StateIncomeTax).Append("\n");
            sb.Append("  LocalWagesTips: ").Append(LocalWagesTips).Append("\n");
            sb.Append("  LocalIncomeTax: ").Append(LocalIncomeTax).Append("\n");
            sb.Append("  LocalityName: ").Append(LocalityName).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as W2StateAndLocalWages);
        }

        /// <summary>
        /// Returns true if W2StateAndLocalWages instances are equal
        /// </summary>
        /// <param name="input">Instance of W2StateAndLocalWages to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(W2StateAndLocalWages input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && base.Equals(input) && 
                (
                    this.EmployerStateIdNumber == input.EmployerStateIdNumber ||
                    (this.EmployerStateIdNumber != null &&
                    this.EmployerStateIdNumber.Equals(input.EmployerStateIdNumber))
                ) && base.Equals(input) && 
                (
                    this.StateWagesTips == input.StateWagesTips ||
                    (this.StateWagesTips != null &&
                    this.StateWagesTips.Equals(input.StateWagesTips))
                ) && base.Equals(input) && 
                (
                    this.StateIncomeTax == input.StateIncomeTax ||
                    (this.StateIncomeTax != null &&
                    this.StateIncomeTax.Equals(input.StateIncomeTax))
                ) && base.Equals(input) && 
                (
                    this.LocalWagesTips == input.LocalWagesTips ||
                    (this.LocalWagesTips != null &&
                    this.LocalWagesTips.Equals(input.LocalWagesTips))
                ) && base.Equals(input) && 
                (
                    this.LocalIncomeTax == input.LocalIncomeTax ||
                    (this.LocalIncomeTax != null &&
                    this.LocalIncomeTax.Equals(input.LocalIncomeTax))
                ) && base.Equals(input) && 
                (
                    this.LocalityName == input.LocalityName ||
                    (this.LocalityName != null &&
                    this.LocalityName.Equals(input.LocalityName))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                if (this.EmployerStateIdNumber != null)
                {
                    hashCode = (hashCode * 59) + this.EmployerStateIdNumber.GetHashCode();
                }
                if (this.StateWagesTips != null)
                {
                    hashCode = (hashCode * 59) + this.StateWagesTips.GetHashCode();
                }
                if (this.StateIncomeTax != null)
                {
                    hashCode = (hashCode * 59) + this.StateIncomeTax.GetHashCode();
                }
                if (this.LocalWagesTips != null)
                {
                    hashCode = (hashCode * 59) + this.LocalWagesTips.GetHashCode();
                }
                if (this.LocalIncomeTax != null)
                {
                    hashCode = (hashCode * 59) + this.LocalIncomeTax.GetHashCode();
                }
                if (this.LocalityName != null)
                {
                    hashCode = (hashCode * 59) + this.LocalityName.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
