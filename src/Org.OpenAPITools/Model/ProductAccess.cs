/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The product access being requested. Used to or disallow product access across all accounts. If unset, defaults to all products allowed.
    /// </summary>
    [DataContract(Name = "ProductAccess")]
    public partial class ProductAccess : Dictionary<String, Object>, IEquatable<ProductAccess>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductAccess" /> class.
        /// </summary>
        /// <param name="statements">Allow access to statements. Only used by certain partners. If relevant to the partner and unset, defaults to &#x60;true&#x60;. (default to true).</param>
        /// <param name="identity">Allow access to the Identity product (name, email, phone, address). Only used by certain partners. If relevant to the partner and unset, defaults to &#x60;true&#x60;. (default to true).</param>
        /// <param name="auth">Allow access to account number details. Only used by certain partners. If relevant to the partner and unset, defaults to &#x60;true&#x60;. (default to true).</param>
        /// <param name="transactions">Allow access to transaction details. Only used by certain partners. If relevant to the partner and unset, defaults to &#x60;true&#x60;. (default to true).</param>
        public ProductAccess(bool? statements = true, bool? identity = true, bool? auth = true, bool? transactions = true) : base()
        {
            // use default value if no "statements" provided
            this.Statements = statements ?? true;
            // use default value if no "identity" provided
            this.Identity = identity ?? true;
            // use default value if no "auth" provided
            this.Auth = auth ?? true;
            // use default value if no "transactions" provided
            this.Transactions = transactions ?? true;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Allow access to statements. Only used by certain partners. If relevant to the partner and unset, defaults to &#x60;true&#x60;.
        /// </summary>
        /// <value>Allow access to statements. Only used by certain partners. If relevant to the partner and unset, defaults to &#x60;true&#x60;.</value>
        [DataMember(Name = "statements", EmitDefaultValue = true)]
        public bool? Statements { get; set; }

        /// <summary>
        /// Allow access to the Identity product (name, email, phone, address). Only used by certain partners. If relevant to the partner and unset, defaults to &#x60;true&#x60;.
        /// </summary>
        /// <value>Allow access to the Identity product (name, email, phone, address). Only used by certain partners. If relevant to the partner and unset, defaults to &#x60;true&#x60;.</value>
        [DataMember(Name = "identity", EmitDefaultValue = true)]
        public bool? Identity { get; set; }

        /// <summary>
        /// Allow access to account number details. Only used by certain partners. If relevant to the partner and unset, defaults to &#x60;true&#x60;.
        /// </summary>
        /// <value>Allow access to account number details. Only used by certain partners. If relevant to the partner and unset, defaults to &#x60;true&#x60;.</value>
        [DataMember(Name = "auth", EmitDefaultValue = true)]
        public bool? Auth { get; set; }

        /// <summary>
        /// Allow access to transaction details. Only used by certain partners. If relevant to the partner and unset, defaults to &#x60;true&#x60;.
        /// </summary>
        /// <value>Allow access to transaction details. Only used by certain partners. If relevant to the partner and unset, defaults to &#x60;true&#x60;.</value>
        [DataMember(Name = "transactions", EmitDefaultValue = true)]
        public bool? Transactions { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductAccess {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Statements: ").Append(Statements).Append("\n");
            sb.Append("  Identity: ").Append(Identity).Append("\n");
            sb.Append("  Auth: ").Append(Auth).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductAccess);
        }

        /// <summary>
        /// Returns true if ProductAccess instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductAccess to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductAccess input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Statements == input.Statements ||
                    (this.Statements != null &&
                    this.Statements.Equals(input.Statements))
                ) && base.Equals(input) && 
                (
                    this.Identity == input.Identity ||
                    (this.Identity != null &&
                    this.Identity.Equals(input.Identity))
                ) && base.Equals(input) && 
                (
                    this.Auth == input.Auth ||
                    (this.Auth != null &&
                    this.Auth.Equals(input.Auth))
                ) && base.Equals(input) && 
                (
                    this.Transactions == input.Transactions ||
                    (this.Transactions != null &&
                    this.Transactions.Equals(input.Transactions))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Statements != null)
                {
                    hashCode = (hashCode * 59) + this.Statements.GetHashCode();
                }
                if (this.Identity != null)
                {
                    hashCode = (hashCode * 59) + this.Identity.GetHashCode();
                }
                if (this.Auth != null)
                {
                    hashCode = (hashCode * 59) + this.Auth.GetHashCode();
                }
                if (this.Transactions != null)
                {
                    hashCode = (hashCode * 59) + this.Transactions.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
