/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Specify the holdings on the account.
    /// </summary>
    [DataContract(Name = "HoldingsOverride")]
    public partial class HoldingsOverride : IEquatable<HoldingsOverride>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HoldingsOverride" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HoldingsOverride() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="HoldingsOverride" /> class.
        /// </summary>
        /// <param name="institutionPrice">The last price given by the institution for this security (required).</param>
        /// <param name="institutionPriceAsOf">The date at which &#x60;institution_price&#x60; was current. Must be formatted as an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date..</param>
        /// <param name="costBasis">The average original value of the holding. Multiple cost basis values for the same security purchased at different prices are not supported..</param>
        /// <param name="quantity">The total quantity of the asset held, as reported by the financial institution. (required).</param>
        /// <param name="currency">Either a valid &#x60;iso_currency_code&#x60; or &#x60;unofficial_currency_code&#x60; (required).</param>
        /// <param name="security">security (required).</param>
        public HoldingsOverride(decimal institutionPrice = default(decimal), DateTime institutionPriceAsOf = default(DateTime), decimal costBasis = default(decimal), decimal quantity = default(decimal), string currency = default(string), SecurityOverride security = default(SecurityOverride))
        {
            this.InstitutionPrice = institutionPrice;
            this.Quantity = quantity;
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new ArgumentNullException("currency is a required property for HoldingsOverride and cannot be null");
            }
            this.Currency = currency;
            // to ensure "security" is required (not null)
            if (security == null)
            {
                throw new ArgumentNullException("security is a required property for HoldingsOverride and cannot be null");
            }
            this.Security = security;
            this.InstitutionPriceAsOf = institutionPriceAsOf;
            this.CostBasis = costBasis;
        }

        /// <summary>
        /// The last price given by the institution for this security
        /// </summary>
        /// <value>The last price given by the institution for this security</value>
        [DataMember(Name = "institution_price", IsRequired = true, EmitDefaultValue = false)]
        public decimal InstitutionPrice { get; set; }

        /// <summary>
        /// The date at which &#x60;institution_price&#x60; was current. Must be formatted as an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date.
        /// </summary>
        /// <value>The date at which &#x60;institution_price&#x60; was current. Must be formatted as an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date.</value>
        [DataMember(Name = "institution_price_as_of", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime InstitutionPriceAsOf { get; set; }

        /// <summary>
        /// The average original value of the holding. Multiple cost basis values for the same security purchased at different prices are not supported.
        /// </summary>
        /// <value>The average original value of the holding. Multiple cost basis values for the same security purchased at different prices are not supported.</value>
        [DataMember(Name = "cost_basis", EmitDefaultValue = false)]
        public decimal CostBasis { get; set; }

        /// <summary>
        /// The total quantity of the asset held, as reported by the financial institution.
        /// </summary>
        /// <value>The total quantity of the asset held, as reported by the financial institution.</value>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = false)]
        public decimal Quantity { get; set; }

        /// <summary>
        /// Either a valid &#x60;iso_currency_code&#x60; or &#x60;unofficial_currency_code&#x60;
        /// </summary>
        /// <value>Either a valid &#x60;iso_currency_code&#x60; or &#x60;unofficial_currency_code&#x60;</value>
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Security
        /// </summary>
        [DataMember(Name = "security", IsRequired = true, EmitDefaultValue = false)]
        public SecurityOverride Security { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HoldingsOverride {\n");
            sb.Append("  InstitutionPrice: ").Append(InstitutionPrice).Append("\n");
            sb.Append("  InstitutionPriceAsOf: ").Append(InstitutionPriceAsOf).Append("\n");
            sb.Append("  CostBasis: ").Append(CostBasis).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Security: ").Append(Security).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HoldingsOverride);
        }

        /// <summary>
        /// Returns true if HoldingsOverride instances are equal
        /// </summary>
        /// <param name="input">Instance of HoldingsOverride to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HoldingsOverride input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InstitutionPrice == input.InstitutionPrice ||
                    this.InstitutionPrice.Equals(input.InstitutionPrice)
                ) && 
                (
                    this.InstitutionPriceAsOf == input.InstitutionPriceAsOf ||
                    (this.InstitutionPriceAsOf != null &&
                    this.InstitutionPriceAsOf.Equals(input.InstitutionPriceAsOf))
                ) && 
                (
                    this.CostBasis == input.CostBasis ||
                    this.CostBasis.Equals(input.CostBasis)
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Security == input.Security ||
                    (this.Security != null &&
                    this.Security.Equals(input.Security))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.InstitutionPrice.GetHashCode();
                if (this.InstitutionPriceAsOf != null)
                {
                    hashCode = (hashCode * 59) + this.InstitutionPriceAsOf.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CostBasis.GetHashCode();
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.Security != null)
                {
                    hashCode = (hashCode * 59) + this.Security.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
