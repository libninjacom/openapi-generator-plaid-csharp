/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Describes the connected application for a particular end user.
    /// </summary>
    [DataContract(Name = "ConnectedApplication")]
    public partial class ConnectedApplication : IEquatable<ConnectedApplication>, IValidatableObject
    {
        /// <summary>
        /// Defines ProductDataTypes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProductDataTypesEnum
        {
            /// <summary>
            /// Enum BALANCE for value: ACCOUNT_BALANCE
            /// </summary>
            [EnumMember(Value = "ACCOUNT_BALANCE")]
            BALANCE = 1,

            /// <summary>
            /// Enum USERINFO for value: ACCOUNT_USER_INFO
            /// </summary>
            [EnumMember(Value = "ACCOUNT_USER_INFO")]
            USERINFO = 2,

            /// <summary>
            /// Enum TRANSACTIONS for value: ACCOUNT_TRANSACTIONS
            /// </summary>
            [EnumMember(Value = "ACCOUNT_TRANSACTIONS")]
            TRANSACTIONS = 3

        }



        /// <summary>
        /// (Deprecated) A list of enums representing the data collected and products enabled for this connected application.
        /// </summary>
        /// <value>(Deprecated) A list of enums representing the data collected and products enabled for this connected application.</value>
        [DataMember(Name = "product_data_types", IsRequired = true, EmitDefaultValue = false)]
        public List<ProductDataTypesEnum> ProductDataTypes { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectedApplication" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConnectedApplication() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectedApplication" /> class.
        /// </summary>
        /// <param name="applicationId">This field will map to the application ID that is returned from /item/applications/list, or provided to the institution in an oauth redirect. (required).</param>
        /// <param name="name">The name of the application (required).</param>
        /// <param name="logo">A URL that links to the application logo image (will be deprecated in the future, please use logo_url). (required).</param>
        /// <param name="logoUrl">A URL that links to the application logo image. (required).</param>
        /// <param name="applicationUrl">The URL for the application&#39;s website (required).</param>
        /// <param name="reasonForAccess">A string provided by the connected app stating why they use their respective enabled products. (required).</param>
        /// <param name="createdAt">The date this application was linked in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC. (required).</param>
        /// <param name="joinDate">The date this application was granted production access at Plaid in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC. (required).</param>
        /// <param name="productDataTypes">(Deprecated) A list of enums representing the data collected and products enabled for this connected application. (required).</param>
        /// <param name="scopes">scopes.</param>
        /// <param name="requestedScopes">requestedScopes.</param>
        public ConnectedApplication(string applicationId = default(string), string name = default(string), string logo = default(string), string logoUrl = default(string), string applicationUrl = default(string), string reasonForAccess = default(string), DateTime createdAt = default(DateTime), DateTime joinDate = default(DateTime), List<ProductDataTypesEnum> productDataTypes = default(List<ProductDataTypesEnum>), ScopesNullable scopes = default(ScopesNullable), RequestedScopes requestedScopes = default(RequestedScopes))
        {
            // to ensure "applicationId" is required (not null)
            if (applicationId == null)
            {
                throw new ArgumentNullException("applicationId is a required property for ConnectedApplication and cannot be null");
            }
            this.ApplicationId = applicationId;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ConnectedApplication and cannot be null");
            }
            this.Name = name;
            // to ensure "logo" is required (not null)
            if (logo == null)
            {
                throw new ArgumentNullException("logo is a required property for ConnectedApplication and cannot be null");
            }
            this.Logo = logo;
            // to ensure "logoUrl" is required (not null)
            if (logoUrl == null)
            {
                throw new ArgumentNullException("logoUrl is a required property for ConnectedApplication and cannot be null");
            }
            this.LogoUrl = logoUrl;
            // to ensure "applicationUrl" is required (not null)
            if (applicationUrl == null)
            {
                throw new ArgumentNullException("applicationUrl is a required property for ConnectedApplication and cannot be null");
            }
            this.ApplicationUrl = applicationUrl;
            // to ensure "reasonForAccess" is required (not null)
            if (reasonForAccess == null)
            {
                throw new ArgumentNullException("reasonForAccess is a required property for ConnectedApplication and cannot be null");
            }
            this.ReasonForAccess = reasonForAccess;
            this.CreatedAt = createdAt;
            this.JoinDate = joinDate;
            // to ensure "productDataTypes" is required (not null)
            if (productDataTypes == null)
            {
                throw new ArgumentNullException("productDataTypes is a required property for ConnectedApplication and cannot be null");
            }
            this.ProductDataTypes = productDataTypes;
            this.Scopes = scopes;
            this.RequestedScopes = requestedScopes;
        }

        /// <summary>
        /// This field will map to the application ID that is returned from /item/applications/list, or provided to the institution in an oauth redirect.
        /// </summary>
        /// <value>This field will map to the application ID that is returned from /item/applications/list, or provided to the institution in an oauth redirect.</value>
        [DataMember(Name = "application_id", IsRequired = true, EmitDefaultValue = false)]
        public string ApplicationId { get; set; }

        /// <summary>
        /// The name of the application
        /// </summary>
        /// <value>The name of the application</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// A URL that links to the application logo image (will be deprecated in the future, please use logo_url).
        /// </summary>
        /// <value>A URL that links to the application logo image (will be deprecated in the future, please use logo_url).</value>
        [DataMember(Name = "logo", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public string Logo { get; set; }

        /// <summary>
        /// A URL that links to the application logo image.
        /// </summary>
        /// <value>A URL that links to the application logo image.</value>
        [DataMember(Name = "logo_url", IsRequired = true, EmitDefaultValue = true)]
        public string LogoUrl { get; set; }

        /// <summary>
        /// The URL for the application&#39;s website
        /// </summary>
        /// <value>The URL for the application&#39;s website</value>
        [DataMember(Name = "application_url", IsRequired = true, EmitDefaultValue = true)]
        public string ApplicationUrl { get; set; }

        /// <summary>
        /// A string provided by the connected app stating why they use their respective enabled products.
        /// </summary>
        /// <value>A string provided by the connected app stating why they use their respective enabled products.</value>
        [DataMember(Name = "reason_for_access", IsRequired = true, EmitDefaultValue = true)]
        public string ReasonForAccess { get; set; }

        /// <summary>
        /// The date this application was linked in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC.
        /// </summary>
        /// <value>The date this application was linked in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC.</value>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// The date this application was granted production access at Plaid in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC.
        /// </summary>
        /// <value>The date this application was granted production access at Plaid in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC.</value>
        [DataMember(Name = "join_date", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime JoinDate { get; set; }

        /// <summary>
        /// Gets or Sets Scopes
        /// </summary>
        [DataMember(Name = "scopes", EmitDefaultValue = true)]
        public ScopesNullable Scopes { get; set; }

        /// <summary>
        /// Gets or Sets RequestedScopes
        /// </summary>
        [DataMember(Name = "requested_scopes", EmitDefaultValue = false)]
        public RequestedScopes RequestedScopes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConnectedApplication {\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("  LogoUrl: ").Append(LogoUrl).Append("\n");
            sb.Append("  ApplicationUrl: ").Append(ApplicationUrl).Append("\n");
            sb.Append("  ReasonForAccess: ").Append(ReasonForAccess).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  JoinDate: ").Append(JoinDate).Append("\n");
            sb.Append("  ProductDataTypes: ").Append(ProductDataTypes).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("  RequestedScopes: ").Append(RequestedScopes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConnectedApplication);
        }

        /// <summary>
        /// Returns true if ConnectedApplication instances are equal
        /// </summary>
        /// <param name="input">Instance of ConnectedApplication to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConnectedApplication input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ApplicationId == input.ApplicationId ||
                    (this.ApplicationId != null &&
                    this.ApplicationId.Equals(input.ApplicationId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Logo == input.Logo ||
                    (this.Logo != null &&
                    this.Logo.Equals(input.Logo))
                ) && 
                (
                    this.LogoUrl == input.LogoUrl ||
                    (this.LogoUrl != null &&
                    this.LogoUrl.Equals(input.LogoUrl))
                ) && 
                (
                    this.ApplicationUrl == input.ApplicationUrl ||
                    (this.ApplicationUrl != null &&
                    this.ApplicationUrl.Equals(input.ApplicationUrl))
                ) && 
                (
                    this.ReasonForAccess == input.ReasonForAccess ||
                    (this.ReasonForAccess != null &&
                    this.ReasonForAccess.Equals(input.ReasonForAccess))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.JoinDate == input.JoinDate ||
                    (this.JoinDate != null &&
                    this.JoinDate.Equals(input.JoinDate))
                ) && 
                (
                    this.ProductDataTypes == input.ProductDataTypes ||
                    this.ProductDataTypes.SequenceEqual(input.ProductDataTypes)
                ) && 
                (
                    this.Scopes == input.Scopes ||
                    (this.Scopes != null &&
                    this.Scopes.Equals(input.Scopes))
                ) && 
                (
                    this.RequestedScopes == input.RequestedScopes ||
                    (this.RequestedScopes != null &&
                    this.RequestedScopes.Equals(input.RequestedScopes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationId != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicationId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Logo != null)
                {
                    hashCode = (hashCode * 59) + this.Logo.GetHashCode();
                }
                if (this.LogoUrl != null)
                {
                    hashCode = (hashCode * 59) + this.LogoUrl.GetHashCode();
                }
                if (this.ApplicationUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicationUrl.GetHashCode();
                }
                if (this.ReasonForAccess != null)
                {
                    hashCode = (hashCode * 59) + this.ReasonForAccess.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.JoinDate != null)
                {
                    hashCode = (hashCode * 59) + this.JoinDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProductDataTypes.GetHashCode();
                if (this.Scopes != null)
                {
                    hashCode = (hashCode * 59) + this.Scopes.GetHashCode();
                }
                if (this.RequestedScopes != null)
                {
                    hashCode = (hashCode * 59) + this.RequestedScopes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
