/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Specifies optional parameters for &#x60;/institutions/get_by_id&#x60;. If provided, must not be &#x60;null&#x60;.
    /// </summary>
    [DataContract(Name = "InstitutionsGetByIdRequestOptions")]
    public partial class InstitutionsGetByIdRequestOptions : IEquatable<InstitutionsGetByIdRequestOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstitutionsGetByIdRequestOptions" /> class.
        /// </summary>
        /// <param name="includeOptionalMetadata">When &#x60;true&#x60;, return an institution&#39;s logo, brand color, and URL. When available, the bank&#39;s logo is returned as a base64 encoded 152x152 PNG, the brand color is in hexadecimal format. The default value is &#x60;false&#x60;.  Note that Plaid does not own any of the logos shared by the API and that by accessing or using these logos, you agree that you are doing so at your own risk and will, if necessary, obtain all required permissions from the appropriate rights holders and adhere to any applicable usage guidelines. Plaid disclaims all express or implied warranties with respect to the logos. (default to false).</param>
        /// <param name="includeStatus">If &#x60;true&#x60;, the response will include status information about the institution. Default value is &#x60;false&#x60;. (default to false).</param>
        /// <param name="includeAuthMetadata">When &#x60;true&#x60;, returns metadata related to the Auth product indicating which auth methods are supported. (default to false).</param>
        /// <param name="includePaymentInitiationMetadata">When &#x60;true&#x60;, returns metadata related to the Payment Initiation product indicating which payment configurations are supported. (default to false).</param>
        public InstitutionsGetByIdRequestOptions(bool includeOptionalMetadata = false, bool includeStatus = false, bool includeAuthMetadata = false, bool includePaymentInitiationMetadata = false)
        {
            this.IncludeOptionalMetadata = includeOptionalMetadata;
            this.IncludeStatus = includeStatus;
            this.IncludeAuthMetadata = includeAuthMetadata;
            this.IncludePaymentInitiationMetadata = includePaymentInitiationMetadata;
        }

        /// <summary>
        /// When &#x60;true&#x60;, return an institution&#39;s logo, brand color, and URL. When available, the bank&#39;s logo is returned as a base64 encoded 152x152 PNG, the brand color is in hexadecimal format. The default value is &#x60;false&#x60;.  Note that Plaid does not own any of the logos shared by the API and that by accessing or using these logos, you agree that you are doing so at your own risk and will, if necessary, obtain all required permissions from the appropriate rights holders and adhere to any applicable usage guidelines. Plaid disclaims all express or implied warranties with respect to the logos.
        /// </summary>
        /// <value>When &#x60;true&#x60;, return an institution&#39;s logo, brand color, and URL. When available, the bank&#39;s logo is returned as a base64 encoded 152x152 PNG, the brand color is in hexadecimal format. The default value is &#x60;false&#x60;.  Note that Plaid does not own any of the logos shared by the API and that by accessing or using these logos, you agree that you are doing so at your own risk and will, if necessary, obtain all required permissions from the appropriate rights holders and adhere to any applicable usage guidelines. Plaid disclaims all express or implied warranties with respect to the logos.</value>
        [DataMember(Name = "include_optional_metadata", EmitDefaultValue = true)]
        public bool IncludeOptionalMetadata { get; set; }

        /// <summary>
        /// If &#x60;true&#x60;, the response will include status information about the institution. Default value is &#x60;false&#x60;.
        /// </summary>
        /// <value>If &#x60;true&#x60;, the response will include status information about the institution. Default value is &#x60;false&#x60;.</value>
        [DataMember(Name = "include_status", EmitDefaultValue = true)]
        public bool IncludeStatus { get; set; }

        /// <summary>
        /// When &#x60;true&#x60;, returns metadata related to the Auth product indicating which auth methods are supported.
        /// </summary>
        /// <value>When &#x60;true&#x60;, returns metadata related to the Auth product indicating which auth methods are supported.</value>
        [DataMember(Name = "include_auth_metadata", EmitDefaultValue = true)]
        public bool IncludeAuthMetadata { get; set; }

        /// <summary>
        /// When &#x60;true&#x60;, returns metadata related to the Payment Initiation product indicating which payment configurations are supported.
        /// </summary>
        /// <value>When &#x60;true&#x60;, returns metadata related to the Payment Initiation product indicating which payment configurations are supported.</value>
        [DataMember(Name = "include_payment_initiation_metadata", EmitDefaultValue = true)]
        public bool IncludePaymentInitiationMetadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InstitutionsGetByIdRequestOptions {\n");
            sb.Append("  IncludeOptionalMetadata: ").Append(IncludeOptionalMetadata).Append("\n");
            sb.Append("  IncludeStatus: ").Append(IncludeStatus).Append("\n");
            sb.Append("  IncludeAuthMetadata: ").Append(IncludeAuthMetadata).Append("\n");
            sb.Append("  IncludePaymentInitiationMetadata: ").Append(IncludePaymentInitiationMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InstitutionsGetByIdRequestOptions);
        }

        /// <summary>
        /// Returns true if InstitutionsGetByIdRequestOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of InstitutionsGetByIdRequestOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstitutionsGetByIdRequestOptions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IncludeOptionalMetadata == input.IncludeOptionalMetadata ||
                    this.IncludeOptionalMetadata.Equals(input.IncludeOptionalMetadata)
                ) && 
                (
                    this.IncludeStatus == input.IncludeStatus ||
                    this.IncludeStatus.Equals(input.IncludeStatus)
                ) && 
                (
                    this.IncludeAuthMetadata == input.IncludeAuthMetadata ||
                    this.IncludeAuthMetadata.Equals(input.IncludeAuthMetadata)
                ) && 
                (
                    this.IncludePaymentInitiationMetadata == input.IncludePaymentInitiationMetadata ||
                    this.IncludePaymentInitiationMetadata.Equals(input.IncludePaymentInitiationMetadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.IncludeOptionalMetadata.GetHashCode();
                hashCode = (hashCode * 59) + this.IncludeStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.IncludeAuthMetadata.GetHashCode();
                hashCode = (hashCode * 59) + this.IncludePaymentInitiationMetadata.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
