/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// W2 is an object that represents income data taken from a W2 tax document.
    /// </summary>
    [DataContract(Name = "W2")]
    public partial class W2 : Dictionary<String, Object>, IEquatable<W2>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="W2" /> class.
        /// </summary>
        /// <param name="employer">employer.</param>
        /// <param name="employee">employee.</param>
        /// <param name="taxYear">The tax year of the W2 document..</param>
        /// <param name="employerIdNumber">An employee identification number or EIN..</param>
        /// <param name="wagesTipsOtherComp">Wages from tips and other compensation..</param>
        /// <param name="federalIncomeTaxWithheld">Federal income tax withheld for the tax year..</param>
        /// <param name="socialSecurityWages">Wages from social security..</param>
        /// <param name="socialSecurityTaxWithheld">Social security tax withheld for the tax year..</param>
        /// <param name="medicareWagesAndTips">Wages and tips from medicare..</param>
        /// <param name="medicareTaxWithheld">Medicare tax withheld for the tax year..</param>
        /// <param name="socialSecurityTips">Tips from social security..</param>
        /// <param name="allocatedTips">Allocated tips..</param>
        /// <param name="box9">Contents from box 9 on the W2..</param>
        /// <param name="dependentCareBenefits">Dependent care benefits..</param>
        /// <param name="nonqualifiedPlans">Nonqualified plans..</param>
        /// <param name="box12">box12.</param>
        /// <param name="statutoryEmployee">Statutory employee..</param>
        /// <param name="retirementPlan">Retirement plan..</param>
        /// <param name="thirdPartySickPay">Third party sick pay..</param>
        /// <param name="other">Other..</param>
        /// <param name="stateAndLocalWages">stateAndLocalWages.</param>
        public W2(PaystubEmployer employer = default(PaystubEmployer), Employee employee = default(Employee), string taxYear = default(string), string employerIdNumber = default(string), string wagesTipsOtherComp = default(string), string federalIncomeTaxWithheld = default(string), string socialSecurityWages = default(string), string socialSecurityTaxWithheld = default(string), string medicareWagesAndTips = default(string), string medicareTaxWithheld = default(string), string socialSecurityTips = default(string), string allocatedTips = default(string), string box9 = default(string), string dependentCareBenefits = default(string), string nonqualifiedPlans = default(string), List<W2Box12> box12 = default(List<W2Box12>), string statutoryEmployee = default(string), string retirementPlan = default(string), string thirdPartySickPay = default(string), string other = default(string), List<W2StateAndLocalWages> stateAndLocalWages = default(List<W2StateAndLocalWages>)) : base()
        {
            this.Employer = employer;
            this.Employee = employee;
            this.TaxYear = taxYear;
            this.EmployerIdNumber = employerIdNumber;
            this.WagesTipsOtherComp = wagesTipsOtherComp;
            this.FederalIncomeTaxWithheld = federalIncomeTaxWithheld;
            this.SocialSecurityWages = socialSecurityWages;
            this.SocialSecurityTaxWithheld = socialSecurityTaxWithheld;
            this.MedicareWagesAndTips = medicareWagesAndTips;
            this.MedicareTaxWithheld = medicareTaxWithheld;
            this.SocialSecurityTips = socialSecurityTips;
            this.AllocatedTips = allocatedTips;
            this.Box9 = box9;
            this.DependentCareBenefits = dependentCareBenefits;
            this.NonqualifiedPlans = nonqualifiedPlans;
            this.Box12 = box12;
            this.StatutoryEmployee = statutoryEmployee;
            this.RetirementPlan = retirementPlan;
            this.ThirdPartySickPay = thirdPartySickPay;
            this.Other = other;
            this.StateAndLocalWages = stateAndLocalWages;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets Employer
        /// </summary>
        [DataMember(Name = "employer", EmitDefaultValue = false)]
        public PaystubEmployer Employer { get; set; }

        /// <summary>
        /// Gets or Sets Employee
        /// </summary>
        [DataMember(Name = "employee", EmitDefaultValue = false)]
        public Employee Employee { get; set; }

        /// <summary>
        /// The tax year of the W2 document.
        /// </summary>
        /// <value>The tax year of the W2 document.</value>
        [DataMember(Name = "tax_year", EmitDefaultValue = true)]
        public string TaxYear { get; set; }

        /// <summary>
        /// An employee identification number or EIN.
        /// </summary>
        /// <value>An employee identification number or EIN.</value>
        [DataMember(Name = "employer_id_number", EmitDefaultValue = true)]
        public string EmployerIdNumber { get; set; }

        /// <summary>
        /// Wages from tips and other compensation.
        /// </summary>
        /// <value>Wages from tips and other compensation.</value>
        [DataMember(Name = "wages_tips_other_comp", EmitDefaultValue = true)]
        public string WagesTipsOtherComp { get; set; }

        /// <summary>
        /// Federal income tax withheld for the tax year.
        /// </summary>
        /// <value>Federal income tax withheld for the tax year.</value>
        [DataMember(Name = "federal_income_tax_withheld", EmitDefaultValue = true)]
        public string FederalIncomeTaxWithheld { get; set; }

        /// <summary>
        /// Wages from social security.
        /// </summary>
        /// <value>Wages from social security.</value>
        [DataMember(Name = "social_security_wages", EmitDefaultValue = true)]
        public string SocialSecurityWages { get; set; }

        /// <summary>
        /// Social security tax withheld for the tax year.
        /// </summary>
        /// <value>Social security tax withheld for the tax year.</value>
        [DataMember(Name = "social_security_tax_withheld", EmitDefaultValue = true)]
        public string SocialSecurityTaxWithheld { get; set; }

        /// <summary>
        /// Wages and tips from medicare.
        /// </summary>
        /// <value>Wages and tips from medicare.</value>
        [DataMember(Name = "medicare_wages_and_tips", EmitDefaultValue = true)]
        public string MedicareWagesAndTips { get; set; }

        /// <summary>
        /// Medicare tax withheld for the tax year.
        /// </summary>
        /// <value>Medicare tax withheld for the tax year.</value>
        [DataMember(Name = "medicare_tax_withheld", EmitDefaultValue = true)]
        public string MedicareTaxWithheld { get; set; }

        /// <summary>
        /// Tips from social security.
        /// </summary>
        /// <value>Tips from social security.</value>
        [DataMember(Name = "social_security_tips", EmitDefaultValue = true)]
        public string SocialSecurityTips { get; set; }

        /// <summary>
        /// Allocated tips.
        /// </summary>
        /// <value>Allocated tips.</value>
        [DataMember(Name = "allocated_tips", EmitDefaultValue = true)]
        public string AllocatedTips { get; set; }

        /// <summary>
        /// Contents from box 9 on the W2.
        /// </summary>
        /// <value>Contents from box 9 on the W2.</value>
        [DataMember(Name = "box_9", EmitDefaultValue = true)]
        public string Box9 { get; set; }

        /// <summary>
        /// Dependent care benefits.
        /// </summary>
        /// <value>Dependent care benefits.</value>
        [DataMember(Name = "dependent_care_benefits", EmitDefaultValue = true)]
        public string DependentCareBenefits { get; set; }

        /// <summary>
        /// Nonqualified plans.
        /// </summary>
        /// <value>Nonqualified plans.</value>
        [DataMember(Name = "nonqualified_plans", EmitDefaultValue = true)]
        public string NonqualifiedPlans { get; set; }

        /// <summary>
        /// Gets or Sets Box12
        /// </summary>
        [DataMember(Name = "box_12", EmitDefaultValue = false)]
        public List<W2Box12> Box12 { get; set; }

        /// <summary>
        /// Statutory employee.
        /// </summary>
        /// <value>Statutory employee.</value>
        [DataMember(Name = "statutory_employee", EmitDefaultValue = true)]
        public string StatutoryEmployee { get; set; }

        /// <summary>
        /// Retirement plan.
        /// </summary>
        /// <value>Retirement plan.</value>
        [DataMember(Name = "retirement_plan", EmitDefaultValue = true)]
        public string RetirementPlan { get; set; }

        /// <summary>
        /// Third party sick pay.
        /// </summary>
        /// <value>Third party sick pay.</value>
        [DataMember(Name = "third_party_sick_pay", EmitDefaultValue = true)]
        public string ThirdPartySickPay { get; set; }

        /// <summary>
        /// Other.
        /// </summary>
        /// <value>Other.</value>
        [DataMember(Name = "other", EmitDefaultValue = true)]
        public string Other { get; set; }

        /// <summary>
        /// Gets or Sets StateAndLocalWages
        /// </summary>
        [DataMember(Name = "state_and_local_wages", EmitDefaultValue = false)]
        public List<W2StateAndLocalWages> StateAndLocalWages { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class W2 {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Employer: ").Append(Employer).Append("\n");
            sb.Append("  Employee: ").Append(Employee).Append("\n");
            sb.Append("  TaxYear: ").Append(TaxYear).Append("\n");
            sb.Append("  EmployerIdNumber: ").Append(EmployerIdNumber).Append("\n");
            sb.Append("  WagesTipsOtherComp: ").Append(WagesTipsOtherComp).Append("\n");
            sb.Append("  FederalIncomeTaxWithheld: ").Append(FederalIncomeTaxWithheld).Append("\n");
            sb.Append("  SocialSecurityWages: ").Append(SocialSecurityWages).Append("\n");
            sb.Append("  SocialSecurityTaxWithheld: ").Append(SocialSecurityTaxWithheld).Append("\n");
            sb.Append("  MedicareWagesAndTips: ").Append(MedicareWagesAndTips).Append("\n");
            sb.Append("  MedicareTaxWithheld: ").Append(MedicareTaxWithheld).Append("\n");
            sb.Append("  SocialSecurityTips: ").Append(SocialSecurityTips).Append("\n");
            sb.Append("  AllocatedTips: ").Append(AllocatedTips).Append("\n");
            sb.Append("  Box9: ").Append(Box9).Append("\n");
            sb.Append("  DependentCareBenefits: ").Append(DependentCareBenefits).Append("\n");
            sb.Append("  NonqualifiedPlans: ").Append(NonqualifiedPlans).Append("\n");
            sb.Append("  Box12: ").Append(Box12).Append("\n");
            sb.Append("  StatutoryEmployee: ").Append(StatutoryEmployee).Append("\n");
            sb.Append("  RetirementPlan: ").Append(RetirementPlan).Append("\n");
            sb.Append("  ThirdPartySickPay: ").Append(ThirdPartySickPay).Append("\n");
            sb.Append("  Other: ").Append(Other).Append("\n");
            sb.Append("  StateAndLocalWages: ").Append(StateAndLocalWages).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as W2);
        }

        /// <summary>
        /// Returns true if W2 instances are equal
        /// </summary>
        /// <param name="input">Instance of W2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(W2 input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Employer == input.Employer ||
                    (this.Employer != null &&
                    this.Employer.Equals(input.Employer))
                ) && base.Equals(input) && 
                (
                    this.Employee == input.Employee ||
                    (this.Employee != null &&
                    this.Employee.Equals(input.Employee))
                ) && base.Equals(input) && 
                (
                    this.TaxYear == input.TaxYear ||
                    (this.TaxYear != null &&
                    this.TaxYear.Equals(input.TaxYear))
                ) && base.Equals(input) && 
                (
                    this.EmployerIdNumber == input.EmployerIdNumber ||
                    (this.EmployerIdNumber != null &&
                    this.EmployerIdNumber.Equals(input.EmployerIdNumber))
                ) && base.Equals(input) && 
                (
                    this.WagesTipsOtherComp == input.WagesTipsOtherComp ||
                    (this.WagesTipsOtherComp != null &&
                    this.WagesTipsOtherComp.Equals(input.WagesTipsOtherComp))
                ) && base.Equals(input) && 
                (
                    this.FederalIncomeTaxWithheld == input.FederalIncomeTaxWithheld ||
                    (this.FederalIncomeTaxWithheld != null &&
                    this.FederalIncomeTaxWithheld.Equals(input.FederalIncomeTaxWithheld))
                ) && base.Equals(input) && 
                (
                    this.SocialSecurityWages == input.SocialSecurityWages ||
                    (this.SocialSecurityWages != null &&
                    this.SocialSecurityWages.Equals(input.SocialSecurityWages))
                ) && base.Equals(input) && 
                (
                    this.SocialSecurityTaxWithheld == input.SocialSecurityTaxWithheld ||
                    (this.SocialSecurityTaxWithheld != null &&
                    this.SocialSecurityTaxWithheld.Equals(input.SocialSecurityTaxWithheld))
                ) && base.Equals(input) && 
                (
                    this.MedicareWagesAndTips == input.MedicareWagesAndTips ||
                    (this.MedicareWagesAndTips != null &&
                    this.MedicareWagesAndTips.Equals(input.MedicareWagesAndTips))
                ) && base.Equals(input) && 
                (
                    this.MedicareTaxWithheld == input.MedicareTaxWithheld ||
                    (this.MedicareTaxWithheld != null &&
                    this.MedicareTaxWithheld.Equals(input.MedicareTaxWithheld))
                ) && base.Equals(input) && 
                (
                    this.SocialSecurityTips == input.SocialSecurityTips ||
                    (this.SocialSecurityTips != null &&
                    this.SocialSecurityTips.Equals(input.SocialSecurityTips))
                ) && base.Equals(input) && 
                (
                    this.AllocatedTips == input.AllocatedTips ||
                    (this.AllocatedTips != null &&
                    this.AllocatedTips.Equals(input.AllocatedTips))
                ) && base.Equals(input) && 
                (
                    this.Box9 == input.Box9 ||
                    (this.Box9 != null &&
                    this.Box9.Equals(input.Box9))
                ) && base.Equals(input) && 
                (
                    this.DependentCareBenefits == input.DependentCareBenefits ||
                    (this.DependentCareBenefits != null &&
                    this.DependentCareBenefits.Equals(input.DependentCareBenefits))
                ) && base.Equals(input) && 
                (
                    this.NonqualifiedPlans == input.NonqualifiedPlans ||
                    (this.NonqualifiedPlans != null &&
                    this.NonqualifiedPlans.Equals(input.NonqualifiedPlans))
                ) && base.Equals(input) && 
                (
                    this.Box12 == input.Box12 ||
                    this.Box12 != null &&
                    input.Box12 != null &&
                    this.Box12.SequenceEqual(input.Box12)
                ) && base.Equals(input) && 
                (
                    this.StatutoryEmployee == input.StatutoryEmployee ||
                    (this.StatutoryEmployee != null &&
                    this.StatutoryEmployee.Equals(input.StatutoryEmployee))
                ) && base.Equals(input) && 
                (
                    this.RetirementPlan == input.RetirementPlan ||
                    (this.RetirementPlan != null &&
                    this.RetirementPlan.Equals(input.RetirementPlan))
                ) && base.Equals(input) && 
                (
                    this.ThirdPartySickPay == input.ThirdPartySickPay ||
                    (this.ThirdPartySickPay != null &&
                    this.ThirdPartySickPay.Equals(input.ThirdPartySickPay))
                ) && base.Equals(input) && 
                (
                    this.Other == input.Other ||
                    (this.Other != null &&
                    this.Other.Equals(input.Other))
                ) && base.Equals(input) && 
                (
                    this.StateAndLocalWages == input.StateAndLocalWages ||
                    this.StateAndLocalWages != null &&
                    input.StateAndLocalWages != null &&
                    this.StateAndLocalWages.SequenceEqual(input.StateAndLocalWages)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Employer != null)
                {
                    hashCode = (hashCode * 59) + this.Employer.GetHashCode();
                }
                if (this.Employee != null)
                {
                    hashCode = (hashCode * 59) + this.Employee.GetHashCode();
                }
                if (this.TaxYear != null)
                {
                    hashCode = (hashCode * 59) + this.TaxYear.GetHashCode();
                }
                if (this.EmployerIdNumber != null)
                {
                    hashCode = (hashCode * 59) + this.EmployerIdNumber.GetHashCode();
                }
                if (this.WagesTipsOtherComp != null)
                {
                    hashCode = (hashCode * 59) + this.WagesTipsOtherComp.GetHashCode();
                }
                if (this.FederalIncomeTaxWithheld != null)
                {
                    hashCode = (hashCode * 59) + this.FederalIncomeTaxWithheld.GetHashCode();
                }
                if (this.SocialSecurityWages != null)
                {
                    hashCode = (hashCode * 59) + this.SocialSecurityWages.GetHashCode();
                }
                if (this.SocialSecurityTaxWithheld != null)
                {
                    hashCode = (hashCode * 59) + this.SocialSecurityTaxWithheld.GetHashCode();
                }
                if (this.MedicareWagesAndTips != null)
                {
                    hashCode = (hashCode * 59) + this.MedicareWagesAndTips.GetHashCode();
                }
                if (this.MedicareTaxWithheld != null)
                {
                    hashCode = (hashCode * 59) + this.MedicareTaxWithheld.GetHashCode();
                }
                if (this.SocialSecurityTips != null)
                {
                    hashCode = (hashCode * 59) + this.SocialSecurityTips.GetHashCode();
                }
                if (this.AllocatedTips != null)
                {
                    hashCode = (hashCode * 59) + this.AllocatedTips.GetHashCode();
                }
                if (this.Box9 != null)
                {
                    hashCode = (hashCode * 59) + this.Box9.GetHashCode();
                }
                if (this.DependentCareBenefits != null)
                {
                    hashCode = (hashCode * 59) + this.DependentCareBenefits.GetHashCode();
                }
                if (this.NonqualifiedPlans != null)
                {
                    hashCode = (hashCode * 59) + this.NonqualifiedPlans.GetHashCode();
                }
                if (this.Box12 != null)
                {
                    hashCode = (hashCode * 59) + this.Box12.GetHashCode();
                }
                if (this.StatutoryEmployee != null)
                {
                    hashCode = (hashCode * 59) + this.StatutoryEmployee.GetHashCode();
                }
                if (this.RetirementPlan != null)
                {
                    hashCode = (hashCode * 59) + this.RetirementPlan.GetHashCode();
                }
                if (this.ThirdPartySickPay != null)
                {
                    hashCode = (hashCode * 59) + this.ThirdPartySickPay.GetHashCode();
                }
                if (this.Other != null)
                {
                    hashCode = (hashCode * 59) + this.Other.GetHashCode();
                }
                if (this.StateAndLocalWages != null)
                {
                    hashCode = (hashCode * 59) + this.StateAndLocalWages.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
