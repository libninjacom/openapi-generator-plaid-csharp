/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// LinkTokenCreateRequest defines the request schema for &#x60;/link/token/create&#x60;
    /// </summary>
    [DataContract(Name = "LinkTokenCreateRequest")]
    public partial class LinkTokenCreateRequest : IEquatable<LinkTokenCreateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkTokenCreateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LinkTokenCreateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkTokenCreateRequest" /> class.
        /// </summary>
        /// <param name="clientId">Your Plaid API &#x60;client_id&#x60;. The &#x60;client_id&#x60; is required and may be provided either in the &#x60;PLAID-CLIENT-ID&#x60; header or as part of a request body..</param>
        /// <param name="secret">Your Plaid API &#x60;secret&#x60;. The &#x60;secret&#x60; is required and may be provided either in the &#x60;PLAID-SECRET&#x60; header or as part of a request body..</param>
        /// <param name="clientName">The name of your application, as it should be displayed in Link. Maximum length of 30 characters. If a value longer than 30 characters is provided, Link will display \&quot;This Application\&quot; instead. (required).</param>
        /// <param name="language">The language that Link should be displayed in.  Supported languages are: - English (&#x60;&#39;en&#39;&#x60;) - French (&#x60;&#39;fr&#39;&#x60;) - Spanish (&#x60;&#39;es&#39;&#x60;) - Dutch (&#x60;&#39;nl&#39;&#x60;) - German(&#x60;&#39;de&#39;&#x60;)  When using a Link customization, the language configured here must match the setting in the customization, or the customization will not be applied. (required).</param>
        /// <param name="countryCodes">Specify an array of Plaid-supported country codes using the ISO-3166-1 alpha-2 country code standard. Institutions from all listed countries will be shown.  Supported country codes are: &#x60;US&#x60;, &#x60;CA&#x60;, &#x60;DE&#x60;, &#x60;ES&#x60;, &#x60;FR&#x60;, &#x60;GB&#x60;, &#x60;IE&#x60;, &#x60;NL&#x60;. For a complete mapping of supported products by country, see https://plaid.com/global/.  If Link is launched with multiple country codes, only products that you are enabled for in all countries will be used by Link. Note that while all countries are enabled by default in Sandbox and Development, in Production only US and Canada are enabled by default. To gain access to European institutions in the Production environment, [file a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access) via the Plaid dashboard. If you initialize with a European country code, your users will see the European consent panel during the Link flow.  If using a Link customization, make sure the country codes in the customization match those specified in &#x60;country_codes&#x60;. If both &#x60;country_codes&#x60; and a Link customization are used, the value in &#x60;country_codes&#x60; may override the value in the customization.  If using the Auth features Instant Match, Same-day Micro-deposits, or Automated Micro-deposits, &#x60;country_codes&#x60; must be set to &#x60;[&#39;US&#39;]&#x60;. (required).</param>
        /// <param name="user">user (required).</param>
        /// <param name="products">List of Plaid product(s) you wish to use. If launching Link in update mode, should be omitted; required otherwise.  &#x60;balance&#x60; is *not* a valid value, the Balance product does not require explicit initialization and will automatically be initialized when any other product is initialized.  Only institutions that support *all* requested products will be shown in Link; to maximize the number of institutions listed, it is recommended to initialize Link with the minimal product set required for your use case. Additional products can be added after Link initialization by calling the relevant endpoints. For details and exceptions, see [Choosing when to initialize products](https://plaid.com/docs/link/best-practices/#choosing-when-to-initialize-products).  Note that, unless you have opted to disable Instant Match support, institutions that support Instant Match will also be shown in Link if &#x60;auth&#x60; is specified as a product, even though these institutions do not contain &#x60;auth&#x60; in their product array.  In Production, you will be billed for each product that you specify when initializing Link. Note that a product cannot be removed from an Item once the Item has been initialized with that product. To stop billing on an Item for subscription-based products, such as Liabilities, Investments, and Transactions, remove the Item via &#x60;/item/remove&#x60;..</param>
        /// <param name="webhook">The destination URL to which any webhooks should be sent..</param>
        /// <param name="accessToken">The &#x60;access_token&#x60; associated with the Item to update, used when updating or modifying an existing &#x60;access_token&#x60;. Used when launching Link in update mode, when completing the Same-day (manual) Micro-deposit flow, or (optionally) when initializing Link as part of the Payment Initiation (UK and Europe) flow..</param>
        /// <param name="linkCustomizationName">The name of the Link customization from the Plaid Dashboard to be applied to Link. If not specified, the &#x60;default&#x60; customization will be used. When using a Link customization, the language in the customization must match the language selected via the &#x60;language&#x60; parameter, and the countries in the customization should match the country codes selected via &#x60;country_codes&#x60;..</param>
        /// <param name="redirectUri">A URI indicating the destination where a user should be forwarded after completing the Link flow; used to support OAuth authentication flows when launching Link in the browser or via a webview. The &#x60;redirect_uri&#x60; should not contain any query parameters. When used in Production or Development, must be an https URI. To specify any subdomain, use &#x60;*&#x60; as a wildcard character, e.g. &#x60;https://_*.example.com/oauth.html&#x60;. If &#x60;android_package_name&#x60; is specified, this field should be left blank.  Note that any redirect URI must also be added to the Allowed redirect URIs list in the [developer dashboard](https://dashboard.plaid.com/team/api)..</param>
        /// <param name="androidPackageName">The name of your app&#39;s Android package. Required if using the &#x60;link_token&#x60; to initialize Link on Android. When creating a &#x60;link_token&#x60; for initializing Link on other platforms, this field must be left blank. Any package name specified here must also be added to the Allowed Android package names setting on the [developer dashboard](https://dashboard.plaid.com/team/api). .</param>
        /// <param name="accountFilters">accountFilters.</param>
        /// <param name="euConfig">euConfig.</param>
        /// <param name="institutionId">Used for certain Europe-only configurations, as well as certain legacy use cases in other regions..</param>
        /// <param name="paymentInitiation">paymentInitiation.</param>
        /// <param name="depositSwitch">depositSwitch.</param>
        /// <param name="incomeVerification">incomeVerification.</param>
        /// <param name="auth">auth.</param>
        /// <param name="transfer">transfer.</param>
        /// <param name="update">update.</param>
        public LinkTokenCreateRequest(string clientId = default(string), string secret = default(string), string clientName = default(string), string language = default(string), List<CountryCode> countryCodes = default(List<CountryCode>), LinkTokenCreateRequestUser user = default(LinkTokenCreateRequestUser), List<Products> products = default(List<Products>), string webhook = default(string), string accessToken = default(string), string linkCustomizationName = default(string), string redirectUri = default(string), string androidPackageName = default(string), LinkTokenAccountFilters accountFilters = default(LinkTokenAccountFilters), LinkTokenEUConfig euConfig = default(LinkTokenEUConfig), string institutionId = default(string), LinkTokenCreateRequestPaymentInitiation paymentInitiation = default(LinkTokenCreateRequestPaymentInitiation), LinkTokenCreateRequestDepositSwitch depositSwitch = default(LinkTokenCreateRequestDepositSwitch), LinkTokenCreateRequestIncomeVerification incomeVerification = default(LinkTokenCreateRequestIncomeVerification), LinkTokenCreateRequestAuth auth = default(LinkTokenCreateRequestAuth), LinkTokenCreateRequestTransfer transfer = default(LinkTokenCreateRequestTransfer), LinkTokenCreateRequestUpdate update = default(LinkTokenCreateRequestUpdate))
        {
            // to ensure "clientName" is required (not null)
            if (clientName == null)
            {
                throw new ArgumentNullException("clientName is a required property for LinkTokenCreateRequest and cannot be null");
            }
            this.ClientName = clientName;
            // to ensure "language" is required (not null)
            if (language == null)
            {
                throw new ArgumentNullException("language is a required property for LinkTokenCreateRequest and cannot be null");
            }
            this.Language = language;
            // to ensure "countryCodes" is required (not null)
            if (countryCodes == null)
            {
                throw new ArgumentNullException("countryCodes is a required property for LinkTokenCreateRequest and cannot be null");
            }
            this.CountryCodes = countryCodes;
            // to ensure "user" is required (not null)
            if (user == null)
            {
                throw new ArgumentNullException("user is a required property for LinkTokenCreateRequest and cannot be null");
            }
            this.User = user;
            this.ClientId = clientId;
            this.Secret = secret;
            this.Products = products;
            this.Webhook = webhook;
            this.AccessToken = accessToken;
            this.LinkCustomizationName = linkCustomizationName;
            this.RedirectUri = redirectUri;
            this.AndroidPackageName = androidPackageName;
            this.AccountFilters = accountFilters;
            this.EuConfig = euConfig;
            this.InstitutionId = institutionId;
            this.PaymentInitiation = paymentInitiation;
            this.DepositSwitch = depositSwitch;
            this.IncomeVerification = incomeVerification;
            this.Auth = auth;
            this.Transfer = transfer;
            this.Update = update;
        }

        /// <summary>
        /// Your Plaid API &#x60;client_id&#x60;. The &#x60;client_id&#x60; is required and may be provided either in the &#x60;PLAID-CLIENT-ID&#x60; header or as part of a request body.
        /// </summary>
        /// <value>Your Plaid API &#x60;client_id&#x60;. The &#x60;client_id&#x60; is required and may be provided either in the &#x60;PLAID-CLIENT-ID&#x60; header or as part of a request body.</value>
        [DataMember(Name = "client_id", EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Your Plaid API &#x60;secret&#x60;. The &#x60;secret&#x60; is required and may be provided either in the &#x60;PLAID-SECRET&#x60; header or as part of a request body.
        /// </summary>
        /// <value>Your Plaid API &#x60;secret&#x60;. The &#x60;secret&#x60; is required and may be provided either in the &#x60;PLAID-SECRET&#x60; header or as part of a request body.</value>
        [DataMember(Name = "secret", EmitDefaultValue = false)]
        public string Secret { get; set; }

        /// <summary>
        /// The name of your application, as it should be displayed in Link. Maximum length of 30 characters. If a value longer than 30 characters is provided, Link will display \&quot;This Application\&quot; instead.
        /// </summary>
        /// <value>The name of your application, as it should be displayed in Link. Maximum length of 30 characters. If a value longer than 30 characters is provided, Link will display \&quot;This Application\&quot; instead.</value>
        [DataMember(Name = "client_name", IsRequired = true, EmitDefaultValue = false)]
        public string ClientName { get; set; }

        /// <summary>
        /// The language that Link should be displayed in.  Supported languages are: - English (&#x60;&#39;en&#39;&#x60;) - French (&#x60;&#39;fr&#39;&#x60;) - Spanish (&#x60;&#39;es&#39;&#x60;) - Dutch (&#x60;&#39;nl&#39;&#x60;) - German(&#x60;&#39;de&#39;&#x60;)  When using a Link customization, the language configured here must match the setting in the customization, or the customization will not be applied.
        /// </summary>
        /// <value>The language that Link should be displayed in.  Supported languages are: - English (&#x60;&#39;en&#39;&#x60;) - French (&#x60;&#39;fr&#39;&#x60;) - Spanish (&#x60;&#39;es&#39;&#x60;) - Dutch (&#x60;&#39;nl&#39;&#x60;) - German(&#x60;&#39;de&#39;&#x60;)  When using a Link customization, the language configured here must match the setting in the customization, or the customization will not be applied.</value>
        [DataMember(Name = "language", IsRequired = true, EmitDefaultValue = false)]
        public string Language { get; set; }

        /// <summary>
        /// Specify an array of Plaid-supported country codes using the ISO-3166-1 alpha-2 country code standard. Institutions from all listed countries will be shown.  Supported country codes are: &#x60;US&#x60;, &#x60;CA&#x60;, &#x60;DE&#x60;, &#x60;ES&#x60;, &#x60;FR&#x60;, &#x60;GB&#x60;, &#x60;IE&#x60;, &#x60;NL&#x60;. For a complete mapping of supported products by country, see https://plaid.com/global/.  If Link is launched with multiple country codes, only products that you are enabled for in all countries will be used by Link. Note that while all countries are enabled by default in Sandbox and Development, in Production only US and Canada are enabled by default. To gain access to European institutions in the Production environment, [file a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access) via the Plaid dashboard. If you initialize with a European country code, your users will see the European consent panel during the Link flow.  If using a Link customization, make sure the country codes in the customization match those specified in &#x60;country_codes&#x60;. If both &#x60;country_codes&#x60; and a Link customization are used, the value in &#x60;country_codes&#x60; may override the value in the customization.  If using the Auth features Instant Match, Same-day Micro-deposits, or Automated Micro-deposits, &#x60;country_codes&#x60; must be set to &#x60;[&#39;US&#39;]&#x60;.
        /// </summary>
        /// <value>Specify an array of Plaid-supported country codes using the ISO-3166-1 alpha-2 country code standard. Institutions from all listed countries will be shown.  Supported country codes are: &#x60;US&#x60;, &#x60;CA&#x60;, &#x60;DE&#x60;, &#x60;ES&#x60;, &#x60;FR&#x60;, &#x60;GB&#x60;, &#x60;IE&#x60;, &#x60;NL&#x60;. For a complete mapping of supported products by country, see https://plaid.com/global/.  If Link is launched with multiple country codes, only products that you are enabled for in all countries will be used by Link. Note that while all countries are enabled by default in Sandbox and Development, in Production only US and Canada are enabled by default. To gain access to European institutions in the Production environment, [file a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access) via the Plaid dashboard. If you initialize with a European country code, your users will see the European consent panel during the Link flow.  If using a Link customization, make sure the country codes in the customization match those specified in &#x60;country_codes&#x60;. If both &#x60;country_codes&#x60; and a Link customization are used, the value in &#x60;country_codes&#x60; may override the value in the customization.  If using the Auth features Instant Match, Same-day Micro-deposits, or Automated Micro-deposits, &#x60;country_codes&#x60; must be set to &#x60;[&#39;US&#39;]&#x60;.</value>
        [DataMember(Name = "country_codes", IsRequired = true, EmitDefaultValue = false)]
        public List<CountryCode> CountryCodes { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", IsRequired = true, EmitDefaultValue = false)]
        public LinkTokenCreateRequestUser User { get; set; }

        /// <summary>
        /// List of Plaid product(s) you wish to use. If launching Link in update mode, should be omitted; required otherwise.  &#x60;balance&#x60; is *not* a valid value, the Balance product does not require explicit initialization and will automatically be initialized when any other product is initialized.  Only institutions that support *all* requested products will be shown in Link; to maximize the number of institutions listed, it is recommended to initialize Link with the minimal product set required for your use case. Additional products can be added after Link initialization by calling the relevant endpoints. For details and exceptions, see [Choosing when to initialize products](https://plaid.com/docs/link/best-practices/#choosing-when-to-initialize-products).  Note that, unless you have opted to disable Instant Match support, institutions that support Instant Match will also be shown in Link if &#x60;auth&#x60; is specified as a product, even though these institutions do not contain &#x60;auth&#x60; in their product array.  In Production, you will be billed for each product that you specify when initializing Link. Note that a product cannot be removed from an Item once the Item has been initialized with that product. To stop billing on an Item for subscription-based products, such as Liabilities, Investments, and Transactions, remove the Item via &#x60;/item/remove&#x60;.
        /// </summary>
        /// <value>List of Plaid product(s) you wish to use. If launching Link in update mode, should be omitted; required otherwise.  &#x60;balance&#x60; is *not* a valid value, the Balance product does not require explicit initialization and will automatically be initialized when any other product is initialized.  Only institutions that support *all* requested products will be shown in Link; to maximize the number of institutions listed, it is recommended to initialize Link with the minimal product set required for your use case. Additional products can be added after Link initialization by calling the relevant endpoints. For details and exceptions, see [Choosing when to initialize products](https://plaid.com/docs/link/best-practices/#choosing-when-to-initialize-products).  Note that, unless you have opted to disable Instant Match support, institutions that support Instant Match will also be shown in Link if &#x60;auth&#x60; is specified as a product, even though these institutions do not contain &#x60;auth&#x60; in their product array.  In Production, you will be billed for each product that you specify when initializing Link. Note that a product cannot be removed from an Item once the Item has been initialized with that product. To stop billing on an Item for subscription-based products, such as Liabilities, Investments, and Transactions, remove the Item via &#x60;/item/remove&#x60;.</value>
        [DataMember(Name = "products", EmitDefaultValue = false)]
        public List<Products> Products { get; set; }

        /// <summary>
        /// The destination URL to which any webhooks should be sent.
        /// </summary>
        /// <value>The destination URL to which any webhooks should be sent.</value>
        [DataMember(Name = "webhook", EmitDefaultValue = false)]
        public string Webhook { get; set; }

        /// <summary>
        /// The &#x60;access_token&#x60; associated with the Item to update, used when updating or modifying an existing &#x60;access_token&#x60;. Used when launching Link in update mode, when completing the Same-day (manual) Micro-deposit flow, or (optionally) when initializing Link as part of the Payment Initiation (UK and Europe) flow.
        /// </summary>
        /// <value>The &#x60;access_token&#x60; associated with the Item to update, used when updating or modifying an existing &#x60;access_token&#x60;. Used when launching Link in update mode, when completing the Same-day (manual) Micro-deposit flow, or (optionally) when initializing Link as part of the Payment Initiation (UK and Europe) flow.</value>
        [DataMember(Name = "access_token", EmitDefaultValue = false)]
        public string AccessToken { get; set; }

        /// <summary>
        /// The name of the Link customization from the Plaid Dashboard to be applied to Link. If not specified, the &#x60;default&#x60; customization will be used. When using a Link customization, the language in the customization must match the language selected via the &#x60;language&#x60; parameter, and the countries in the customization should match the country codes selected via &#x60;country_codes&#x60;.
        /// </summary>
        /// <value>The name of the Link customization from the Plaid Dashboard to be applied to Link. If not specified, the &#x60;default&#x60; customization will be used. When using a Link customization, the language in the customization must match the language selected via the &#x60;language&#x60; parameter, and the countries in the customization should match the country codes selected via &#x60;country_codes&#x60;.</value>
        [DataMember(Name = "link_customization_name", EmitDefaultValue = false)]
        public string LinkCustomizationName { get; set; }

        /// <summary>
        /// A URI indicating the destination where a user should be forwarded after completing the Link flow; used to support OAuth authentication flows when launching Link in the browser or via a webview. The &#x60;redirect_uri&#x60; should not contain any query parameters. When used in Production or Development, must be an https URI. To specify any subdomain, use &#x60;*&#x60; as a wildcard character, e.g. &#x60;https://_*.example.com/oauth.html&#x60;. If &#x60;android_package_name&#x60; is specified, this field should be left blank.  Note that any redirect URI must also be added to the Allowed redirect URIs list in the [developer dashboard](https://dashboard.plaid.com/team/api).
        /// </summary>
        /// <value>A URI indicating the destination where a user should be forwarded after completing the Link flow; used to support OAuth authentication flows when launching Link in the browser or via a webview. The &#x60;redirect_uri&#x60; should not contain any query parameters. When used in Production or Development, must be an https URI. To specify any subdomain, use &#x60;*&#x60; as a wildcard character, e.g. &#x60;https://_*.example.com/oauth.html&#x60;. If &#x60;android_package_name&#x60; is specified, this field should be left blank.  Note that any redirect URI must also be added to the Allowed redirect URIs list in the [developer dashboard](https://dashboard.plaid.com/team/api).</value>
        [DataMember(Name = "redirect_uri", EmitDefaultValue = false)]
        public string RedirectUri { get; set; }

        /// <summary>
        /// The name of your app&#39;s Android package. Required if using the &#x60;link_token&#x60; to initialize Link on Android. When creating a &#x60;link_token&#x60; for initializing Link on other platforms, this field must be left blank. Any package name specified here must also be added to the Allowed Android package names setting on the [developer dashboard](https://dashboard.plaid.com/team/api). 
        /// </summary>
        /// <value>The name of your app&#39;s Android package. Required if using the &#x60;link_token&#x60; to initialize Link on Android. When creating a &#x60;link_token&#x60; for initializing Link on other platforms, this field must be left blank. Any package name specified here must also be added to the Allowed Android package names setting on the [developer dashboard](https://dashboard.plaid.com/team/api). </value>
        [DataMember(Name = "android_package_name", EmitDefaultValue = false)]
        public string AndroidPackageName { get; set; }

        /// <summary>
        /// Gets or Sets AccountFilters
        /// </summary>
        [DataMember(Name = "account_filters", EmitDefaultValue = false)]
        public LinkTokenAccountFilters AccountFilters { get; set; }

        /// <summary>
        /// Gets or Sets EuConfig
        /// </summary>
        [DataMember(Name = "eu_config", EmitDefaultValue = false)]
        public LinkTokenEUConfig EuConfig { get; set; }

        /// <summary>
        /// Used for certain Europe-only configurations, as well as certain legacy use cases in other regions.
        /// </summary>
        /// <value>Used for certain Europe-only configurations, as well as certain legacy use cases in other regions.</value>
        [DataMember(Name = "institution_id", EmitDefaultValue = false)]
        public string InstitutionId { get; set; }

        /// <summary>
        /// Gets or Sets PaymentInitiation
        /// </summary>
        [DataMember(Name = "payment_initiation", EmitDefaultValue = false)]
        public LinkTokenCreateRequestPaymentInitiation PaymentInitiation { get; set; }

        /// <summary>
        /// Gets or Sets DepositSwitch
        /// </summary>
        [DataMember(Name = "deposit_switch", EmitDefaultValue = false)]
        public LinkTokenCreateRequestDepositSwitch DepositSwitch { get; set; }

        /// <summary>
        /// Gets or Sets IncomeVerification
        /// </summary>
        [DataMember(Name = "income_verification", EmitDefaultValue = false)]
        public LinkTokenCreateRequestIncomeVerification IncomeVerification { get; set; }

        /// <summary>
        /// Gets or Sets Auth
        /// </summary>
        [DataMember(Name = "auth", EmitDefaultValue = false)]
        public LinkTokenCreateRequestAuth Auth { get; set; }

        /// <summary>
        /// Gets or Sets Transfer
        /// </summary>
        [DataMember(Name = "transfer", EmitDefaultValue = false)]
        public LinkTokenCreateRequestTransfer Transfer { get; set; }

        /// <summary>
        /// Gets or Sets Update
        /// </summary>
        [DataMember(Name = "update", EmitDefaultValue = false)]
        public LinkTokenCreateRequestUpdate Update { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LinkTokenCreateRequest {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("  ClientName: ").Append(ClientName).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  CountryCodes: ").Append(CountryCodes).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Products: ").Append(Products).Append("\n");
            sb.Append("  Webhook: ").Append(Webhook).Append("\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  LinkCustomizationName: ").Append(LinkCustomizationName).Append("\n");
            sb.Append("  RedirectUri: ").Append(RedirectUri).Append("\n");
            sb.Append("  AndroidPackageName: ").Append(AndroidPackageName).Append("\n");
            sb.Append("  AccountFilters: ").Append(AccountFilters).Append("\n");
            sb.Append("  EuConfig: ").Append(EuConfig).Append("\n");
            sb.Append("  InstitutionId: ").Append(InstitutionId).Append("\n");
            sb.Append("  PaymentInitiation: ").Append(PaymentInitiation).Append("\n");
            sb.Append("  DepositSwitch: ").Append(DepositSwitch).Append("\n");
            sb.Append("  IncomeVerification: ").Append(IncomeVerification).Append("\n");
            sb.Append("  Auth: ").Append(Auth).Append("\n");
            sb.Append("  Transfer: ").Append(Transfer).Append("\n");
            sb.Append("  Update: ").Append(Update).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LinkTokenCreateRequest);
        }

        /// <summary>
        /// Returns true if LinkTokenCreateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of LinkTokenCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LinkTokenCreateRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.Secret == input.Secret ||
                    (this.Secret != null &&
                    this.Secret.Equals(input.Secret))
                ) && 
                (
                    this.ClientName == input.ClientName ||
                    (this.ClientName != null &&
                    this.ClientName.Equals(input.ClientName))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.CountryCodes == input.CountryCodes ||
                    this.CountryCodes != null &&
                    input.CountryCodes != null &&
                    this.CountryCodes.SequenceEqual(input.CountryCodes)
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Products == input.Products ||
                    this.Products != null &&
                    input.Products != null &&
                    this.Products.SequenceEqual(input.Products)
                ) && 
                (
                    this.Webhook == input.Webhook ||
                    (this.Webhook != null &&
                    this.Webhook.Equals(input.Webhook))
                ) && 
                (
                    this.AccessToken == input.AccessToken ||
                    (this.AccessToken != null &&
                    this.AccessToken.Equals(input.AccessToken))
                ) && 
                (
                    this.LinkCustomizationName == input.LinkCustomizationName ||
                    (this.LinkCustomizationName != null &&
                    this.LinkCustomizationName.Equals(input.LinkCustomizationName))
                ) && 
                (
                    this.RedirectUri == input.RedirectUri ||
                    (this.RedirectUri != null &&
                    this.RedirectUri.Equals(input.RedirectUri))
                ) && 
                (
                    this.AndroidPackageName == input.AndroidPackageName ||
                    (this.AndroidPackageName != null &&
                    this.AndroidPackageName.Equals(input.AndroidPackageName))
                ) && 
                (
                    this.AccountFilters == input.AccountFilters ||
                    (this.AccountFilters != null &&
                    this.AccountFilters.Equals(input.AccountFilters))
                ) && 
                (
                    this.EuConfig == input.EuConfig ||
                    (this.EuConfig != null &&
                    this.EuConfig.Equals(input.EuConfig))
                ) && 
                (
                    this.InstitutionId == input.InstitutionId ||
                    (this.InstitutionId != null &&
                    this.InstitutionId.Equals(input.InstitutionId))
                ) && 
                (
                    this.PaymentInitiation == input.PaymentInitiation ||
                    (this.PaymentInitiation != null &&
                    this.PaymentInitiation.Equals(input.PaymentInitiation))
                ) && 
                (
                    this.DepositSwitch == input.DepositSwitch ||
                    (this.DepositSwitch != null &&
                    this.DepositSwitch.Equals(input.DepositSwitch))
                ) && 
                (
                    this.IncomeVerification == input.IncomeVerification ||
                    (this.IncomeVerification != null &&
                    this.IncomeVerification.Equals(input.IncomeVerification))
                ) && 
                (
                    this.Auth == input.Auth ||
                    (this.Auth != null &&
                    this.Auth.Equals(input.Auth))
                ) && 
                (
                    this.Transfer == input.Transfer ||
                    (this.Transfer != null &&
                    this.Transfer.Equals(input.Transfer))
                ) && 
                (
                    this.Update == input.Update ||
                    (this.Update != null &&
                    this.Update.Equals(input.Update))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientId.GetHashCode();
                }
                if (this.Secret != null)
                {
                    hashCode = (hashCode * 59) + this.Secret.GetHashCode();
                }
                if (this.ClientName != null)
                {
                    hashCode = (hashCode * 59) + this.ClientName.GetHashCode();
                }
                if (this.Language != null)
                {
                    hashCode = (hashCode * 59) + this.Language.GetHashCode();
                }
                if (this.CountryCodes != null)
                {
                    hashCode = (hashCode * 59) + this.CountryCodes.GetHashCode();
                }
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                if (this.Products != null)
                {
                    hashCode = (hashCode * 59) + this.Products.GetHashCode();
                }
                if (this.Webhook != null)
                {
                    hashCode = (hashCode * 59) + this.Webhook.GetHashCode();
                }
                if (this.AccessToken != null)
                {
                    hashCode = (hashCode * 59) + this.AccessToken.GetHashCode();
                }
                if (this.LinkCustomizationName != null)
                {
                    hashCode = (hashCode * 59) + this.LinkCustomizationName.GetHashCode();
                }
                if (this.RedirectUri != null)
                {
                    hashCode = (hashCode * 59) + this.RedirectUri.GetHashCode();
                }
                if (this.AndroidPackageName != null)
                {
                    hashCode = (hashCode * 59) + this.AndroidPackageName.GetHashCode();
                }
                if (this.AccountFilters != null)
                {
                    hashCode = (hashCode * 59) + this.AccountFilters.GetHashCode();
                }
                if (this.EuConfig != null)
                {
                    hashCode = (hashCode * 59) + this.EuConfig.GetHashCode();
                }
                if (this.InstitutionId != null)
                {
                    hashCode = (hashCode * 59) + this.InstitutionId.GetHashCode();
                }
                if (this.PaymentInitiation != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentInitiation.GetHashCode();
                }
                if (this.DepositSwitch != null)
                {
                    hashCode = (hashCode * 59) + this.DepositSwitch.GetHashCode();
                }
                if (this.IncomeVerification != null)
                {
                    hashCode = (hashCode * 59) + this.IncomeVerification.GetHashCode();
                }
                if (this.Auth != null)
                {
                    hashCode = (hashCode * 59) + this.Auth.GetHashCode();
                }
                if (this.Transfer != null)
                {
                    hashCode = (hashCode * 59) + this.Transfer.GetHashCode();
                }
                if (this.Update != null)
                {
                    hashCode = (hashCode * 59) + this.Update.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
