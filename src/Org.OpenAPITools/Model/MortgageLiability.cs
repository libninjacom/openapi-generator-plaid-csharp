/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Contains details about a mortgage account.
    /// </summary>
    [DataContract(Name = "MortgageLiability")]
    public partial class MortgageLiability : Dictionary<String, Object>, IEquatable<MortgageLiability>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MortgageLiability" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MortgageLiability()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="MortgageLiability" /> class.
        /// </summary>
        /// <param name="accountId">The ID of the account that this liability belongs to. (required).</param>
        /// <param name="accountNumber">The account number of the loan. (required).</param>
        /// <param name="currentLateFee">The current outstanding amount charged for late payment. (required).</param>
        /// <param name="escrowBalance">Total amount held in escrow to pay taxes and insurance on behalf of the borrower. (required).</param>
        /// <param name="hasPmi">Indicates whether the borrower has private mortgage insurance in effect. (required).</param>
        /// <param name="hasPrepaymentPenalty">Indicates whether the borrower will pay a penalty for early payoff of mortgage. (required).</param>
        /// <param name="interestRate">interestRate (required).</param>
        /// <param name="lastPaymentAmount">The amount of the last payment. (required).</param>
        /// <param name="lastPaymentDate">The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). (required).</param>
        /// <param name="loanTypeDescription">Description of the type of loan, for example &#x60;conventional&#x60;, &#x60;fixed&#x60;, or &#x60;variable&#x60;. This field is provided directly from the loan servicer and does not have an enumerated set of possible values. (required).</param>
        /// <param name="loanTerm">Full duration of mortgage as at origination (e.g. &#x60;10 year&#x60;). (required).</param>
        /// <param name="maturityDate">Original date on which mortgage is due in full. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). (required).</param>
        /// <param name="nextMonthlyPayment">The amount of the next payment. (required).</param>
        /// <param name="nextPaymentDueDate">The due date for the next payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). (required).</param>
        /// <param name="originationDate">The date on which the loan was initially lent. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). (required).</param>
        /// <param name="originationPrincipalAmount">The original principal balance of the mortgage. (required).</param>
        /// <param name="pastDueAmount">Amount of loan (principal + interest) past due for payment. (required).</param>
        /// <param name="propertyAddress">propertyAddress (required).</param>
        /// <param name="ytdInterestPaid">The year to date (YTD) interest paid. (required).</param>
        /// <param name="ytdPrincipalPaid">The YTD principal paid. (required).</param>
        public MortgageLiability(string accountId = default(string), string accountNumber = default(string), decimal? currentLateFee = default(decimal?), decimal? escrowBalance = default(decimal?), bool? hasPmi = default(bool?), bool? hasPrepaymentPenalty = default(bool?), MortgageInterestRate interestRate = default(MortgageInterestRate), decimal? lastPaymentAmount = default(decimal?), DateTime? lastPaymentDate = default(DateTime?), string loanTypeDescription = default(string), string loanTerm = default(string), DateTime? maturityDate = default(DateTime?), decimal? nextMonthlyPayment = default(decimal?), DateTime? nextPaymentDueDate = default(DateTime?), DateTime? originationDate = default(DateTime?), decimal? originationPrincipalAmount = default(decimal?), decimal? pastDueAmount = default(decimal?), MortgagePropertyAddress propertyAddress = default(MortgagePropertyAddress), decimal? ytdInterestPaid = default(decimal?), decimal? ytdPrincipalPaid = default(decimal?)) : base()
        {
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new ArgumentNullException("accountId is a required property for MortgageLiability and cannot be null");
            }
            this.AccountId = accountId;
            // to ensure "accountNumber" is required (not null)
            if (accountNumber == null)
            {
                throw new ArgumentNullException("accountNumber is a required property for MortgageLiability and cannot be null");
            }
            this.AccountNumber = accountNumber;
            // to ensure "currentLateFee" is required (not null)
            if (currentLateFee == null)
            {
                throw new ArgumentNullException("currentLateFee is a required property for MortgageLiability and cannot be null");
            }
            this.CurrentLateFee = currentLateFee;
            // to ensure "escrowBalance" is required (not null)
            if (escrowBalance == null)
            {
                throw new ArgumentNullException("escrowBalance is a required property for MortgageLiability and cannot be null");
            }
            this.EscrowBalance = escrowBalance;
            // to ensure "hasPmi" is required (not null)
            if (hasPmi == null)
            {
                throw new ArgumentNullException("hasPmi is a required property for MortgageLiability and cannot be null");
            }
            this.HasPmi = hasPmi;
            // to ensure "hasPrepaymentPenalty" is required (not null)
            if (hasPrepaymentPenalty == null)
            {
                throw new ArgumentNullException("hasPrepaymentPenalty is a required property for MortgageLiability and cannot be null");
            }
            this.HasPrepaymentPenalty = hasPrepaymentPenalty;
            // to ensure "interestRate" is required (not null)
            if (interestRate == null)
            {
                throw new ArgumentNullException("interestRate is a required property for MortgageLiability and cannot be null");
            }
            this.InterestRate = interestRate;
            // to ensure "lastPaymentAmount" is required (not null)
            if (lastPaymentAmount == null)
            {
                throw new ArgumentNullException("lastPaymentAmount is a required property for MortgageLiability and cannot be null");
            }
            this.LastPaymentAmount = lastPaymentAmount;
            // to ensure "lastPaymentDate" is required (not null)
            if (lastPaymentDate == null)
            {
                throw new ArgumentNullException("lastPaymentDate is a required property for MortgageLiability and cannot be null");
            }
            this.LastPaymentDate = lastPaymentDate;
            // to ensure "loanTypeDescription" is required (not null)
            if (loanTypeDescription == null)
            {
                throw new ArgumentNullException("loanTypeDescription is a required property for MortgageLiability and cannot be null");
            }
            this.LoanTypeDescription = loanTypeDescription;
            // to ensure "loanTerm" is required (not null)
            if (loanTerm == null)
            {
                throw new ArgumentNullException("loanTerm is a required property for MortgageLiability and cannot be null");
            }
            this.LoanTerm = loanTerm;
            // to ensure "maturityDate" is required (not null)
            if (maturityDate == null)
            {
                throw new ArgumentNullException("maturityDate is a required property for MortgageLiability and cannot be null");
            }
            this.MaturityDate = maturityDate;
            // to ensure "nextMonthlyPayment" is required (not null)
            if (nextMonthlyPayment == null)
            {
                throw new ArgumentNullException("nextMonthlyPayment is a required property for MortgageLiability and cannot be null");
            }
            this.NextMonthlyPayment = nextMonthlyPayment;
            // to ensure "nextPaymentDueDate" is required (not null)
            if (nextPaymentDueDate == null)
            {
                throw new ArgumentNullException("nextPaymentDueDate is a required property for MortgageLiability and cannot be null");
            }
            this.NextPaymentDueDate = nextPaymentDueDate;
            // to ensure "originationDate" is required (not null)
            if (originationDate == null)
            {
                throw new ArgumentNullException("originationDate is a required property for MortgageLiability and cannot be null");
            }
            this.OriginationDate = originationDate;
            // to ensure "originationPrincipalAmount" is required (not null)
            if (originationPrincipalAmount == null)
            {
                throw new ArgumentNullException("originationPrincipalAmount is a required property for MortgageLiability and cannot be null");
            }
            this.OriginationPrincipalAmount = originationPrincipalAmount;
            // to ensure "pastDueAmount" is required (not null)
            if (pastDueAmount == null)
            {
                throw new ArgumentNullException("pastDueAmount is a required property for MortgageLiability and cannot be null");
            }
            this.PastDueAmount = pastDueAmount;
            // to ensure "propertyAddress" is required (not null)
            if (propertyAddress == null)
            {
                throw new ArgumentNullException("propertyAddress is a required property for MortgageLiability and cannot be null");
            }
            this.PropertyAddress = propertyAddress;
            // to ensure "ytdInterestPaid" is required (not null)
            if (ytdInterestPaid == null)
            {
                throw new ArgumentNullException("ytdInterestPaid is a required property for MortgageLiability and cannot be null");
            }
            this.YtdInterestPaid = ytdInterestPaid;
            // to ensure "ytdPrincipalPaid" is required (not null)
            if (ytdPrincipalPaid == null)
            {
                throw new ArgumentNullException("ytdPrincipalPaid is a required property for MortgageLiability and cannot be null");
            }
            this.YtdPrincipalPaid = ytdPrincipalPaid;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The ID of the account that this liability belongs to.
        /// </summary>
        /// <value>The ID of the account that this liability belongs to.</value>
        [DataMember(Name = "account_id", IsRequired = true, EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// The account number of the loan.
        /// </summary>
        /// <value>The account number of the loan.</value>
        [DataMember(Name = "account_number", IsRequired = true, EmitDefaultValue = false)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// The current outstanding amount charged for late payment.
        /// </summary>
        /// <value>The current outstanding amount charged for late payment.</value>
        [DataMember(Name = "current_late_fee", IsRequired = true, EmitDefaultValue = true)]
        public decimal? CurrentLateFee { get; set; }

        /// <summary>
        /// Total amount held in escrow to pay taxes and insurance on behalf of the borrower.
        /// </summary>
        /// <value>Total amount held in escrow to pay taxes and insurance on behalf of the borrower.</value>
        [DataMember(Name = "escrow_balance", IsRequired = true, EmitDefaultValue = true)]
        public decimal? EscrowBalance { get; set; }

        /// <summary>
        /// Indicates whether the borrower has private mortgage insurance in effect.
        /// </summary>
        /// <value>Indicates whether the borrower has private mortgage insurance in effect.</value>
        [DataMember(Name = "has_pmi", IsRequired = true, EmitDefaultValue = true)]
        public bool? HasPmi { get; set; }

        /// <summary>
        /// Indicates whether the borrower will pay a penalty for early payoff of mortgage.
        /// </summary>
        /// <value>Indicates whether the borrower will pay a penalty for early payoff of mortgage.</value>
        [DataMember(Name = "has_prepayment_penalty", IsRequired = true, EmitDefaultValue = true)]
        public bool? HasPrepaymentPenalty { get; set; }

        /// <summary>
        /// Gets or Sets InterestRate
        /// </summary>
        [DataMember(Name = "interest_rate", IsRequired = true, EmitDefaultValue = false)]
        public MortgageInterestRate InterestRate { get; set; }

        /// <summary>
        /// The amount of the last payment.
        /// </summary>
        /// <value>The amount of the last payment.</value>
        [DataMember(Name = "last_payment_amount", IsRequired = true, EmitDefaultValue = true)]
        public decimal? LastPaymentAmount { get; set; }

        /// <summary>
        /// The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
        /// </summary>
        /// <value>The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).</value>
        [DataMember(Name = "last_payment_date", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? LastPaymentDate { get; set; }

        /// <summary>
        /// Description of the type of loan, for example &#x60;conventional&#x60;, &#x60;fixed&#x60;, or &#x60;variable&#x60;. This field is provided directly from the loan servicer and does not have an enumerated set of possible values.
        /// </summary>
        /// <value>Description of the type of loan, for example &#x60;conventional&#x60;, &#x60;fixed&#x60;, or &#x60;variable&#x60;. This field is provided directly from the loan servicer and does not have an enumerated set of possible values.</value>
        [DataMember(Name = "loan_type_description", IsRequired = true, EmitDefaultValue = true)]
        public string LoanTypeDescription { get; set; }

        /// <summary>
        /// Full duration of mortgage as at origination (e.g. &#x60;10 year&#x60;).
        /// </summary>
        /// <value>Full duration of mortgage as at origination (e.g. &#x60;10 year&#x60;).</value>
        [DataMember(Name = "loan_term", IsRequired = true, EmitDefaultValue = true)]
        public string LoanTerm { get; set; }

        /// <summary>
        /// Original date on which mortgage is due in full. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
        /// </summary>
        /// <value>Original date on which mortgage is due in full. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).</value>
        [DataMember(Name = "maturity_date", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? MaturityDate { get; set; }

        /// <summary>
        /// The amount of the next payment.
        /// </summary>
        /// <value>The amount of the next payment.</value>
        [DataMember(Name = "next_monthly_payment", IsRequired = true, EmitDefaultValue = true)]
        public decimal? NextMonthlyPayment { get; set; }

        /// <summary>
        /// The due date for the next payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
        /// </summary>
        /// <value>The due date for the next payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).</value>
        [DataMember(Name = "next_payment_due_date", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? NextPaymentDueDate { get; set; }

        /// <summary>
        /// The date on which the loan was initially lent. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
        /// </summary>
        /// <value>The date on which the loan was initially lent. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).</value>
        [DataMember(Name = "origination_date", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? OriginationDate { get; set; }

        /// <summary>
        /// The original principal balance of the mortgage.
        /// </summary>
        /// <value>The original principal balance of the mortgage.</value>
        [DataMember(Name = "origination_principal_amount", IsRequired = true, EmitDefaultValue = true)]
        public decimal? OriginationPrincipalAmount { get; set; }

        /// <summary>
        /// Amount of loan (principal + interest) past due for payment.
        /// </summary>
        /// <value>Amount of loan (principal + interest) past due for payment.</value>
        [DataMember(Name = "past_due_amount", IsRequired = true, EmitDefaultValue = true)]
        public decimal? PastDueAmount { get; set; }

        /// <summary>
        /// Gets or Sets PropertyAddress
        /// </summary>
        [DataMember(Name = "property_address", IsRequired = true, EmitDefaultValue = false)]
        public MortgagePropertyAddress PropertyAddress { get; set; }

        /// <summary>
        /// The year to date (YTD) interest paid.
        /// </summary>
        /// <value>The year to date (YTD) interest paid.</value>
        [DataMember(Name = "ytd_interest_paid", IsRequired = true, EmitDefaultValue = true)]
        public decimal? YtdInterestPaid { get; set; }

        /// <summary>
        /// The YTD principal paid.
        /// </summary>
        /// <value>The YTD principal paid.</value>
        [DataMember(Name = "ytd_principal_paid", IsRequired = true, EmitDefaultValue = true)]
        public decimal? YtdPrincipalPaid { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MortgageLiability {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  CurrentLateFee: ").Append(CurrentLateFee).Append("\n");
            sb.Append("  EscrowBalance: ").Append(EscrowBalance).Append("\n");
            sb.Append("  HasPmi: ").Append(HasPmi).Append("\n");
            sb.Append("  HasPrepaymentPenalty: ").Append(HasPrepaymentPenalty).Append("\n");
            sb.Append("  InterestRate: ").Append(InterestRate).Append("\n");
            sb.Append("  LastPaymentAmount: ").Append(LastPaymentAmount).Append("\n");
            sb.Append("  LastPaymentDate: ").Append(LastPaymentDate).Append("\n");
            sb.Append("  LoanTypeDescription: ").Append(LoanTypeDescription).Append("\n");
            sb.Append("  LoanTerm: ").Append(LoanTerm).Append("\n");
            sb.Append("  MaturityDate: ").Append(MaturityDate).Append("\n");
            sb.Append("  NextMonthlyPayment: ").Append(NextMonthlyPayment).Append("\n");
            sb.Append("  NextPaymentDueDate: ").Append(NextPaymentDueDate).Append("\n");
            sb.Append("  OriginationDate: ").Append(OriginationDate).Append("\n");
            sb.Append("  OriginationPrincipalAmount: ").Append(OriginationPrincipalAmount).Append("\n");
            sb.Append("  PastDueAmount: ").Append(PastDueAmount).Append("\n");
            sb.Append("  PropertyAddress: ").Append(PropertyAddress).Append("\n");
            sb.Append("  YtdInterestPaid: ").Append(YtdInterestPaid).Append("\n");
            sb.Append("  YtdPrincipalPaid: ").Append(YtdPrincipalPaid).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MortgageLiability);
        }

        /// <summary>
        /// Returns true if MortgageLiability instances are equal
        /// </summary>
        /// <param name="input">Instance of MortgageLiability to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MortgageLiability input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && base.Equals(input) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && base.Equals(input) && 
                (
                    this.CurrentLateFee == input.CurrentLateFee ||
                    (this.CurrentLateFee != null &&
                    this.CurrentLateFee.Equals(input.CurrentLateFee))
                ) && base.Equals(input) && 
                (
                    this.EscrowBalance == input.EscrowBalance ||
                    (this.EscrowBalance != null &&
                    this.EscrowBalance.Equals(input.EscrowBalance))
                ) && base.Equals(input) && 
                (
                    this.HasPmi == input.HasPmi ||
                    (this.HasPmi != null &&
                    this.HasPmi.Equals(input.HasPmi))
                ) && base.Equals(input) && 
                (
                    this.HasPrepaymentPenalty == input.HasPrepaymentPenalty ||
                    (this.HasPrepaymentPenalty != null &&
                    this.HasPrepaymentPenalty.Equals(input.HasPrepaymentPenalty))
                ) && base.Equals(input) && 
                (
                    this.InterestRate == input.InterestRate ||
                    (this.InterestRate != null &&
                    this.InterestRate.Equals(input.InterestRate))
                ) && base.Equals(input) && 
                (
                    this.LastPaymentAmount == input.LastPaymentAmount ||
                    (this.LastPaymentAmount != null &&
                    this.LastPaymentAmount.Equals(input.LastPaymentAmount))
                ) && base.Equals(input) && 
                (
                    this.LastPaymentDate == input.LastPaymentDate ||
                    (this.LastPaymentDate != null &&
                    this.LastPaymentDate.Equals(input.LastPaymentDate))
                ) && base.Equals(input) && 
                (
                    this.LoanTypeDescription == input.LoanTypeDescription ||
                    (this.LoanTypeDescription != null &&
                    this.LoanTypeDescription.Equals(input.LoanTypeDescription))
                ) && base.Equals(input) && 
                (
                    this.LoanTerm == input.LoanTerm ||
                    (this.LoanTerm != null &&
                    this.LoanTerm.Equals(input.LoanTerm))
                ) && base.Equals(input) && 
                (
                    this.MaturityDate == input.MaturityDate ||
                    (this.MaturityDate != null &&
                    this.MaturityDate.Equals(input.MaturityDate))
                ) && base.Equals(input) && 
                (
                    this.NextMonthlyPayment == input.NextMonthlyPayment ||
                    (this.NextMonthlyPayment != null &&
                    this.NextMonthlyPayment.Equals(input.NextMonthlyPayment))
                ) && base.Equals(input) && 
                (
                    this.NextPaymentDueDate == input.NextPaymentDueDate ||
                    (this.NextPaymentDueDate != null &&
                    this.NextPaymentDueDate.Equals(input.NextPaymentDueDate))
                ) && base.Equals(input) && 
                (
                    this.OriginationDate == input.OriginationDate ||
                    (this.OriginationDate != null &&
                    this.OriginationDate.Equals(input.OriginationDate))
                ) && base.Equals(input) && 
                (
                    this.OriginationPrincipalAmount == input.OriginationPrincipalAmount ||
                    (this.OriginationPrincipalAmount != null &&
                    this.OriginationPrincipalAmount.Equals(input.OriginationPrincipalAmount))
                ) && base.Equals(input) && 
                (
                    this.PastDueAmount == input.PastDueAmount ||
                    (this.PastDueAmount != null &&
                    this.PastDueAmount.Equals(input.PastDueAmount))
                ) && base.Equals(input) && 
                (
                    this.PropertyAddress == input.PropertyAddress ||
                    (this.PropertyAddress != null &&
                    this.PropertyAddress.Equals(input.PropertyAddress))
                ) && base.Equals(input) && 
                (
                    this.YtdInterestPaid == input.YtdInterestPaid ||
                    (this.YtdInterestPaid != null &&
                    this.YtdInterestPaid.Equals(input.YtdInterestPaid))
                ) && base.Equals(input) && 
                (
                    this.YtdPrincipalPaid == input.YtdPrincipalPaid ||
                    (this.YtdPrincipalPaid != null &&
                    this.YtdPrincipalPaid.Equals(input.YtdPrincipalPaid))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                if (this.AccountNumber != null)
                {
                    hashCode = (hashCode * 59) + this.AccountNumber.GetHashCode();
                }
                if (this.CurrentLateFee != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentLateFee.GetHashCode();
                }
                if (this.EscrowBalance != null)
                {
                    hashCode = (hashCode * 59) + this.EscrowBalance.GetHashCode();
                }
                if (this.HasPmi != null)
                {
                    hashCode = (hashCode * 59) + this.HasPmi.GetHashCode();
                }
                if (this.HasPrepaymentPenalty != null)
                {
                    hashCode = (hashCode * 59) + this.HasPrepaymentPenalty.GetHashCode();
                }
                if (this.InterestRate != null)
                {
                    hashCode = (hashCode * 59) + this.InterestRate.GetHashCode();
                }
                if (this.LastPaymentAmount != null)
                {
                    hashCode = (hashCode * 59) + this.LastPaymentAmount.GetHashCode();
                }
                if (this.LastPaymentDate != null)
                {
                    hashCode = (hashCode * 59) + this.LastPaymentDate.GetHashCode();
                }
                if (this.LoanTypeDescription != null)
                {
                    hashCode = (hashCode * 59) + this.LoanTypeDescription.GetHashCode();
                }
                if (this.LoanTerm != null)
                {
                    hashCode = (hashCode * 59) + this.LoanTerm.GetHashCode();
                }
                if (this.MaturityDate != null)
                {
                    hashCode = (hashCode * 59) + this.MaturityDate.GetHashCode();
                }
                if (this.NextMonthlyPayment != null)
                {
                    hashCode = (hashCode * 59) + this.NextMonthlyPayment.GetHashCode();
                }
                if (this.NextPaymentDueDate != null)
                {
                    hashCode = (hashCode * 59) + this.NextPaymentDueDate.GetHashCode();
                }
                if (this.OriginationDate != null)
                {
                    hashCode = (hashCode * 59) + this.OriginationDate.GetHashCode();
                }
                if (this.OriginationPrincipalAmount != null)
                {
                    hashCode = (hashCode * 59) + this.OriginationPrincipalAmount.GetHashCode();
                }
                if (this.PastDueAmount != null)
                {
                    hashCode = (hashCode * 59) + this.PastDueAmount.GetHashCode();
                }
                if (this.PropertyAddress != null)
                {
                    hashCode = (hashCode * 59) + this.PropertyAddress.GetHashCode();
                }
                if (this.YtdInterestPaid != null)
                {
                    hashCode = (hashCode * 59) + this.YtdInterestPaid.GetHashCode();
                }
                if (this.YtdPrincipalPaid != null)
                {
                    hashCode = (hashCode * 59) + this.YtdPrincipalPaid.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
