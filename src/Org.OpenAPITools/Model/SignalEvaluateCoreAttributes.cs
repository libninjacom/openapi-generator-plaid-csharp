/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The core attributes object contains additional data that can be used to assess the ACH return risk. Examples of data include:  &#x60;days_since_first_plaid_connection&#x60;: The number of days since the first time the Item was connected to an application via Plaid &#x60;plaid_connections_count_7d&#x60;: The number of times the Item has been connected to applications via Plaid over the past 7 days &#x60;plaid_connections_count_30d&#x60;: The number of times the Item has been connected to applications via Plaid over the past 30 days &#x60;total_plaid_connections_count&#x60;: The number of times the Item has been connected to applications via Plaid &#x60;is_savings_or_money_market_account&#x60;: Indicates whether the ACH transaction funding account is a savings/money market account  For the full list and detailed documentation of core attributes available, or to request that core attributes not be returned, contact Sales or your Plaid account manager
    /// </summary>
    [DataContract(Name = "SignalEvaluateCoreAttributes")]
    public partial class SignalEvaluateCoreAttributes : IEquatable<SignalEvaluateCoreAttributes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SignalEvaluateCoreAttributes" /> class.
        /// </summary>
        /// <param name="unauthorizedTransactionsCount7d">We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 7 days from the account that will be debited..</param>
        /// <param name="unauthorizedTransactionsCount30d">We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 30 days from the account that will be debited..</param>
        /// <param name="unauthorizedTransactionsCount60d">We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 60 days from the account that will be debited..</param>
        /// <param name="unauthorizedTransactionsCount90d">We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 90 days from the account that will be debited..</param>
        /// <param name="nsfOverdraftTransactionsCount7d">We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 7 days from the account that will be debited..</param>
        /// <param name="nsfOverdraftTransactionsCount30d">We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 30 days from the account that will be debited..</param>
        /// <param name="nsfOverdraftTransactionsCount60d">We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 60 days from the account that will be debited..</param>
        /// <param name="nsfOverdraftTransactionsCount90d">We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 90 days from the account that will be debited..</param>
        /// <param name="daysSinceFirstPlaidConnection">The number of days since the first time the Item was connected to an application via Plaid.</param>
        /// <param name="plaidConnectionsCount7d">The number of times the Item has been connected to applications via Plaid over the past 7 days.</param>
        /// <param name="plaidConnectionsCount30d">The number of times the Item has been connected to applications via Plaid over the past 30 days.</param>
        /// <param name="totalPlaidConnectionsCount">The total number of times the Item has been connected to applications via Plaid.</param>
        /// <param name="isSavingsOrMoneyMarketAccount">Indicates if the ACH transaction funding account is a savings/money market account.</param>
        /// <param name="totalCreditTransactionsAmount10d">The total credit (inflow) transaction amount over the past 10 days from the account that will be debited.</param>
        /// <param name="totalDebitTransactionsAmount10d">The total debit (outflow) transaction amount over the past 10 days from the account that will be debited.</param>
        /// <param name="p50CreditTransactionsAmount28d">The 50th percentile of all credit (inflow) transaction amounts over the past 28 days from the account that will be debited.</param>
        /// <param name="p50DebitTransactionsAmount28d">The 50th percentile of all debit (outflow) transaction amounts over the past 28 days from the account that will be debited.</param>
        /// <param name="p95CreditTransactionsAmount28d">The 95th percentile of all credit (inflow) transaction amounts over the past 28 days from the account that will be debited.</param>
        /// <param name="p95DebitTransactionsAmount28d">The 95th percentile of all debit (outflow) transaction amounts over the past 28 days from the account that will be debited.</param>
        /// <param name="daysWithNegativeBalanceCount90d">The number of days within the past 90 days when the account that will be debited had a negative end-of-day available balance.</param>
        /// <param name="p90EodBalance30d">The 90th percentile of the end-of-day available balance over the past 30 days of the account that will be debited.</param>
        /// <param name="p90EodBalance60d">The 90th percentile of the end-of-day available balance over the past 60 days of the account that will be debited.</param>
        /// <param name="p90EodBalance90d">The 90th percentile of the end-of-day available balance over the past 90 days of the account that will be debited.</param>
        /// <param name="p10EodBalance30d">The 10th percentile of the end-of-day available balance over the past 30 days of the account that will be debited.</param>
        /// <param name="p10EodBalance60d">The 10th percentile of the end-of-day available balance over the past 60 days of the account that will be debited.</param>
        /// <param name="p10EodBalance90d">The 10th percentile of the end-of-day available balance over the past 90 days of the account that will be debited.</param>
        /// <param name="availableBalance">Available balance, as of the &#x60;balance_last_updated&#x60; time. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account..</param>
        /// <param name="currentBalance">Current balance, as of the &#x60;balance_last_updated&#x60; time. The current balance is the total amount of funds in the account..</param>
        /// <param name="balanceLastUpdated">Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DDTHH:mm:ssZ) indicating the last time that the balance for the given account has been updated..</param>
        /// <param name="phoneChangeCount28d">The number of times the account&#39;s phone numbers on file have changed over the past 28 days.</param>
        /// <param name="phoneChangeCount90d">The number of times the account&#39;s phone numbers on file have changed over the past 90 days.</param>
        /// <param name="emailChangeCount28d">The number of times the account&#39;s email addresses on file have changed over the past 28 days.</param>
        /// <param name="emailChangeCount90d">The number of times the account&#39;s email addresses on file have changed over the past 90 days.</param>
        /// <param name="addressChangeCount28d">The number of times the account&#39;s addresses on file have changed over the past 28 days.</param>
        /// <param name="addressChangeCount90d">The number of times the account&#39;s addresses on file have changed over the past 90 days.</param>
        public SignalEvaluateCoreAttributes(int unauthorizedTransactionsCount7d = default(int), int unauthorizedTransactionsCount30d = default(int), int unauthorizedTransactionsCount60d = default(int), int unauthorizedTransactionsCount90d = default(int), int nsfOverdraftTransactionsCount7d = default(int), int nsfOverdraftTransactionsCount30d = default(int), int nsfOverdraftTransactionsCount60d = default(int), int nsfOverdraftTransactionsCount90d = default(int), int? daysSinceFirstPlaidConnection = default(int?), int? plaidConnectionsCount7d = default(int?), int? plaidConnectionsCount30d = default(int?), int? totalPlaidConnectionsCount = default(int?), bool isSavingsOrMoneyMarketAccount = default(bool), decimal totalCreditTransactionsAmount10d = default(decimal), decimal totalDebitTransactionsAmount10d = default(decimal), decimal? p50CreditTransactionsAmount28d = default(decimal?), decimal? p50DebitTransactionsAmount28d = default(decimal?), decimal? p95CreditTransactionsAmount28d = default(decimal?), decimal? p95DebitTransactionsAmount28d = default(decimal?), int? daysWithNegativeBalanceCount90d = default(int?), decimal? p90EodBalance30d = default(decimal?), decimal? p90EodBalance60d = default(decimal?), decimal? p90EodBalance90d = default(decimal?), decimal? p10EodBalance30d = default(decimal?), decimal? p10EodBalance60d = default(decimal?), decimal? p10EodBalance90d = default(decimal?), decimal? availableBalance = default(decimal?), decimal? currentBalance = default(decimal?), DateTime? balanceLastUpdated = default(DateTime?), int? phoneChangeCount28d = default(int?), int? phoneChangeCount90d = default(int?), int? emailChangeCount28d = default(int?), int? emailChangeCount90d = default(int?), int? addressChangeCount28d = default(int?), int? addressChangeCount90d = default(int?))
        {
            this.UnauthorizedTransactionsCount7d = unauthorizedTransactionsCount7d;
            this.UnauthorizedTransactionsCount30d = unauthorizedTransactionsCount30d;
            this.UnauthorizedTransactionsCount60d = unauthorizedTransactionsCount60d;
            this.UnauthorizedTransactionsCount90d = unauthorizedTransactionsCount90d;
            this.NsfOverdraftTransactionsCount7d = nsfOverdraftTransactionsCount7d;
            this.NsfOverdraftTransactionsCount30d = nsfOverdraftTransactionsCount30d;
            this.NsfOverdraftTransactionsCount60d = nsfOverdraftTransactionsCount60d;
            this.NsfOverdraftTransactionsCount90d = nsfOverdraftTransactionsCount90d;
            this.DaysSinceFirstPlaidConnection = daysSinceFirstPlaidConnection;
            this.PlaidConnectionsCount7d = plaidConnectionsCount7d;
            this.PlaidConnectionsCount30d = plaidConnectionsCount30d;
            this.TotalPlaidConnectionsCount = totalPlaidConnectionsCount;
            this.IsSavingsOrMoneyMarketAccount = isSavingsOrMoneyMarketAccount;
            this.TotalCreditTransactionsAmount10d = totalCreditTransactionsAmount10d;
            this.TotalDebitTransactionsAmount10d = totalDebitTransactionsAmount10d;
            this.P50CreditTransactionsAmount28d = p50CreditTransactionsAmount28d;
            this.P50DebitTransactionsAmount28d = p50DebitTransactionsAmount28d;
            this.P95CreditTransactionsAmount28d = p95CreditTransactionsAmount28d;
            this.P95DebitTransactionsAmount28d = p95DebitTransactionsAmount28d;
            this.DaysWithNegativeBalanceCount90d = daysWithNegativeBalanceCount90d;
            this.P90EodBalance30d = p90EodBalance30d;
            this.P90EodBalance60d = p90EodBalance60d;
            this.P90EodBalance90d = p90EodBalance90d;
            this.P10EodBalance30d = p10EodBalance30d;
            this.P10EodBalance60d = p10EodBalance60d;
            this.P10EodBalance90d = p10EodBalance90d;
            this.AvailableBalance = availableBalance;
            this.CurrentBalance = currentBalance;
            this.BalanceLastUpdated = balanceLastUpdated;
            this.PhoneChangeCount28d = phoneChangeCount28d;
            this.PhoneChangeCount90d = phoneChangeCount90d;
            this.EmailChangeCount28d = emailChangeCount28d;
            this.EmailChangeCount90d = emailChangeCount90d;
            this.AddressChangeCount28d = addressChangeCount28d;
            this.AddressChangeCount90d = addressChangeCount90d;
        }

        /// <summary>
        /// We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 7 days from the account that will be debited.
        /// </summary>
        /// <value>We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 7 days from the account that will be debited.</value>
        [DataMember(Name = "unauthorized_transactions_count_7d", EmitDefaultValue = false)]
        public int UnauthorizedTransactionsCount7d { get; set; }

        /// <summary>
        /// We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 30 days from the account that will be debited.
        /// </summary>
        /// <value>We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 30 days from the account that will be debited.</value>
        [DataMember(Name = "unauthorized_transactions_count_30d", EmitDefaultValue = false)]
        public int UnauthorizedTransactionsCount30d { get; set; }

        /// <summary>
        /// We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 60 days from the account that will be debited.
        /// </summary>
        /// <value>We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 60 days from the account that will be debited.</value>
        [DataMember(Name = "unauthorized_transactions_count_60d", EmitDefaultValue = false)]
        public int UnauthorizedTransactionsCount60d { get; set; }

        /// <summary>
        /// We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 90 days from the account that will be debited.
        /// </summary>
        /// <value>We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 90 days from the account that will be debited.</value>
        [DataMember(Name = "unauthorized_transactions_count_90d", EmitDefaultValue = false)]
        public int UnauthorizedTransactionsCount90d { get; set; }

        /// <summary>
        /// We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 7 days from the account that will be debited.
        /// </summary>
        /// <value>We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 7 days from the account that will be debited.</value>
        [DataMember(Name = "nsf_overdraft_transactions_count_7d", EmitDefaultValue = false)]
        public int NsfOverdraftTransactionsCount7d { get; set; }

        /// <summary>
        /// We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 30 days from the account that will be debited.
        /// </summary>
        /// <value>We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 30 days from the account that will be debited.</value>
        [DataMember(Name = "nsf_overdraft_transactions_count_30d", EmitDefaultValue = false)]
        public int NsfOverdraftTransactionsCount30d { get; set; }

        /// <summary>
        /// We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 60 days from the account that will be debited.
        /// </summary>
        /// <value>We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 60 days from the account that will be debited.</value>
        [DataMember(Name = "nsf_overdraft_transactions_count_60d", EmitDefaultValue = false)]
        public int NsfOverdraftTransactionsCount60d { get; set; }

        /// <summary>
        /// We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 90 days from the account that will be debited.
        /// </summary>
        /// <value>We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 90 days from the account that will be debited.</value>
        [DataMember(Name = "nsf_overdraft_transactions_count_90d", EmitDefaultValue = false)]
        public int NsfOverdraftTransactionsCount90d { get; set; }

        /// <summary>
        /// The number of days since the first time the Item was connected to an application via Plaid
        /// </summary>
        /// <value>The number of days since the first time the Item was connected to an application via Plaid</value>
        [DataMember(Name = "days_since_first_plaid_connection", EmitDefaultValue = true)]
        public int? DaysSinceFirstPlaidConnection { get; set; }

        /// <summary>
        /// The number of times the Item has been connected to applications via Plaid over the past 7 days
        /// </summary>
        /// <value>The number of times the Item has been connected to applications via Plaid over the past 7 days</value>
        [DataMember(Name = "plaid_connections_count_7d", EmitDefaultValue = true)]
        public int? PlaidConnectionsCount7d { get; set; }

        /// <summary>
        /// The number of times the Item has been connected to applications via Plaid over the past 30 days
        /// </summary>
        /// <value>The number of times the Item has been connected to applications via Plaid over the past 30 days</value>
        [DataMember(Name = "plaid_connections_count_30d", EmitDefaultValue = true)]
        public int? PlaidConnectionsCount30d { get; set; }

        /// <summary>
        /// The total number of times the Item has been connected to applications via Plaid
        /// </summary>
        /// <value>The total number of times the Item has been connected to applications via Plaid</value>
        [DataMember(Name = "total_plaid_connections_count", EmitDefaultValue = true)]
        public int? TotalPlaidConnectionsCount { get; set; }

        /// <summary>
        /// Indicates if the ACH transaction funding account is a savings/money market account
        /// </summary>
        /// <value>Indicates if the ACH transaction funding account is a savings/money market account</value>
        [DataMember(Name = "is_savings_or_money_market_account", EmitDefaultValue = true)]
        public bool IsSavingsOrMoneyMarketAccount { get; set; }

        /// <summary>
        /// The total credit (inflow) transaction amount over the past 10 days from the account that will be debited
        /// </summary>
        /// <value>The total credit (inflow) transaction amount over the past 10 days from the account that will be debited</value>
        [DataMember(Name = "total_credit_transactions_amount_10d", EmitDefaultValue = false)]
        public decimal TotalCreditTransactionsAmount10d { get; set; }

        /// <summary>
        /// The total debit (outflow) transaction amount over the past 10 days from the account that will be debited
        /// </summary>
        /// <value>The total debit (outflow) transaction amount over the past 10 days from the account that will be debited</value>
        [DataMember(Name = "total_debit_transactions_amount_10d", EmitDefaultValue = false)]
        public decimal TotalDebitTransactionsAmount10d { get; set; }

        /// <summary>
        /// The 50th percentile of all credit (inflow) transaction amounts over the past 28 days from the account that will be debited
        /// </summary>
        /// <value>The 50th percentile of all credit (inflow) transaction amounts over the past 28 days from the account that will be debited</value>
        [DataMember(Name = "p50_credit_transactions_amount_28d", EmitDefaultValue = true)]
        public decimal? P50CreditTransactionsAmount28d { get; set; }

        /// <summary>
        /// The 50th percentile of all debit (outflow) transaction amounts over the past 28 days from the account that will be debited
        /// </summary>
        /// <value>The 50th percentile of all debit (outflow) transaction amounts over the past 28 days from the account that will be debited</value>
        [DataMember(Name = "p50_debit_transactions_amount_28d", EmitDefaultValue = true)]
        public decimal? P50DebitTransactionsAmount28d { get; set; }

        /// <summary>
        /// The 95th percentile of all credit (inflow) transaction amounts over the past 28 days from the account that will be debited
        /// </summary>
        /// <value>The 95th percentile of all credit (inflow) transaction amounts over the past 28 days from the account that will be debited</value>
        [DataMember(Name = "p95_credit_transactions_amount_28d", EmitDefaultValue = true)]
        public decimal? P95CreditTransactionsAmount28d { get; set; }

        /// <summary>
        /// The 95th percentile of all debit (outflow) transaction amounts over the past 28 days from the account that will be debited
        /// </summary>
        /// <value>The 95th percentile of all debit (outflow) transaction amounts over the past 28 days from the account that will be debited</value>
        [DataMember(Name = "p95_debit_transactions_amount_28d", EmitDefaultValue = true)]
        public decimal? P95DebitTransactionsAmount28d { get; set; }

        /// <summary>
        /// The number of days within the past 90 days when the account that will be debited had a negative end-of-day available balance
        /// </summary>
        /// <value>The number of days within the past 90 days when the account that will be debited had a negative end-of-day available balance</value>
        [DataMember(Name = "days_with_negative_balance_count_90d", EmitDefaultValue = true)]
        public int? DaysWithNegativeBalanceCount90d { get; set; }

        /// <summary>
        /// The 90th percentile of the end-of-day available balance over the past 30 days of the account that will be debited
        /// </summary>
        /// <value>The 90th percentile of the end-of-day available balance over the past 30 days of the account that will be debited</value>
        [DataMember(Name = "p90_eod_balance_30d", EmitDefaultValue = true)]
        public decimal? P90EodBalance30d { get; set; }

        /// <summary>
        /// The 90th percentile of the end-of-day available balance over the past 60 days of the account that will be debited
        /// </summary>
        /// <value>The 90th percentile of the end-of-day available balance over the past 60 days of the account that will be debited</value>
        [DataMember(Name = "p90_eod_balance_60d", EmitDefaultValue = true)]
        public decimal? P90EodBalance60d { get; set; }

        /// <summary>
        /// The 90th percentile of the end-of-day available balance over the past 90 days of the account that will be debited
        /// </summary>
        /// <value>The 90th percentile of the end-of-day available balance over the past 90 days of the account that will be debited</value>
        [DataMember(Name = "p90_eod_balance_90d", EmitDefaultValue = true)]
        public decimal? P90EodBalance90d { get; set; }

        /// <summary>
        /// The 10th percentile of the end-of-day available balance over the past 30 days of the account that will be debited
        /// </summary>
        /// <value>The 10th percentile of the end-of-day available balance over the past 30 days of the account that will be debited</value>
        [DataMember(Name = "p10_eod_balance_30d", EmitDefaultValue = true)]
        public decimal? P10EodBalance30d { get; set; }

        /// <summary>
        /// The 10th percentile of the end-of-day available balance over the past 60 days of the account that will be debited
        /// </summary>
        /// <value>The 10th percentile of the end-of-day available balance over the past 60 days of the account that will be debited</value>
        [DataMember(Name = "p10_eod_balance_60d", EmitDefaultValue = true)]
        public decimal? P10EodBalance60d { get; set; }

        /// <summary>
        /// The 10th percentile of the end-of-day available balance over the past 90 days of the account that will be debited
        /// </summary>
        /// <value>The 10th percentile of the end-of-day available balance over the past 90 days of the account that will be debited</value>
        [DataMember(Name = "p10_eod_balance_90d", EmitDefaultValue = true)]
        public decimal? P10EodBalance90d { get; set; }

        /// <summary>
        /// Available balance, as of the &#x60;balance_last_updated&#x60; time. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.
        /// </summary>
        /// <value>Available balance, as of the &#x60;balance_last_updated&#x60; time. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.</value>
        [DataMember(Name = "available_balance", EmitDefaultValue = true)]
        public decimal? AvailableBalance { get; set; }

        /// <summary>
        /// Current balance, as of the &#x60;balance_last_updated&#x60; time. The current balance is the total amount of funds in the account.
        /// </summary>
        /// <value>Current balance, as of the &#x60;balance_last_updated&#x60; time. The current balance is the total amount of funds in the account.</value>
        [DataMember(Name = "current_balance", EmitDefaultValue = true)]
        public decimal? CurrentBalance { get; set; }

        /// <summary>
        /// Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DDTHH:mm:ssZ) indicating the last time that the balance for the given account has been updated.
        /// </summary>
        /// <value>Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DDTHH:mm:ssZ) indicating the last time that the balance for the given account has been updated.</value>
        [DataMember(Name = "balance_last_updated", EmitDefaultValue = true)]
        public DateTime? BalanceLastUpdated { get; set; }

        /// <summary>
        /// The number of times the account&#39;s phone numbers on file have changed over the past 28 days
        /// </summary>
        /// <value>The number of times the account&#39;s phone numbers on file have changed over the past 28 days</value>
        [DataMember(Name = "phone_change_count_28d", EmitDefaultValue = true)]
        public int? PhoneChangeCount28d { get; set; }

        /// <summary>
        /// The number of times the account&#39;s phone numbers on file have changed over the past 90 days
        /// </summary>
        /// <value>The number of times the account&#39;s phone numbers on file have changed over the past 90 days</value>
        [DataMember(Name = "phone_change_count_90d", EmitDefaultValue = true)]
        public int? PhoneChangeCount90d { get; set; }

        /// <summary>
        /// The number of times the account&#39;s email addresses on file have changed over the past 28 days
        /// </summary>
        /// <value>The number of times the account&#39;s email addresses on file have changed over the past 28 days</value>
        [DataMember(Name = "email_change_count_28d", EmitDefaultValue = true)]
        public int? EmailChangeCount28d { get; set; }

        /// <summary>
        /// The number of times the account&#39;s email addresses on file have changed over the past 90 days
        /// </summary>
        /// <value>The number of times the account&#39;s email addresses on file have changed over the past 90 days</value>
        [DataMember(Name = "email_change_count_90d", EmitDefaultValue = true)]
        public int? EmailChangeCount90d { get; set; }

        /// <summary>
        /// The number of times the account&#39;s addresses on file have changed over the past 28 days
        /// </summary>
        /// <value>The number of times the account&#39;s addresses on file have changed over the past 28 days</value>
        [DataMember(Name = "address_change_count_28d", EmitDefaultValue = true)]
        public int? AddressChangeCount28d { get; set; }

        /// <summary>
        /// The number of times the account&#39;s addresses on file have changed over the past 90 days
        /// </summary>
        /// <value>The number of times the account&#39;s addresses on file have changed over the past 90 days</value>
        [DataMember(Name = "address_change_count_90d", EmitDefaultValue = true)]
        public int? AddressChangeCount90d { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SignalEvaluateCoreAttributes {\n");
            sb.Append("  UnauthorizedTransactionsCount7d: ").Append(UnauthorizedTransactionsCount7d).Append("\n");
            sb.Append("  UnauthorizedTransactionsCount30d: ").Append(UnauthorizedTransactionsCount30d).Append("\n");
            sb.Append("  UnauthorizedTransactionsCount60d: ").Append(UnauthorizedTransactionsCount60d).Append("\n");
            sb.Append("  UnauthorizedTransactionsCount90d: ").Append(UnauthorizedTransactionsCount90d).Append("\n");
            sb.Append("  NsfOverdraftTransactionsCount7d: ").Append(NsfOverdraftTransactionsCount7d).Append("\n");
            sb.Append("  NsfOverdraftTransactionsCount30d: ").Append(NsfOverdraftTransactionsCount30d).Append("\n");
            sb.Append("  NsfOverdraftTransactionsCount60d: ").Append(NsfOverdraftTransactionsCount60d).Append("\n");
            sb.Append("  NsfOverdraftTransactionsCount90d: ").Append(NsfOverdraftTransactionsCount90d).Append("\n");
            sb.Append("  DaysSinceFirstPlaidConnection: ").Append(DaysSinceFirstPlaidConnection).Append("\n");
            sb.Append("  PlaidConnectionsCount7d: ").Append(PlaidConnectionsCount7d).Append("\n");
            sb.Append("  PlaidConnectionsCount30d: ").Append(PlaidConnectionsCount30d).Append("\n");
            sb.Append("  TotalPlaidConnectionsCount: ").Append(TotalPlaidConnectionsCount).Append("\n");
            sb.Append("  IsSavingsOrMoneyMarketAccount: ").Append(IsSavingsOrMoneyMarketAccount).Append("\n");
            sb.Append("  TotalCreditTransactionsAmount10d: ").Append(TotalCreditTransactionsAmount10d).Append("\n");
            sb.Append("  TotalDebitTransactionsAmount10d: ").Append(TotalDebitTransactionsAmount10d).Append("\n");
            sb.Append("  P50CreditTransactionsAmount28d: ").Append(P50CreditTransactionsAmount28d).Append("\n");
            sb.Append("  P50DebitTransactionsAmount28d: ").Append(P50DebitTransactionsAmount28d).Append("\n");
            sb.Append("  P95CreditTransactionsAmount28d: ").Append(P95CreditTransactionsAmount28d).Append("\n");
            sb.Append("  P95DebitTransactionsAmount28d: ").Append(P95DebitTransactionsAmount28d).Append("\n");
            sb.Append("  DaysWithNegativeBalanceCount90d: ").Append(DaysWithNegativeBalanceCount90d).Append("\n");
            sb.Append("  P90EodBalance30d: ").Append(P90EodBalance30d).Append("\n");
            sb.Append("  P90EodBalance60d: ").Append(P90EodBalance60d).Append("\n");
            sb.Append("  P90EodBalance90d: ").Append(P90EodBalance90d).Append("\n");
            sb.Append("  P10EodBalance30d: ").Append(P10EodBalance30d).Append("\n");
            sb.Append("  P10EodBalance60d: ").Append(P10EodBalance60d).Append("\n");
            sb.Append("  P10EodBalance90d: ").Append(P10EodBalance90d).Append("\n");
            sb.Append("  AvailableBalance: ").Append(AvailableBalance).Append("\n");
            sb.Append("  CurrentBalance: ").Append(CurrentBalance).Append("\n");
            sb.Append("  BalanceLastUpdated: ").Append(BalanceLastUpdated).Append("\n");
            sb.Append("  PhoneChangeCount28d: ").Append(PhoneChangeCount28d).Append("\n");
            sb.Append("  PhoneChangeCount90d: ").Append(PhoneChangeCount90d).Append("\n");
            sb.Append("  EmailChangeCount28d: ").Append(EmailChangeCount28d).Append("\n");
            sb.Append("  EmailChangeCount90d: ").Append(EmailChangeCount90d).Append("\n");
            sb.Append("  AddressChangeCount28d: ").Append(AddressChangeCount28d).Append("\n");
            sb.Append("  AddressChangeCount90d: ").Append(AddressChangeCount90d).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SignalEvaluateCoreAttributes);
        }

        /// <summary>
        /// Returns true if SignalEvaluateCoreAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of SignalEvaluateCoreAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignalEvaluateCoreAttributes input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UnauthorizedTransactionsCount7d == input.UnauthorizedTransactionsCount7d ||
                    this.UnauthorizedTransactionsCount7d.Equals(input.UnauthorizedTransactionsCount7d)
                ) && 
                (
                    this.UnauthorizedTransactionsCount30d == input.UnauthorizedTransactionsCount30d ||
                    this.UnauthorizedTransactionsCount30d.Equals(input.UnauthorizedTransactionsCount30d)
                ) && 
                (
                    this.UnauthorizedTransactionsCount60d == input.UnauthorizedTransactionsCount60d ||
                    this.UnauthorizedTransactionsCount60d.Equals(input.UnauthorizedTransactionsCount60d)
                ) && 
                (
                    this.UnauthorizedTransactionsCount90d == input.UnauthorizedTransactionsCount90d ||
                    this.UnauthorizedTransactionsCount90d.Equals(input.UnauthorizedTransactionsCount90d)
                ) && 
                (
                    this.NsfOverdraftTransactionsCount7d == input.NsfOverdraftTransactionsCount7d ||
                    this.NsfOverdraftTransactionsCount7d.Equals(input.NsfOverdraftTransactionsCount7d)
                ) && 
                (
                    this.NsfOverdraftTransactionsCount30d == input.NsfOverdraftTransactionsCount30d ||
                    this.NsfOverdraftTransactionsCount30d.Equals(input.NsfOverdraftTransactionsCount30d)
                ) && 
                (
                    this.NsfOverdraftTransactionsCount60d == input.NsfOverdraftTransactionsCount60d ||
                    this.NsfOverdraftTransactionsCount60d.Equals(input.NsfOverdraftTransactionsCount60d)
                ) && 
                (
                    this.NsfOverdraftTransactionsCount90d == input.NsfOverdraftTransactionsCount90d ||
                    this.NsfOverdraftTransactionsCount90d.Equals(input.NsfOverdraftTransactionsCount90d)
                ) && 
                (
                    this.DaysSinceFirstPlaidConnection == input.DaysSinceFirstPlaidConnection ||
                    (this.DaysSinceFirstPlaidConnection != null &&
                    this.DaysSinceFirstPlaidConnection.Equals(input.DaysSinceFirstPlaidConnection))
                ) && 
                (
                    this.PlaidConnectionsCount7d == input.PlaidConnectionsCount7d ||
                    (this.PlaidConnectionsCount7d != null &&
                    this.PlaidConnectionsCount7d.Equals(input.PlaidConnectionsCount7d))
                ) && 
                (
                    this.PlaidConnectionsCount30d == input.PlaidConnectionsCount30d ||
                    (this.PlaidConnectionsCount30d != null &&
                    this.PlaidConnectionsCount30d.Equals(input.PlaidConnectionsCount30d))
                ) && 
                (
                    this.TotalPlaidConnectionsCount == input.TotalPlaidConnectionsCount ||
                    (this.TotalPlaidConnectionsCount != null &&
                    this.TotalPlaidConnectionsCount.Equals(input.TotalPlaidConnectionsCount))
                ) && 
                (
                    this.IsSavingsOrMoneyMarketAccount == input.IsSavingsOrMoneyMarketAccount ||
                    this.IsSavingsOrMoneyMarketAccount.Equals(input.IsSavingsOrMoneyMarketAccount)
                ) && 
                (
                    this.TotalCreditTransactionsAmount10d == input.TotalCreditTransactionsAmount10d ||
                    this.TotalCreditTransactionsAmount10d.Equals(input.TotalCreditTransactionsAmount10d)
                ) && 
                (
                    this.TotalDebitTransactionsAmount10d == input.TotalDebitTransactionsAmount10d ||
                    this.TotalDebitTransactionsAmount10d.Equals(input.TotalDebitTransactionsAmount10d)
                ) && 
                (
                    this.P50CreditTransactionsAmount28d == input.P50CreditTransactionsAmount28d ||
                    (this.P50CreditTransactionsAmount28d != null &&
                    this.P50CreditTransactionsAmount28d.Equals(input.P50CreditTransactionsAmount28d))
                ) && 
                (
                    this.P50DebitTransactionsAmount28d == input.P50DebitTransactionsAmount28d ||
                    (this.P50DebitTransactionsAmount28d != null &&
                    this.P50DebitTransactionsAmount28d.Equals(input.P50DebitTransactionsAmount28d))
                ) && 
                (
                    this.P95CreditTransactionsAmount28d == input.P95CreditTransactionsAmount28d ||
                    (this.P95CreditTransactionsAmount28d != null &&
                    this.P95CreditTransactionsAmount28d.Equals(input.P95CreditTransactionsAmount28d))
                ) && 
                (
                    this.P95DebitTransactionsAmount28d == input.P95DebitTransactionsAmount28d ||
                    (this.P95DebitTransactionsAmount28d != null &&
                    this.P95DebitTransactionsAmount28d.Equals(input.P95DebitTransactionsAmount28d))
                ) && 
                (
                    this.DaysWithNegativeBalanceCount90d == input.DaysWithNegativeBalanceCount90d ||
                    (this.DaysWithNegativeBalanceCount90d != null &&
                    this.DaysWithNegativeBalanceCount90d.Equals(input.DaysWithNegativeBalanceCount90d))
                ) && 
                (
                    this.P90EodBalance30d == input.P90EodBalance30d ||
                    (this.P90EodBalance30d != null &&
                    this.P90EodBalance30d.Equals(input.P90EodBalance30d))
                ) && 
                (
                    this.P90EodBalance60d == input.P90EodBalance60d ||
                    (this.P90EodBalance60d != null &&
                    this.P90EodBalance60d.Equals(input.P90EodBalance60d))
                ) && 
                (
                    this.P90EodBalance90d == input.P90EodBalance90d ||
                    (this.P90EodBalance90d != null &&
                    this.P90EodBalance90d.Equals(input.P90EodBalance90d))
                ) && 
                (
                    this.P10EodBalance30d == input.P10EodBalance30d ||
                    (this.P10EodBalance30d != null &&
                    this.P10EodBalance30d.Equals(input.P10EodBalance30d))
                ) && 
                (
                    this.P10EodBalance60d == input.P10EodBalance60d ||
                    (this.P10EodBalance60d != null &&
                    this.P10EodBalance60d.Equals(input.P10EodBalance60d))
                ) && 
                (
                    this.P10EodBalance90d == input.P10EodBalance90d ||
                    (this.P10EodBalance90d != null &&
                    this.P10EodBalance90d.Equals(input.P10EodBalance90d))
                ) && 
                (
                    this.AvailableBalance == input.AvailableBalance ||
                    (this.AvailableBalance != null &&
                    this.AvailableBalance.Equals(input.AvailableBalance))
                ) && 
                (
                    this.CurrentBalance == input.CurrentBalance ||
                    (this.CurrentBalance != null &&
                    this.CurrentBalance.Equals(input.CurrentBalance))
                ) && 
                (
                    this.BalanceLastUpdated == input.BalanceLastUpdated ||
                    (this.BalanceLastUpdated != null &&
                    this.BalanceLastUpdated.Equals(input.BalanceLastUpdated))
                ) && 
                (
                    this.PhoneChangeCount28d == input.PhoneChangeCount28d ||
                    (this.PhoneChangeCount28d != null &&
                    this.PhoneChangeCount28d.Equals(input.PhoneChangeCount28d))
                ) && 
                (
                    this.PhoneChangeCount90d == input.PhoneChangeCount90d ||
                    (this.PhoneChangeCount90d != null &&
                    this.PhoneChangeCount90d.Equals(input.PhoneChangeCount90d))
                ) && 
                (
                    this.EmailChangeCount28d == input.EmailChangeCount28d ||
                    (this.EmailChangeCount28d != null &&
                    this.EmailChangeCount28d.Equals(input.EmailChangeCount28d))
                ) && 
                (
                    this.EmailChangeCount90d == input.EmailChangeCount90d ||
                    (this.EmailChangeCount90d != null &&
                    this.EmailChangeCount90d.Equals(input.EmailChangeCount90d))
                ) && 
                (
                    this.AddressChangeCount28d == input.AddressChangeCount28d ||
                    (this.AddressChangeCount28d != null &&
                    this.AddressChangeCount28d.Equals(input.AddressChangeCount28d))
                ) && 
                (
                    this.AddressChangeCount90d == input.AddressChangeCount90d ||
                    (this.AddressChangeCount90d != null &&
                    this.AddressChangeCount90d.Equals(input.AddressChangeCount90d))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.UnauthorizedTransactionsCount7d.GetHashCode();
                hashCode = (hashCode * 59) + this.UnauthorizedTransactionsCount30d.GetHashCode();
                hashCode = (hashCode * 59) + this.UnauthorizedTransactionsCount60d.GetHashCode();
                hashCode = (hashCode * 59) + this.UnauthorizedTransactionsCount90d.GetHashCode();
                hashCode = (hashCode * 59) + this.NsfOverdraftTransactionsCount7d.GetHashCode();
                hashCode = (hashCode * 59) + this.NsfOverdraftTransactionsCount30d.GetHashCode();
                hashCode = (hashCode * 59) + this.NsfOverdraftTransactionsCount60d.GetHashCode();
                hashCode = (hashCode * 59) + this.NsfOverdraftTransactionsCount90d.GetHashCode();
                if (this.DaysSinceFirstPlaidConnection != null)
                {
                    hashCode = (hashCode * 59) + this.DaysSinceFirstPlaidConnection.GetHashCode();
                }
                if (this.PlaidConnectionsCount7d != null)
                {
                    hashCode = (hashCode * 59) + this.PlaidConnectionsCount7d.GetHashCode();
                }
                if (this.PlaidConnectionsCount30d != null)
                {
                    hashCode = (hashCode * 59) + this.PlaidConnectionsCount30d.GetHashCode();
                }
                if (this.TotalPlaidConnectionsCount != null)
                {
                    hashCode = (hashCode * 59) + this.TotalPlaidConnectionsCount.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsSavingsOrMoneyMarketAccount.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalCreditTransactionsAmount10d.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalDebitTransactionsAmount10d.GetHashCode();
                if (this.P50CreditTransactionsAmount28d != null)
                {
                    hashCode = (hashCode * 59) + this.P50CreditTransactionsAmount28d.GetHashCode();
                }
                if (this.P50DebitTransactionsAmount28d != null)
                {
                    hashCode = (hashCode * 59) + this.P50DebitTransactionsAmount28d.GetHashCode();
                }
                if (this.P95CreditTransactionsAmount28d != null)
                {
                    hashCode = (hashCode * 59) + this.P95CreditTransactionsAmount28d.GetHashCode();
                }
                if (this.P95DebitTransactionsAmount28d != null)
                {
                    hashCode = (hashCode * 59) + this.P95DebitTransactionsAmount28d.GetHashCode();
                }
                if (this.DaysWithNegativeBalanceCount90d != null)
                {
                    hashCode = (hashCode * 59) + this.DaysWithNegativeBalanceCount90d.GetHashCode();
                }
                if (this.P90EodBalance30d != null)
                {
                    hashCode = (hashCode * 59) + this.P90EodBalance30d.GetHashCode();
                }
                if (this.P90EodBalance60d != null)
                {
                    hashCode = (hashCode * 59) + this.P90EodBalance60d.GetHashCode();
                }
                if (this.P90EodBalance90d != null)
                {
                    hashCode = (hashCode * 59) + this.P90EodBalance90d.GetHashCode();
                }
                if (this.P10EodBalance30d != null)
                {
                    hashCode = (hashCode * 59) + this.P10EodBalance30d.GetHashCode();
                }
                if (this.P10EodBalance60d != null)
                {
                    hashCode = (hashCode * 59) + this.P10EodBalance60d.GetHashCode();
                }
                if (this.P10EodBalance90d != null)
                {
                    hashCode = (hashCode * 59) + this.P10EodBalance90d.GetHashCode();
                }
                if (this.AvailableBalance != null)
                {
                    hashCode = (hashCode * 59) + this.AvailableBalance.GetHashCode();
                }
                if (this.CurrentBalance != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentBalance.GetHashCode();
                }
                if (this.BalanceLastUpdated != null)
                {
                    hashCode = (hashCode * 59) + this.BalanceLastUpdated.GetHashCode();
                }
                if (this.PhoneChangeCount28d != null)
                {
                    hashCode = (hashCode * 59) + this.PhoneChangeCount28d.GetHashCode();
                }
                if (this.PhoneChangeCount90d != null)
                {
                    hashCode = (hashCode * 59) + this.PhoneChangeCount90d.GetHashCode();
                }
                if (this.EmailChangeCount28d != null)
                {
                    hashCode = (hashCode * 59) + this.EmailChangeCount28d.GetHashCode();
                }
                if (this.EmailChangeCount90d != null)
                {
                    hashCode = (hashCode * 59) + this.EmailChangeCount90d.GetHashCode();
                }
                if (this.AddressChangeCount28d != null)
                {
                    hashCode = (hashCode * 59) + this.AddressChangeCount28d.GetHashCode();
                }
                if (this.AddressChangeCount90d != null)
                {
                    hashCode = (hashCode * 59) + this.AddressChangeCount90d.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
