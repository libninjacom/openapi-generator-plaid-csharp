/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Metadata specifically related to valid Payment Initiation standing order configurations for the institution.
    /// </summary>
    [DataContract(Name = "PaymentInitiationStandingOrderMetadata")]
    public partial class PaymentInitiationStandingOrderMetadata : Dictionary<String, Object>, IEquatable<PaymentInitiationStandingOrderMetadata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentInitiationStandingOrderMetadata" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentInitiationStandingOrderMetadata()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentInitiationStandingOrderMetadata" /> class.
        /// </summary>
        /// <param name="supportsStandingOrderEndDate">Indicates whether the institution supports closed-ended standing orders by providing an end date. (required).</param>
        /// <param name="supportsStandingOrderNegativeExecutionDays">This is only applicable to &#x60;MONTHLY&#x60; standing orders. Indicates whether the institution supports negative integers (-1 to -5) for setting up a &#x60;MONTHLY&#x60; standing order relative to the end of the month. (required).</param>
        /// <param name="validStandingOrderIntervals">A list of the valid standing order intervals supported by the institution. (required).</param>
        public PaymentInitiationStandingOrderMetadata(bool supportsStandingOrderEndDate = default(bool), bool supportsStandingOrderNegativeExecutionDays = default(bool), List<PaymentScheduleInterval> validStandingOrderIntervals = default(List<PaymentScheduleInterval>)) : base()
        {
            this.SupportsStandingOrderEndDate = supportsStandingOrderEndDate;
            this.SupportsStandingOrderNegativeExecutionDays = supportsStandingOrderNegativeExecutionDays;
            // to ensure "validStandingOrderIntervals" is required (not null)
            if (validStandingOrderIntervals == null)
            {
                throw new ArgumentNullException("validStandingOrderIntervals is a required property for PaymentInitiationStandingOrderMetadata and cannot be null");
            }
            this.ValidStandingOrderIntervals = validStandingOrderIntervals;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Indicates whether the institution supports closed-ended standing orders by providing an end date.
        /// </summary>
        /// <value>Indicates whether the institution supports closed-ended standing orders by providing an end date.</value>
        [DataMember(Name = "supports_standing_order_end_date", IsRequired = true, EmitDefaultValue = true)]
        public bool SupportsStandingOrderEndDate { get; set; }

        /// <summary>
        /// This is only applicable to &#x60;MONTHLY&#x60; standing orders. Indicates whether the institution supports negative integers (-1 to -5) for setting up a &#x60;MONTHLY&#x60; standing order relative to the end of the month.
        /// </summary>
        /// <value>This is only applicable to &#x60;MONTHLY&#x60; standing orders. Indicates whether the institution supports negative integers (-1 to -5) for setting up a &#x60;MONTHLY&#x60; standing order relative to the end of the month.</value>
        [DataMember(Name = "supports_standing_order_negative_execution_days", IsRequired = true, EmitDefaultValue = true)]
        public bool SupportsStandingOrderNegativeExecutionDays { get; set; }

        /// <summary>
        /// A list of the valid standing order intervals supported by the institution.
        /// </summary>
        /// <value>A list of the valid standing order intervals supported by the institution.</value>
        [DataMember(Name = "valid_standing_order_intervals", IsRequired = true, EmitDefaultValue = false)]
        public List<PaymentScheduleInterval> ValidStandingOrderIntervals { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentInitiationStandingOrderMetadata {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  SupportsStandingOrderEndDate: ").Append(SupportsStandingOrderEndDate).Append("\n");
            sb.Append("  SupportsStandingOrderNegativeExecutionDays: ").Append(SupportsStandingOrderNegativeExecutionDays).Append("\n");
            sb.Append("  ValidStandingOrderIntervals: ").Append(ValidStandingOrderIntervals).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentInitiationStandingOrderMetadata);
        }

        /// <summary>
        /// Returns true if PaymentInitiationStandingOrderMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentInitiationStandingOrderMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentInitiationStandingOrderMetadata input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.SupportsStandingOrderEndDate == input.SupportsStandingOrderEndDate ||
                    this.SupportsStandingOrderEndDate.Equals(input.SupportsStandingOrderEndDate)
                ) && base.Equals(input) && 
                (
                    this.SupportsStandingOrderNegativeExecutionDays == input.SupportsStandingOrderNegativeExecutionDays ||
                    this.SupportsStandingOrderNegativeExecutionDays.Equals(input.SupportsStandingOrderNegativeExecutionDays)
                ) && base.Equals(input) && 
                (
                    this.ValidStandingOrderIntervals == input.ValidStandingOrderIntervals ||
                    this.ValidStandingOrderIntervals != null &&
                    input.ValidStandingOrderIntervals != null &&
                    this.ValidStandingOrderIntervals.SequenceEqual(input.ValidStandingOrderIntervals)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                hashCode = (hashCode * 59) + this.SupportsStandingOrderEndDate.GetHashCode();
                hashCode = (hashCode * 59) + this.SupportsStandingOrderNegativeExecutionDays.GetHashCode();
                if (this.ValidStandingOrderIntervals != null)
                {
                    hashCode = (hashCode * 59) + this.ValidStandingOrderIntervals.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
