/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// An object containing liability accounts
    /// </summary>
    [DataContract(Name = "LiabilitiesObject")]
    public partial class LiabilitiesObject : Dictionary<String, Object>, IEquatable<LiabilitiesObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LiabilitiesObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LiabilitiesObject()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="LiabilitiesObject" /> class.
        /// </summary>
        /// <param name="credit">The credit accounts returned. (required).</param>
        /// <param name="mortgage">The mortgage accounts returned. (required).</param>
        /// <param name="student">The student loan accounts returned. (required).</param>
        public LiabilitiesObject(List<CreditCardLiability> credit = default(List<CreditCardLiability>), List<MortgageLiability> mortgage = default(List<MortgageLiability>), List<StudentLoan> student = default(List<StudentLoan>)) : base()
        {
            // to ensure "credit" is required (not null)
            if (credit == null)
            {
                throw new ArgumentNullException("credit is a required property for LiabilitiesObject and cannot be null");
            }
            this.Credit = credit;
            // to ensure "mortgage" is required (not null)
            if (mortgage == null)
            {
                throw new ArgumentNullException("mortgage is a required property for LiabilitiesObject and cannot be null");
            }
            this.Mortgage = mortgage;
            // to ensure "student" is required (not null)
            if (student == null)
            {
                throw new ArgumentNullException("student is a required property for LiabilitiesObject and cannot be null");
            }
            this.Student = student;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The credit accounts returned.
        /// </summary>
        /// <value>The credit accounts returned.</value>
        [DataMember(Name = "credit", IsRequired = true, EmitDefaultValue = true)]
        public List<CreditCardLiability> Credit { get; set; }

        /// <summary>
        /// The mortgage accounts returned.
        /// </summary>
        /// <value>The mortgage accounts returned.</value>
        [DataMember(Name = "mortgage", IsRequired = true, EmitDefaultValue = true)]
        public List<MortgageLiability> Mortgage { get; set; }

        /// <summary>
        /// The student loan accounts returned.
        /// </summary>
        /// <value>The student loan accounts returned.</value>
        [DataMember(Name = "student", IsRequired = true, EmitDefaultValue = true)]
        public List<StudentLoan> Student { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LiabilitiesObject {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Credit: ").Append(Credit).Append("\n");
            sb.Append("  Mortgage: ").Append(Mortgage).Append("\n");
            sb.Append("  Student: ").Append(Student).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LiabilitiesObject);
        }

        /// <summary>
        /// Returns true if LiabilitiesObject instances are equal
        /// </summary>
        /// <param name="input">Instance of LiabilitiesObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LiabilitiesObject input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Credit == input.Credit ||
                    this.Credit != null &&
                    input.Credit != null &&
                    this.Credit.SequenceEqual(input.Credit)
                ) && base.Equals(input) && 
                (
                    this.Mortgage == input.Mortgage ||
                    this.Mortgage != null &&
                    input.Mortgage != null &&
                    this.Mortgage.SequenceEqual(input.Mortgage)
                ) && base.Equals(input) && 
                (
                    this.Student == input.Student ||
                    this.Student != null &&
                    input.Student != null &&
                    this.Student.SequenceEqual(input.Student)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Credit != null)
                {
                    hashCode = (hashCode * 59) + this.Credit.GetHashCode();
                }
                if (this.Mortgage != null)
                {
                    hashCode = (hashCode * 59) + this.Mortgage.GetHashCode();
                }
                if (this.Student != null)
                {
                    hashCode = (hashCode * 59) + this.Student.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
