/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Metadata about the Item.
    /// </summary>
    [DataContract(Name = "Item")]
    public partial class Item : Dictionary<String, Object>, IEquatable<Item>, IValidatableObject
    {
        /// <summary>
        /// Indicates whether an Item requires user interaction to be updated, which can be the case for Items with some forms of two-factor authentication.  &#x60;background&#x60; - Item can be updated in the background  &#x60;user_present_required&#x60; - Item requires user interaction to be updated
        /// </summary>
        /// <value>Indicates whether an Item requires user interaction to be updated, which can be the case for Items with some forms of two-factor authentication.  &#x60;background&#x60; - Item can be updated in the background  &#x60;user_present_required&#x60; - Item requires user interaction to be updated</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UpdateTypeEnum
        {
            /// <summary>
            /// Enum Background for value: background
            /// </summary>
            [EnumMember(Value = "background")]
            Background = 1,

            /// <summary>
            /// Enum UserPresentRequired for value: user_present_required
            /// </summary>
            [EnumMember(Value = "user_present_required")]
            UserPresentRequired = 2

        }


        /// <summary>
        /// Indicates whether an Item requires user interaction to be updated, which can be the case for Items with some forms of two-factor authentication.  &#x60;background&#x60; - Item can be updated in the background  &#x60;user_present_required&#x60; - Item requires user interaction to be updated
        /// </summary>
        /// <value>Indicates whether an Item requires user interaction to be updated, which can be the case for Items with some forms of two-factor authentication.  &#x60;background&#x60; - Item can be updated in the background  &#x60;user_present_required&#x60; - Item requires user interaction to be updated</value>
        [DataMember(Name = "update_type", IsRequired = true, EmitDefaultValue = false)]
        public UpdateTypeEnum UpdateType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Item" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Item()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Item" /> class.
        /// </summary>
        /// <param name="itemId">The Plaid Item ID. The &#x60;item_id&#x60; is always unique; linking the same account at the same institution twice will result in two Items with different &#x60;item_id&#x60; values. Like all Plaid identifiers, the &#x60;item_id&#x60; is case-sensitive. (required).</param>
        /// <param name="institutionId">The Plaid Institution ID associated with the Item. Field is &#x60;null&#x60; for Items created via Same Day Micro-deposits..</param>
        /// <param name="webhook">The URL registered to receive webhooks for the Item. (required).</param>
        /// <param name="error">error (required).</param>
        /// <param name="availableProducts">A list of products available for the Item that have not yet been accessed. (required).</param>
        /// <param name="billedProducts">A list of products that have been billed for the Item. Note - &#x60;billed_products&#x60; is populated in all environments but only requests in Production are billed.  (required).</param>
        /// <param name="products">A list of authorized products for the Item. .</param>
        /// <param name="consentExpirationTime">The RFC 3339 timestamp after which the consent provided by the end user will expire. Upon consent expiration, the item will enter the &#x60;ITEM_LOGIN_REQUIRED&#x60; error state. To circumvent the &#x60;ITEM_LOGIN_REQUIRED&#x60; error and maintain continuous consent, the end user can reauthenticate via Linkâ€™s update mode in advance of the consent expiration time.  Note - This is only relevant for certain OAuth-based institutions. For all other institutions, this field will be null.  (required).</param>
        /// <param name="updateType">Indicates whether an Item requires user interaction to be updated, which can be the case for Items with some forms of two-factor authentication.  &#x60;background&#x60; - Item can be updated in the background  &#x60;user_present_required&#x60; - Item requires user interaction to be updated (required).</param>
        public Item(string itemId = default(string), string institutionId = default(string), string webhook = default(string), Error error = default(Error), List<Products> availableProducts = default(List<Products>), List<Products> billedProducts = default(List<Products>), List<Products> products = default(List<Products>), DateTime? consentExpirationTime = default(DateTime?), UpdateTypeEnum updateType = default(UpdateTypeEnum)) : base()
        {
            // to ensure "itemId" is required (not null)
            if (itemId == null)
            {
                throw new ArgumentNullException("itemId is a required property for Item and cannot be null");
            }
            this.ItemId = itemId;
            // to ensure "webhook" is required (not null)
            if (webhook == null)
            {
                throw new ArgumentNullException("webhook is a required property for Item and cannot be null");
            }
            this.Webhook = webhook;
            // to ensure "error" is required (not null)
            if (error == null)
            {
                throw new ArgumentNullException("error is a required property for Item and cannot be null");
            }
            this.Error = error;
            // to ensure "availableProducts" is required (not null)
            if (availableProducts == null)
            {
                throw new ArgumentNullException("availableProducts is a required property for Item and cannot be null");
            }
            this.AvailableProducts = availableProducts;
            // to ensure "billedProducts" is required (not null)
            if (billedProducts == null)
            {
                throw new ArgumentNullException("billedProducts is a required property for Item and cannot be null");
            }
            this.BilledProducts = billedProducts;
            // to ensure "consentExpirationTime" is required (not null)
            if (consentExpirationTime == null)
            {
                throw new ArgumentNullException("consentExpirationTime is a required property for Item and cannot be null");
            }
            this.ConsentExpirationTime = consentExpirationTime;
            this.UpdateType = updateType;
            this.InstitutionId = institutionId;
            this.Products = products;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The Plaid Item ID. The &#x60;item_id&#x60; is always unique; linking the same account at the same institution twice will result in two Items with different &#x60;item_id&#x60; values. Like all Plaid identifiers, the &#x60;item_id&#x60; is case-sensitive.
        /// </summary>
        /// <value>The Plaid Item ID. The &#x60;item_id&#x60; is always unique; linking the same account at the same institution twice will result in two Items with different &#x60;item_id&#x60; values. Like all Plaid identifiers, the &#x60;item_id&#x60; is case-sensitive.</value>
        [DataMember(Name = "item_id", IsRequired = true, EmitDefaultValue = false)]
        public string ItemId { get; set; }

        /// <summary>
        /// The Plaid Institution ID associated with the Item. Field is &#x60;null&#x60; for Items created via Same Day Micro-deposits.
        /// </summary>
        /// <value>The Plaid Institution ID associated with the Item. Field is &#x60;null&#x60; for Items created via Same Day Micro-deposits.</value>
        [DataMember(Name = "institution_id", EmitDefaultValue = true)]
        public string InstitutionId { get; set; }

        /// <summary>
        /// The URL registered to receive webhooks for the Item.
        /// </summary>
        /// <value>The URL registered to receive webhooks for the Item.</value>
        [DataMember(Name = "webhook", IsRequired = true, EmitDefaultValue = true)]
        public string Webhook { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", IsRequired = true, EmitDefaultValue = true)]
        public Error Error { get; set; }

        /// <summary>
        /// A list of products available for the Item that have not yet been accessed.
        /// </summary>
        /// <value>A list of products available for the Item that have not yet been accessed.</value>
        [DataMember(Name = "available_products", IsRequired = true, EmitDefaultValue = false)]
        public List<Products> AvailableProducts { get; set; }

        /// <summary>
        /// A list of products that have been billed for the Item. Note - &#x60;billed_products&#x60; is populated in all environments but only requests in Production are billed. 
        /// </summary>
        /// <value>A list of products that have been billed for the Item. Note - &#x60;billed_products&#x60; is populated in all environments but only requests in Production are billed. </value>
        [DataMember(Name = "billed_products", IsRequired = true, EmitDefaultValue = false)]
        public List<Products> BilledProducts { get; set; }

        /// <summary>
        /// A list of authorized products for the Item. 
        /// </summary>
        /// <value>A list of authorized products for the Item. </value>
        [DataMember(Name = "products", EmitDefaultValue = false)]
        public List<Products> Products { get; set; }

        /// <summary>
        /// The RFC 3339 timestamp after which the consent provided by the end user will expire. Upon consent expiration, the item will enter the &#x60;ITEM_LOGIN_REQUIRED&#x60; error state. To circumvent the &#x60;ITEM_LOGIN_REQUIRED&#x60; error and maintain continuous consent, the end user can reauthenticate via Linkâ€™s update mode in advance of the consent expiration time.  Note - This is only relevant for certain OAuth-based institutions. For all other institutions, this field will be null. 
        /// </summary>
        /// <value>The RFC 3339 timestamp after which the consent provided by the end user will expire. Upon consent expiration, the item will enter the &#x60;ITEM_LOGIN_REQUIRED&#x60; error state. To circumvent the &#x60;ITEM_LOGIN_REQUIRED&#x60; error and maintain continuous consent, the end user can reauthenticate via Linkâ€™s update mode in advance of the consent expiration time.  Note - This is only relevant for certain OAuth-based institutions. For all other institutions, this field will be null. </value>
        [DataMember(Name = "consent_expiration_time", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? ConsentExpirationTime { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Item {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  InstitutionId: ").Append(InstitutionId).Append("\n");
            sb.Append("  Webhook: ").Append(Webhook).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  AvailableProducts: ").Append(AvailableProducts).Append("\n");
            sb.Append("  BilledProducts: ").Append(BilledProducts).Append("\n");
            sb.Append("  Products: ").Append(Products).Append("\n");
            sb.Append("  ConsentExpirationTime: ").Append(ConsentExpirationTime).Append("\n");
            sb.Append("  UpdateType: ").Append(UpdateType).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Item);
        }

        /// <summary>
        /// Returns true if Item instances are equal
        /// </summary>
        /// <param name="input">Instance of Item to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Item input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.ItemId == input.ItemId ||
                    (this.ItemId != null &&
                    this.ItemId.Equals(input.ItemId))
                ) && base.Equals(input) && 
                (
                    this.InstitutionId == input.InstitutionId ||
                    (this.InstitutionId != null &&
                    this.InstitutionId.Equals(input.InstitutionId))
                ) && base.Equals(input) && 
                (
                    this.Webhook == input.Webhook ||
                    (this.Webhook != null &&
                    this.Webhook.Equals(input.Webhook))
                ) && base.Equals(input) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && base.Equals(input) && 
                (
                    this.AvailableProducts == input.AvailableProducts ||
                    this.AvailableProducts != null &&
                    input.AvailableProducts != null &&
                    this.AvailableProducts.SequenceEqual(input.AvailableProducts)
                ) && base.Equals(input) && 
                (
                    this.BilledProducts == input.BilledProducts ||
                    this.BilledProducts != null &&
                    input.BilledProducts != null &&
                    this.BilledProducts.SequenceEqual(input.BilledProducts)
                ) && base.Equals(input) && 
                (
                    this.Products == input.Products ||
                    this.Products != null &&
                    input.Products != null &&
                    this.Products.SequenceEqual(input.Products)
                ) && base.Equals(input) && 
                (
                    this.ConsentExpirationTime == input.ConsentExpirationTime ||
                    (this.ConsentExpirationTime != null &&
                    this.ConsentExpirationTime.Equals(input.ConsentExpirationTime))
                ) && base.Equals(input) && 
                (
                    this.UpdateType == input.UpdateType ||
                    this.UpdateType.Equals(input.UpdateType)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ItemId != null)
                {
                    hashCode = (hashCode * 59) + this.ItemId.GetHashCode();
                }
                if (this.InstitutionId != null)
                {
                    hashCode = (hashCode * 59) + this.InstitutionId.GetHashCode();
                }
                if (this.Webhook != null)
                {
                    hashCode = (hashCode * 59) + this.Webhook.GetHashCode();
                }
                if (this.Error != null)
                {
                    hashCode = (hashCode * 59) + this.Error.GetHashCode();
                }
                if (this.AvailableProducts != null)
                {
                    hashCode = (hashCode * 59) + this.AvailableProducts.GetHashCode();
                }
                if (this.BilledProducts != null)
                {
                    hashCode = (hashCode * 59) + this.BilledProducts.GetHashCode();
                }
                if (this.Products != null)
                {
                    hashCode = (hashCode * 59) + this.Products.GetHashCode();
                }
                if (this.ConsentExpirationTime != null)
                {
                    hashCode = (hashCode * 59) + this.ConsentExpirationTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UpdateType.GetHashCode();
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
