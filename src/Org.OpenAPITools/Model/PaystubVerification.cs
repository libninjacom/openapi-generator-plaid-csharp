/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// An object containing details on the paystub&#39;s verification status. This object will only be populated if the [&#x60;income_verification.access_tokens&#x60;](/docs/api/tokens/#link-token-create-request-income-verification-access-tokens) parameter was provided during the &#x60;/link/token/create&#x60; call or if a problem was detected with the information supplied by the user; otherwise it will be &#x60;null&#x60;.
    /// </summary>
    [DataContract(Name = "PaystubVerification")]
    public partial class PaystubVerification : Dictionary<String, Object>, IEquatable<PaystubVerification>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets VerificationStatus
        /// </summary>
        [DataMember(Name = "verification_status", IsRequired = true, EmitDefaultValue = true)]
        public PaystubVerificationStatus VerificationStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaystubVerification" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaystubVerification()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaystubVerification" /> class.
        /// </summary>
        /// <param name="verificationStatus">verificationStatus (required).</param>
        /// <param name="verificationAttributes">verificationAttributes (required).</param>
        public PaystubVerification(PaystubVerificationStatus verificationStatus = default(PaystubVerificationStatus), List<VerificationAttribute> verificationAttributes = default(List<VerificationAttribute>)) : base()
        {
            this.VerificationStatus = verificationStatus;
            // to ensure "verificationAttributes" is required (not null)
            if (verificationAttributes == null)
            {
                throw new ArgumentNullException("verificationAttributes is a required property for PaystubVerification and cannot be null");
            }
            this.VerificationAttributes = verificationAttributes;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets VerificationAttributes
        /// </summary>
        [DataMember(Name = "verification_attributes", IsRequired = true, EmitDefaultValue = false)]
        public List<VerificationAttribute> VerificationAttributes { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaystubVerification {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  VerificationStatus: ").Append(VerificationStatus).Append("\n");
            sb.Append("  VerificationAttributes: ").Append(VerificationAttributes).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaystubVerification);
        }

        /// <summary>
        /// Returns true if PaystubVerification instances are equal
        /// </summary>
        /// <param name="input">Instance of PaystubVerification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaystubVerification input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.VerificationStatus == input.VerificationStatus ||
                    this.VerificationStatus.Equals(input.VerificationStatus)
                ) && base.Equals(input) && 
                (
                    this.VerificationAttributes == input.VerificationAttributes ||
                    this.VerificationAttributes != null &&
                    input.VerificationAttributes != null &&
                    this.VerificationAttributes.SequenceEqual(input.VerificationAttributes)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                hashCode = (hashCode * 59) + this.VerificationStatus.GetHashCode();
                if (this.VerificationAttributes != null)
                {
                    hashCode = (hashCode * 59) + this.VerificationAttributes.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
