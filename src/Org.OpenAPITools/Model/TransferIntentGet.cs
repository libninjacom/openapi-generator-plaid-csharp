/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents a transfer intent within Transfer UI.
    /// </summary>
    [DataContract(Name = "TransferIntentGet")]
    public partial class TransferIntentGet : Dictionary<String, Object>, IEquatable<TransferIntentGet>, IValidatableObject
    {
        /// <summary>
        /// The status of the transfer intent.  - &#x60;PENDING&#x60; – The transfer intent is pending. - &#x60;SUCCEEDED&#x60; – The transfer intent was successfully created. - &#x60;FAILED&#x60; – The transfer intent was unable to be created.
        /// </summary>
        /// <value>The status of the transfer intent.  - &#x60;PENDING&#x60; – The transfer intent is pending. - &#x60;SUCCEEDED&#x60; – The transfer intent was successfully created. - &#x60;FAILED&#x60; – The transfer intent was unable to be created.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING = 1,

            /// <summary>
            /// Enum SUCCEEDED for value: SUCCEEDED
            /// </summary>
            [EnumMember(Value = "SUCCEEDED")]
            SUCCEEDED = 2,

            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 3

        }


        /// <summary>
        /// The status of the transfer intent.  - &#x60;PENDING&#x60; – The transfer intent is pending. - &#x60;SUCCEEDED&#x60; – The transfer intent was successfully created. - &#x60;FAILED&#x60; – The transfer intent was unable to be created.
        /// </summary>
        /// <value>The status of the transfer intent.  - &#x60;PENDING&#x60; – The transfer intent is pending. - &#x60;SUCCEEDED&#x60; – The transfer intent was successfully created. - &#x60;FAILED&#x60; – The transfer intent was unable to be created.</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        ///  A decision regarding the proposed transfer.  &#x60;APPROVED&#x60; – The proposed transfer has received the end user&#39;s consent and has been approved for processing. Plaid has also reviewed the proposed transfer and has approved it for processing.   &#x60;PERMITTED&#x60; – Plaid was unable to fetch the information required to approve or decline the proposed transfer. You may proceed with the transfer, but further review is recommended. Plaid is awaiting further instructions from the client.  &#x60;DECLINED&#x60; – Plaid reviewed the proposed transfer and declined processing. Refer to the &#x60;code&#x60; field in the &#x60;decision_rationale&#x60; object for details. Null value otherwise.
        /// </summary>
        /// <value> A decision regarding the proposed transfer.  &#x60;APPROVED&#x60; – The proposed transfer has received the end user&#39;s consent and has been approved for processing. Plaid has also reviewed the proposed transfer and has approved it for processing.   &#x60;PERMITTED&#x60; – Plaid was unable to fetch the information required to approve or decline the proposed transfer. You may proceed with the transfer, but further review is recommended. Plaid is awaiting further instructions from the client.  &#x60;DECLINED&#x60; – Plaid reviewed the proposed transfer and declined processing. Refer to the &#x60;code&#x60; field in the &#x60;decision_rationale&#x60; object for details. Null value otherwise.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AuthorizationDecisionEnum
        {
            /// <summary>
            /// Enum APPROVED for value: APPROVED
            /// </summary>
            [EnumMember(Value = "APPROVED")]
            APPROVED = 1,

            /// <summary>
            /// Enum PERMITTED for value: PERMITTED
            /// </summary>
            [EnumMember(Value = "PERMITTED")]
            PERMITTED = 2,

            /// <summary>
            /// Enum DECLINED for value: DECLINED
            /// </summary>
            [EnumMember(Value = "DECLINED")]
            DECLINED = 3

        }


        /// <summary>
        ///  A decision regarding the proposed transfer.  &#x60;APPROVED&#x60; – The proposed transfer has received the end user&#39;s consent and has been approved for processing. Plaid has also reviewed the proposed transfer and has approved it for processing.   &#x60;PERMITTED&#x60; – Plaid was unable to fetch the information required to approve or decline the proposed transfer. You may proceed with the transfer, but further review is recommended. Plaid is awaiting further instructions from the client.  &#x60;DECLINED&#x60; – Plaid reviewed the proposed transfer and declined processing. Refer to the &#x60;code&#x60; field in the &#x60;decision_rationale&#x60; object for details. Null value otherwise.
        /// </summary>
        /// <value> A decision regarding the proposed transfer.  &#x60;APPROVED&#x60; – The proposed transfer has received the end user&#39;s consent and has been approved for processing. Plaid has also reviewed the proposed transfer and has approved it for processing.   &#x60;PERMITTED&#x60; – Plaid was unable to fetch the information required to approve or decline the proposed transfer. You may proceed with the transfer, but further review is recommended. Plaid is awaiting further instructions from the client.  &#x60;DECLINED&#x60; – Plaid reviewed the proposed transfer and declined processing. Refer to the &#x60;code&#x60; field in the &#x60;decision_rationale&#x60; object for details. Null value otherwise.</value>
        [DataMember(Name = "authorization_decision", IsRequired = true, EmitDefaultValue = true)]
        public AuthorizationDecisionEnum AuthorizationDecision { get; set; }

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name = "mode", IsRequired = true, EmitDefaultValue = false)]
        public TransferIntentCreateMode Mode { get; set; }

        /// <summary>
        /// Gets or Sets AchClass
        /// </summary>
        [DataMember(Name = "ach_class", IsRequired = true, EmitDefaultValue = false)]
        public ACHClass AchClass { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferIntentGet" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransferIntentGet()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferIntentGet" /> class.
        /// </summary>
        /// <param name="id">Plaid&#39;s unique identifier for a transfer intent object. (required).</param>
        /// <param name="created">The datetime the transfer was created. This will be of the form &#x60;2006-01-02T15:04:05Z&#x60;. (required).</param>
        /// <param name="status">The status of the transfer intent.  - &#x60;PENDING&#x60; – The transfer intent is pending. - &#x60;SUCCEEDED&#x60; – The transfer intent was successfully created. - &#x60;FAILED&#x60; – The transfer intent was unable to be created. (required).</param>
        /// <param name="transferId">Plaid&#39;s unique identifier for the transfer created through the UI. Returned only if the transfer was successfully created. Null value otherwise. (required).</param>
        /// <param name="failureReason">failureReason (required).</param>
        /// <param name="authorizationDecision"> A decision regarding the proposed transfer.  &#x60;APPROVED&#x60; – The proposed transfer has received the end user&#39;s consent and has been approved for processing. Plaid has also reviewed the proposed transfer and has approved it for processing.   &#x60;PERMITTED&#x60; – Plaid was unable to fetch the information required to approve or decline the proposed transfer. You may proceed with the transfer, but further review is recommended. Plaid is awaiting further instructions from the client.  &#x60;DECLINED&#x60; – Plaid reviewed the proposed transfer and declined processing. Refer to the &#x60;code&#x60; field in the &#x60;decision_rationale&#x60; object for details. Null value otherwise. (required).</param>
        /// <param name="authorizationDecisionRationale">authorizationDecisionRationale (required).</param>
        /// <param name="accountId">The Plaid &#x60;account_id&#x60; for the account that will be debited or credited. Returned only if &#x60;account_id&#x60; was set on intent creation..</param>
        /// <param name="originationAccountId">Plaid’s unique identifier for the origination account used for the transfer. (required).</param>
        /// <param name="amount">The amount of the transfer (decimal string with two digits of precision e.g. \&quot;10.00\&quot;). (required).</param>
        /// <param name="mode">mode (required).</param>
        /// <param name="achClass">achClass (required).</param>
        /// <param name="user">user (required).</param>
        /// <param name="description">A description for the underlying transfer. Maximum of 8 characters. (required).</param>
        /// <param name="metadata">The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: - The JSON values must be Strings (no nested JSON objects allowed) - Only ASCII characters may be used - Maximum of 50 key/value pairs - Maximum key length of 40 characters - Maximum value length of 500 characters .</param>
        /// <param name="isoCurrencyCode">The currency of the transfer amount, e.g. \&quot;USD\&quot; (required).</param>
        public TransferIntentGet(string id = default(string), DateTime created = default(DateTime), StatusEnum status = default(StatusEnum), string transferId = default(string), TransferIntentGetFailureReason failureReason = default(TransferIntentGetFailureReason), AuthorizationDecisionEnum authorizationDecision = default(AuthorizationDecisionEnum), TransferAuthorizationDecisionRationale authorizationDecisionRationale = default(TransferAuthorizationDecisionRationale), string accountId = default(string), string originationAccountId = default(string), string amount = default(string), TransferIntentCreateMode mode = default(TransferIntentCreateMode), ACHClass achClass = default(ACHClass), TransferUserInResponse user = default(TransferUserInResponse), string description = default(string), Dictionary<string, string> metadata = default(Dictionary<string, string>), string isoCurrencyCode = default(string)) : base()
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for TransferIntentGet and cannot be null");
            }
            this.Id = id;
            this.Created = created;
            this.Status = status;
            // to ensure "transferId" is required (not null)
            if (transferId == null)
            {
                throw new ArgumentNullException("transferId is a required property for TransferIntentGet and cannot be null");
            }
            this.TransferId = transferId;
            // to ensure "failureReason" is required (not null)
            if (failureReason == null)
            {
                throw new ArgumentNullException("failureReason is a required property for TransferIntentGet and cannot be null");
            }
            this.FailureReason = failureReason;
            this.AuthorizationDecision = authorizationDecision;
            // to ensure "authorizationDecisionRationale" is required (not null)
            if (authorizationDecisionRationale == null)
            {
                throw new ArgumentNullException("authorizationDecisionRationale is a required property for TransferIntentGet and cannot be null");
            }
            this.AuthorizationDecisionRationale = authorizationDecisionRationale;
            // to ensure "originationAccountId" is required (not null)
            if (originationAccountId == null)
            {
                throw new ArgumentNullException("originationAccountId is a required property for TransferIntentGet and cannot be null");
            }
            this.OriginationAccountId = originationAccountId;
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for TransferIntentGet and cannot be null");
            }
            this.Amount = amount;
            this.Mode = mode;
            this.AchClass = achClass;
            // to ensure "user" is required (not null)
            if (user == null)
            {
                throw new ArgumentNullException("user is a required property for TransferIntentGet and cannot be null");
            }
            this.User = user;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for TransferIntentGet and cannot be null");
            }
            this.Description = description;
            // to ensure "isoCurrencyCode" is required (not null)
            if (isoCurrencyCode == null)
            {
                throw new ArgumentNullException("isoCurrencyCode is a required property for TransferIntentGet and cannot be null");
            }
            this.IsoCurrencyCode = isoCurrencyCode;
            this.AccountId = accountId;
            this.Metadata = metadata;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Plaid&#39;s unique identifier for a transfer intent object.
        /// </summary>
        /// <value>Plaid&#39;s unique identifier for a transfer intent object.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The datetime the transfer was created. This will be of the form &#x60;2006-01-02T15:04:05Z&#x60;.
        /// </summary>
        /// <value>The datetime the transfer was created. This will be of the form &#x60;2006-01-02T15:04:05Z&#x60;.</value>
        [DataMember(Name = "created", IsRequired = true, EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Plaid&#39;s unique identifier for the transfer created through the UI. Returned only if the transfer was successfully created. Null value otherwise.
        /// </summary>
        /// <value>Plaid&#39;s unique identifier for the transfer created through the UI. Returned only if the transfer was successfully created. Null value otherwise.</value>
        [DataMember(Name = "transfer_id", IsRequired = true, EmitDefaultValue = true)]
        public string TransferId { get; set; }

        /// <summary>
        /// Gets or Sets FailureReason
        /// </summary>
        [DataMember(Name = "failure_reason", IsRequired = true, EmitDefaultValue = true)]
        public TransferIntentGetFailureReason FailureReason { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizationDecisionRationale
        /// </summary>
        [DataMember(Name = "authorization_decision_rationale", IsRequired = true, EmitDefaultValue = true)]
        public TransferAuthorizationDecisionRationale AuthorizationDecisionRationale { get; set; }

        /// <summary>
        /// The Plaid &#x60;account_id&#x60; for the account that will be debited or credited. Returned only if &#x60;account_id&#x60; was set on intent creation.
        /// </summary>
        /// <value>The Plaid &#x60;account_id&#x60; for the account that will be debited or credited. Returned only if &#x60;account_id&#x60; was set on intent creation.</value>
        [DataMember(Name = "account_id", EmitDefaultValue = true)]
        public string AccountId { get; set; }

        /// <summary>
        /// Plaid’s unique identifier for the origination account used for the transfer.
        /// </summary>
        /// <value>Plaid’s unique identifier for the origination account used for the transfer.</value>
        [DataMember(Name = "origination_account_id", IsRequired = true, EmitDefaultValue = false)]
        public string OriginationAccountId { get; set; }

        /// <summary>
        /// The amount of the transfer (decimal string with two digits of precision e.g. \&quot;10.00\&quot;).
        /// </summary>
        /// <value>The amount of the transfer (decimal string with two digits of precision e.g. \&quot;10.00\&quot;).</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = false)]
        public string Amount { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", IsRequired = true, EmitDefaultValue = false)]
        public TransferUserInResponse User { get; set; }

        /// <summary>
        /// A description for the underlying transfer. Maximum of 8 characters.
        /// </summary>
        /// <value>A description for the underlying transfer. Maximum of 8 characters.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: - The JSON values must be Strings (no nested JSON objects allowed) - Only ASCII characters may be used - Maximum of 50 key/value pairs - Maximum key length of 40 characters - Maximum value length of 500 characters 
        /// </summary>
        /// <value>The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: - The JSON values must be Strings (no nested JSON objects allowed) - Only ASCII characters may be used - Maximum of 50 key/value pairs - Maximum key length of 40 characters - Maximum value length of 500 characters </value>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// The currency of the transfer amount, e.g. \&quot;USD\&quot;
        /// </summary>
        /// <value>The currency of the transfer amount, e.g. \&quot;USD\&quot;</value>
        [DataMember(Name = "iso_currency_code", IsRequired = true, EmitDefaultValue = false)]
        public string IsoCurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransferIntentGet {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TransferId: ").Append(TransferId).Append("\n");
            sb.Append("  FailureReason: ").Append(FailureReason).Append("\n");
            sb.Append("  AuthorizationDecision: ").Append(AuthorizationDecision).Append("\n");
            sb.Append("  AuthorizationDecisionRationale: ").Append(AuthorizationDecisionRationale).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  OriginationAccountId: ").Append(OriginationAccountId).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  AchClass: ").Append(AchClass).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  IsoCurrencyCode: ").Append(IsoCurrencyCode).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransferIntentGet);
        }

        /// <summary>
        /// Returns true if TransferIntentGet instances are equal
        /// </summary>
        /// <param name="input">Instance of TransferIntentGet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransferIntentGet input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && base.Equals(input) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && base.Equals(input) && 
                (
                    this.TransferId == input.TransferId ||
                    (this.TransferId != null &&
                    this.TransferId.Equals(input.TransferId))
                ) && base.Equals(input) && 
                (
                    this.FailureReason == input.FailureReason ||
                    (this.FailureReason != null &&
                    this.FailureReason.Equals(input.FailureReason))
                ) && base.Equals(input) && 
                (
                    this.AuthorizationDecision == input.AuthorizationDecision ||
                    this.AuthorizationDecision.Equals(input.AuthorizationDecision)
                ) && base.Equals(input) && 
                (
                    this.AuthorizationDecisionRationale == input.AuthorizationDecisionRationale ||
                    (this.AuthorizationDecisionRationale != null &&
                    this.AuthorizationDecisionRationale.Equals(input.AuthorizationDecisionRationale))
                ) && base.Equals(input) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && base.Equals(input) && 
                (
                    this.OriginationAccountId == input.OriginationAccountId ||
                    (this.OriginationAccountId != null &&
                    this.OriginationAccountId.Equals(input.OriginationAccountId))
                ) && base.Equals(input) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && base.Equals(input) && 
                (
                    this.Mode == input.Mode ||
                    this.Mode.Equals(input.Mode)
                ) && base.Equals(input) && 
                (
                    this.AchClass == input.AchClass ||
                    this.AchClass.Equals(input.AchClass)
                ) && base.Equals(input) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && base.Equals(input) && 
                (
                    this.IsoCurrencyCode == input.IsoCurrencyCode ||
                    (this.IsoCurrencyCode != null &&
                    this.IsoCurrencyCode.Equals(input.IsoCurrencyCode))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Created != null)
                {
                    hashCode = (hashCode * 59) + this.Created.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.TransferId != null)
                {
                    hashCode = (hashCode * 59) + this.TransferId.GetHashCode();
                }
                if (this.FailureReason != null)
                {
                    hashCode = (hashCode * 59) + this.FailureReason.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AuthorizationDecision.GetHashCode();
                if (this.AuthorizationDecisionRationale != null)
                {
                    hashCode = (hashCode * 59) + this.AuthorizationDecisionRationale.GetHashCode();
                }
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                if (this.OriginationAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.OriginationAccountId.GetHashCode();
                }
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Mode.GetHashCode();
                hashCode = (hashCode * 59) + this.AchClass.GetHashCode();
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                if (this.IsoCurrencyCode != null)
                {
                    hashCode = (hashCode * 59) + this.IsoCurrencyCode.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
