/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// IncomeVerificationDocumentsDownloadRequest defines the request schema for &#x60;/income/verification/documents/download&#x60;.
    /// </summary>
    [DataContract(Name = "IncomeVerificationDocumentsDownloadRequest")]
    public partial class IncomeVerificationDocumentsDownloadRequest : IEquatable<IncomeVerificationDocumentsDownloadRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IncomeVerificationDocumentsDownloadRequest" /> class.
        /// </summary>
        /// <param name="clientId">Your Plaid API &#x60;client_id&#x60;. The &#x60;client_id&#x60; is required and may be provided either in the &#x60;PLAID-CLIENT-ID&#x60; header or as part of a request body..</param>
        /// <param name="secret">Your Plaid API &#x60;secret&#x60;. The &#x60;secret&#x60; is required and may be provided either in the &#x60;PLAID-SECRET&#x60; header or as part of a request body..</param>
        /// <param name="incomeVerificationId">The ID of the verification..</param>
        /// <param name="accessToken">The access token associated with the Item data is being requested for..</param>
        /// <param name="documentId">The document ID to download. If passed, a single document will be returned in the resulting zip file, rather than all document.</param>
        public IncomeVerificationDocumentsDownloadRequest(string clientId = default(string), string secret = default(string), string incomeVerificationId = default(string), string accessToken = default(string), string documentId = default(string))
        {
            this.ClientId = clientId;
            this.Secret = secret;
            this.IncomeVerificationId = incomeVerificationId;
            this.AccessToken = accessToken;
            this.DocumentId = documentId;
        }

        /// <summary>
        /// Your Plaid API &#x60;client_id&#x60;. The &#x60;client_id&#x60; is required and may be provided either in the &#x60;PLAID-CLIENT-ID&#x60; header or as part of a request body.
        /// </summary>
        /// <value>Your Plaid API &#x60;client_id&#x60;. The &#x60;client_id&#x60; is required and may be provided either in the &#x60;PLAID-CLIENT-ID&#x60; header or as part of a request body.</value>
        [DataMember(Name = "client_id", EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Your Plaid API &#x60;secret&#x60;. The &#x60;secret&#x60; is required and may be provided either in the &#x60;PLAID-SECRET&#x60; header or as part of a request body.
        /// </summary>
        /// <value>Your Plaid API &#x60;secret&#x60;. The &#x60;secret&#x60; is required and may be provided either in the &#x60;PLAID-SECRET&#x60; header or as part of a request body.</value>
        [DataMember(Name = "secret", EmitDefaultValue = false)]
        public string Secret { get; set; }

        /// <summary>
        /// The ID of the verification.
        /// </summary>
        /// <value>The ID of the verification.</value>
        [DataMember(Name = "income_verification_id", EmitDefaultValue = true)]
        [Obsolete]
        public string IncomeVerificationId { get; set; }

        /// <summary>
        /// The access token associated with the Item data is being requested for.
        /// </summary>
        /// <value>The access token associated with the Item data is being requested for.</value>
        [DataMember(Name = "access_token", EmitDefaultValue = true)]
        public string AccessToken { get; set; }

        /// <summary>
        /// The document ID to download. If passed, a single document will be returned in the resulting zip file, rather than all document
        /// </summary>
        /// <value>The document ID to download. If passed, a single document will be returned in the resulting zip file, rather than all document</value>
        [DataMember(Name = "document_id", EmitDefaultValue = true)]
        public string DocumentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IncomeVerificationDocumentsDownloadRequest {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("  IncomeVerificationId: ").Append(IncomeVerificationId).Append("\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IncomeVerificationDocumentsDownloadRequest);
        }

        /// <summary>
        /// Returns true if IncomeVerificationDocumentsDownloadRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of IncomeVerificationDocumentsDownloadRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IncomeVerificationDocumentsDownloadRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.Secret == input.Secret ||
                    (this.Secret != null &&
                    this.Secret.Equals(input.Secret))
                ) && 
                (
                    this.IncomeVerificationId == input.IncomeVerificationId ||
                    (this.IncomeVerificationId != null &&
                    this.IncomeVerificationId.Equals(input.IncomeVerificationId))
                ) && 
                (
                    this.AccessToken == input.AccessToken ||
                    (this.AccessToken != null &&
                    this.AccessToken.Equals(input.AccessToken))
                ) && 
                (
                    this.DocumentId == input.DocumentId ||
                    (this.DocumentId != null &&
                    this.DocumentId.Equals(input.DocumentId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientId.GetHashCode();
                }
                if (this.Secret != null)
                {
                    hashCode = (hashCode * 59) + this.Secret.GetHashCode();
                }
                if (this.IncomeVerificationId != null)
                {
                    hashCode = (hashCode * 59) + this.IncomeVerificationId.GetHashCode();
                }
                if (this.AccessToken != null)
                {
                    hashCode = (hashCode * 59) + this.AccessToken.GetHashCode();
                }
                if (this.DocumentId != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
