/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SignalDecisionReportRequest defines the request schema for &#x60;/signal/decision/report&#x60;
    /// </summary>
    [DataContract(Name = "SignalDecisionReportRequest")]
    public partial class SignalDecisionReportRequest : IEquatable<SignalDecisionReportRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SignalDecisionReportRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SignalDecisionReportRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SignalDecisionReportRequest" /> class.
        /// </summary>
        /// <param name="clientId">Your Plaid API &#x60;client_id&#x60;. The &#x60;client_id&#x60; is required and may be provided either in the &#x60;PLAID-CLIENT-ID&#x60; header or as part of a request body..</param>
        /// <param name="secret">Your Plaid API &#x60;secret&#x60;. The &#x60;secret&#x60; is required and may be provided either in the &#x60;PLAID-SECRET&#x60; header or as part of a request body..</param>
        /// <param name="clientTransactionId">Must be the same as the &#x60;client_transaction_id&#x60; supplied when calling &#x60;/signal/evaluate&#x60; (required).</param>
        /// <param name="initiated">&#x60;true&#x60; if the ACH transaction was initiated, &#x60;false&#x60; otherwise. (required).</param>
        /// <param name="daysFundsOnHold">The actual number of days (hold time) since the ACH debit transaction that you wait before making funds available to your customers. The holding time could affect the ACH return rate. For example, use 0 if you make funds available to your customers instantly or the same day following the debit transaction, or 1 if you make funds available the next day following the debit initialization..</param>
        public SignalDecisionReportRequest(string clientId = default(string), string secret = default(string), string clientTransactionId = default(string), bool initiated = default(bool), int? daysFundsOnHold = default(int?))
        {
            // to ensure "clientTransactionId" is required (not null)
            if (clientTransactionId == null)
            {
                throw new ArgumentNullException("clientTransactionId is a required property for SignalDecisionReportRequest and cannot be null");
            }
            this.ClientTransactionId = clientTransactionId;
            this.Initiated = initiated;
            this.ClientId = clientId;
            this.Secret = secret;
            this.DaysFundsOnHold = daysFundsOnHold;
        }

        /// <summary>
        /// Your Plaid API &#x60;client_id&#x60;. The &#x60;client_id&#x60; is required and may be provided either in the &#x60;PLAID-CLIENT-ID&#x60; header or as part of a request body.
        /// </summary>
        /// <value>Your Plaid API &#x60;client_id&#x60;. The &#x60;client_id&#x60; is required and may be provided either in the &#x60;PLAID-CLIENT-ID&#x60; header or as part of a request body.</value>
        [DataMember(Name = "client_id", EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Your Plaid API &#x60;secret&#x60;. The &#x60;secret&#x60; is required and may be provided either in the &#x60;PLAID-SECRET&#x60; header or as part of a request body.
        /// </summary>
        /// <value>Your Plaid API &#x60;secret&#x60;. The &#x60;secret&#x60; is required and may be provided either in the &#x60;PLAID-SECRET&#x60; header or as part of a request body.</value>
        [DataMember(Name = "secret", EmitDefaultValue = false)]
        public string Secret { get; set; }

        /// <summary>
        /// Must be the same as the &#x60;client_transaction_id&#x60; supplied when calling &#x60;/signal/evaluate&#x60;
        /// </summary>
        /// <value>Must be the same as the &#x60;client_transaction_id&#x60; supplied when calling &#x60;/signal/evaluate&#x60;</value>
        [DataMember(Name = "client_transaction_id", IsRequired = true, EmitDefaultValue = false)]
        public string ClientTransactionId { get; set; }

        /// <summary>
        /// &#x60;true&#x60; if the ACH transaction was initiated, &#x60;false&#x60; otherwise.
        /// </summary>
        /// <value>&#x60;true&#x60; if the ACH transaction was initiated, &#x60;false&#x60; otherwise.</value>
        [DataMember(Name = "initiated", IsRequired = true, EmitDefaultValue = true)]
        public bool Initiated { get; set; }

        /// <summary>
        /// The actual number of days (hold time) since the ACH debit transaction that you wait before making funds available to your customers. The holding time could affect the ACH return rate. For example, use 0 if you make funds available to your customers instantly or the same day following the debit transaction, or 1 if you make funds available the next day following the debit initialization.
        /// </summary>
        /// <value>The actual number of days (hold time) since the ACH debit transaction that you wait before making funds available to your customers. The holding time could affect the ACH return rate. For example, use 0 if you make funds available to your customers instantly or the same day following the debit transaction, or 1 if you make funds available the next day following the debit initialization.</value>
        [DataMember(Name = "days_funds_on_hold", EmitDefaultValue = true)]
        public int? DaysFundsOnHold { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SignalDecisionReportRequest {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("  ClientTransactionId: ").Append(ClientTransactionId).Append("\n");
            sb.Append("  Initiated: ").Append(Initiated).Append("\n");
            sb.Append("  DaysFundsOnHold: ").Append(DaysFundsOnHold).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SignalDecisionReportRequest);
        }

        /// <summary>
        /// Returns true if SignalDecisionReportRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SignalDecisionReportRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignalDecisionReportRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.Secret == input.Secret ||
                    (this.Secret != null &&
                    this.Secret.Equals(input.Secret))
                ) && 
                (
                    this.ClientTransactionId == input.ClientTransactionId ||
                    (this.ClientTransactionId != null &&
                    this.ClientTransactionId.Equals(input.ClientTransactionId))
                ) && 
                (
                    this.Initiated == input.Initiated ||
                    this.Initiated.Equals(input.Initiated)
                ) && 
                (
                    this.DaysFundsOnHold == input.DaysFundsOnHold ||
                    (this.DaysFundsOnHold != null &&
                    this.DaysFundsOnHold.Equals(input.DaysFundsOnHold))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientId.GetHashCode();
                }
                if (this.Secret != null)
                {
                    hashCode = (hashCode * 59) + this.Secret.GetHashCode();
                }
                if (this.ClientTransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientTransactionId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Initiated.GetHashCode();
                if (this.DaysFundsOnHold != null)
                {
                    hashCode = (hashCode * 59) + this.DaysFundsOnHold.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // ClientTransactionId (string) maxLength
            if (this.ClientTransactionId != null && this.ClientTransactionId.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClientTransactionId, length must be less than 36.", new [] { "ClientTransactionId" });
            }

            // ClientTransactionId (string) minLength
            if (this.ClientTransactionId != null && this.ClientTransactionId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClientTransactionId, length must be greater than 1.", new [] { "ClientTransactionId" });
            }

            // DaysFundsOnHold (int?) minimum
            if (this.DaysFundsOnHold < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DaysFundsOnHold, must be a value greater than or equal to 0.", new [] { "DaysFundsOnHold" });
            }

            yield break;
        }
    }

}
