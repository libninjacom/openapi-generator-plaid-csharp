/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Metadata that captures what specific payment configurations an institution supports when making Payment Initiation requests.
    /// </summary>
    [DataContract(Name = "PaymentInitiationMetadata")]
    public partial class PaymentInitiationMetadata : Dictionary<String, Object>, IEquatable<PaymentInitiationMetadata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentInitiationMetadata" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentInitiationMetadata()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentInitiationMetadata" /> class.
        /// </summary>
        /// <param name="supportsInternationalPayments">Indicates whether the institution supports payments from a different country. (required).</param>
        /// <param name="maximumPaymentAmount">A mapping of currency to maximum payment amount (denominated in the smallest unit of currency) supported by the institution.  Example: &#x60;{\&quot;GBP\&quot;: \&quot;10000\&quot;}&#x60;  (required).</param>
        /// <param name="supportsRefundDetails">Indicates whether the institution supports returning refund details when initiating a payment. (required).</param>
        /// <param name="standingOrderMetadata">standingOrderMetadata (required).</param>
        public PaymentInitiationMetadata(bool supportsInternationalPayments = default(bool), Dictionary<string, string> maximumPaymentAmount = default(Dictionary<string, string>), bool supportsRefundDetails = default(bool), PaymentInitiationStandingOrderMetadata standingOrderMetadata = default(PaymentInitiationStandingOrderMetadata)) : base()
        {
            this.SupportsInternationalPayments = supportsInternationalPayments;
            // to ensure "maximumPaymentAmount" is required (not null)
            if (maximumPaymentAmount == null)
            {
                throw new ArgumentNullException("maximumPaymentAmount is a required property for PaymentInitiationMetadata and cannot be null");
            }
            this.MaximumPaymentAmount = maximumPaymentAmount;
            this.SupportsRefundDetails = supportsRefundDetails;
            // to ensure "standingOrderMetadata" is required (not null)
            if (standingOrderMetadata == null)
            {
                throw new ArgumentNullException("standingOrderMetadata is a required property for PaymentInitiationMetadata and cannot be null");
            }
            this.StandingOrderMetadata = standingOrderMetadata;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Indicates whether the institution supports payments from a different country.
        /// </summary>
        /// <value>Indicates whether the institution supports payments from a different country.</value>
        [DataMember(Name = "supports_international_payments", IsRequired = true, EmitDefaultValue = true)]
        public bool SupportsInternationalPayments { get; set; }

        /// <summary>
        /// A mapping of currency to maximum payment amount (denominated in the smallest unit of currency) supported by the institution.  Example: &#x60;{\&quot;GBP\&quot;: \&quot;10000\&quot;}&#x60; 
        /// </summary>
        /// <value>A mapping of currency to maximum payment amount (denominated in the smallest unit of currency) supported by the institution.  Example: &#x60;{\&quot;GBP\&quot;: \&quot;10000\&quot;}&#x60; </value>
        [DataMember(Name = "maximum_payment_amount", IsRequired = true, EmitDefaultValue = false)]
        public Dictionary<string, string> MaximumPaymentAmount { get; set; }

        /// <summary>
        /// Indicates whether the institution supports returning refund details when initiating a payment.
        /// </summary>
        /// <value>Indicates whether the institution supports returning refund details when initiating a payment.</value>
        [DataMember(Name = "supports_refund_details", IsRequired = true, EmitDefaultValue = true)]
        public bool SupportsRefundDetails { get; set; }

        /// <summary>
        /// Gets or Sets StandingOrderMetadata
        /// </summary>
        [DataMember(Name = "standing_order_metadata", IsRequired = true, EmitDefaultValue = true)]
        public PaymentInitiationStandingOrderMetadata StandingOrderMetadata { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentInitiationMetadata {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  SupportsInternationalPayments: ").Append(SupportsInternationalPayments).Append("\n");
            sb.Append("  MaximumPaymentAmount: ").Append(MaximumPaymentAmount).Append("\n");
            sb.Append("  SupportsRefundDetails: ").Append(SupportsRefundDetails).Append("\n");
            sb.Append("  StandingOrderMetadata: ").Append(StandingOrderMetadata).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentInitiationMetadata);
        }

        /// <summary>
        /// Returns true if PaymentInitiationMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentInitiationMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentInitiationMetadata input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.SupportsInternationalPayments == input.SupportsInternationalPayments ||
                    this.SupportsInternationalPayments.Equals(input.SupportsInternationalPayments)
                ) && base.Equals(input) && 
                (
                    this.MaximumPaymentAmount == input.MaximumPaymentAmount ||
                    this.MaximumPaymentAmount != null &&
                    input.MaximumPaymentAmount != null &&
                    this.MaximumPaymentAmount.SequenceEqual(input.MaximumPaymentAmount)
                ) && base.Equals(input) && 
                (
                    this.SupportsRefundDetails == input.SupportsRefundDetails ||
                    this.SupportsRefundDetails.Equals(input.SupportsRefundDetails)
                ) && base.Equals(input) && 
                (
                    this.StandingOrderMetadata == input.StandingOrderMetadata ||
                    (this.StandingOrderMetadata != null &&
                    this.StandingOrderMetadata.Equals(input.StandingOrderMetadata))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                hashCode = (hashCode * 59) + this.SupportsInternationalPayments.GetHashCode();
                if (this.MaximumPaymentAmount != null)
                {
                    hashCode = (hashCode * 59) + this.MaximumPaymentAmount.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SupportsRefundDetails.GetHashCode();
                if (this.StandingOrderMetadata != null)
                {
                    hashCode = (hashCode * 59) + this.StandingOrderMetadata.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
