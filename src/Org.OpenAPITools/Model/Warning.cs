/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// It is possible for an Asset Report to be returned with missing account owner information. In such cases, the Asset Report will contain warning data in the response, indicating why obtaining the owner information failed.
    /// </summary>
    [DataContract(Name = "Warning")]
    public partial class Warning : Dictionary<String, Object>, IEquatable<Warning>, IValidatableObject
    {
        /// <summary>
        /// The warning code identifies a specific kind of warning. Currently, the only possible warning code is &#x60;OWNERS_UNAVAILABLE&#x60;, which indicates that account-owner information is not available.
        /// </summary>
        /// <value>The warning code identifies a specific kind of warning. Currently, the only possible warning code is &#x60;OWNERS_UNAVAILABLE&#x60;, which indicates that account-owner information is not available.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WarningCodeEnum
        {
            /// <summary>
            /// Enum OWNERSUNAVAILABLE for value: OWNERS_UNAVAILABLE
            /// </summary>
            [EnumMember(Value = "OWNERS_UNAVAILABLE")]
            OWNERSUNAVAILABLE = 1

        }


        /// <summary>
        /// The warning code identifies a specific kind of warning. Currently, the only possible warning code is &#x60;OWNERS_UNAVAILABLE&#x60;, which indicates that account-owner information is not available.
        /// </summary>
        /// <value>The warning code identifies a specific kind of warning. Currently, the only possible warning code is &#x60;OWNERS_UNAVAILABLE&#x60;, which indicates that account-owner information is not available.</value>
        [DataMember(Name = "warning_code", IsRequired = true, EmitDefaultValue = false)]
        public WarningCodeEnum WarningCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Warning" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Warning()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Warning" /> class.
        /// </summary>
        /// <param name="warningType">The warning type, which will always be &#x60;ASSET_REPORT_WARNING&#x60; (required).</param>
        /// <param name="warningCode">The warning code identifies a specific kind of warning. Currently, the only possible warning code is &#x60;OWNERS_UNAVAILABLE&#x60;, which indicates that account-owner information is not available. (required).</param>
        /// <param name="cause">cause (required).</param>
        public Warning(string warningType = default(string), WarningCodeEnum warningCode = default(WarningCodeEnum), Cause cause = default(Cause)) : base()
        {
            // to ensure "warningType" is required (not null)
            if (warningType == null)
            {
                throw new ArgumentNullException("warningType is a required property for Warning and cannot be null");
            }
            this.WarningType = warningType;
            this.WarningCode = warningCode;
            // to ensure "cause" is required (not null)
            if (cause == null)
            {
                throw new ArgumentNullException("cause is a required property for Warning and cannot be null");
            }
            this.Cause = cause;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The warning type, which will always be &#x60;ASSET_REPORT_WARNING&#x60;
        /// </summary>
        /// <value>The warning type, which will always be &#x60;ASSET_REPORT_WARNING&#x60;</value>
        [DataMember(Name = "warning_type", IsRequired = true, EmitDefaultValue = false)]
        public string WarningType { get; set; }

        /// <summary>
        /// Gets or Sets Cause
        /// </summary>
        [DataMember(Name = "cause", IsRequired = true, EmitDefaultValue = false)]
        public Cause Cause { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Warning {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  WarningType: ").Append(WarningType).Append("\n");
            sb.Append("  WarningCode: ").Append(WarningCode).Append("\n");
            sb.Append("  Cause: ").Append(Cause).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Warning);
        }

        /// <summary>
        /// Returns true if Warning instances are equal
        /// </summary>
        /// <param name="input">Instance of Warning to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Warning input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.WarningType == input.WarningType ||
                    (this.WarningType != null &&
                    this.WarningType.Equals(input.WarningType))
                ) && base.Equals(input) && 
                (
                    this.WarningCode == input.WarningCode ||
                    this.WarningCode.Equals(input.WarningCode)
                ) && base.Equals(input) && 
                (
                    this.Cause == input.Cause ||
                    (this.Cause != null &&
                    this.Cause.Equals(input.Cause))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.WarningType != null)
                {
                    hashCode = (hashCode * 59) + this.WarningType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.WarningCode.GetHashCode();
                if (this.Cause != null)
                {
                    hashCode = (hashCode * 59) + this.Cause.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
