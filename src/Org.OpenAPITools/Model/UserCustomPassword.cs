/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Custom test accounts are configured with a JSON configuration object formulated according to the schema below. All fields are optional. Sending an empty object as a configuration will result in an account configured with random balances and transaction history.
    /// </summary>
    [DataContract(Name = "UserCustomPassword")]
    public partial class UserCustomPassword : Dictionary<String, Object>, IEquatable<UserCustomPassword>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserCustomPassword" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserCustomPassword()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserCustomPassword" /> class.
        /// </summary>
        /// <param name="version">The version of the password schema to use, possible values are 1 or 2. The default value is 2. You should only specify 1 if you know it is necessary for your test suite..</param>
        /// <param name="seed">A seed, in the form of a string, that will be used to randomly generate account and transaction data, if this data is not specified using the &#x60;override_accounts&#x60; argument. If no seed is specified, the randomly generated data will be different each time.  Note that transactions data is generated relative to the Item&#39;s creation date. Different Items created on different dates with the same seed for transactions data will have different dates for the transactions. The number of days between each transaction and the Item creation will remain constant. For example, an Item created on December 15 might show a transaction on December 14. An Item created on December 20, using the same seed, would show that same transaction occurring on December 19. (required).</param>
        /// <param name="overrideAccounts">An array of account overrides to configure the accounts for the Item. By default, if no override is specified, transactions and account data will be randomly generated based on the account type and subtype, and other products will have fixed or empty data. (required).</param>
        /// <param name="mfa">mfa (required).</param>
        /// <param name="recaptcha">You may trigger a reCAPTCHA in Plaid Link in the Sandbox environment by using the recaptcha field. Possible values are &#x60;good&#x60; or &#x60;bad&#x60;. A value of &#x60;good&#x60; will result in successful Item creation and &#x60;bad&#x60; will result in a &#x60;RECAPTCHA_BAD&#x60; error to simulate a failed reCAPTCHA. Both values require the reCAPTCHA to be manually solved within Plaid Link. (required).</param>
        /// <param name="forceError">An error code to force on Item creation. Possible values are:  &#x60;\&quot;INSTITUTION_NOT_RESPONDING\&quot;&#x60; &#x60;\&quot;INSTITUTION_NO_LONGER_SUPPORTED\&quot;&#x60; &#x60;\&quot;INVALID_CREDENTIALS\&quot;&#x60; &#x60;\&quot;INVALID_MFA\&quot;&#x60; &#x60;\&quot;ITEM_LOCKED\&quot;&#x60; &#x60;\&quot;ITEM_LOGIN_REQUIRED\&quot;&#x60; &#x60;\&quot;ITEM_NOT_SUPPORTED\&quot;&#x60; &#x60;\&quot;INVALID_LINK_TOKEN\&quot;&#x60; &#x60;\&quot;MFA_NOT_SUPPORTED\&quot;&#x60; &#x60;\&quot;NO_ACCOUNTS\&quot;&#x60; &#x60;\&quot;PLAID_ERROR\&quot;&#x60; &#x60;\&quot;PRODUCTS_NOT_SUPPORTED\&quot;&#x60; &#x60;\&quot;USER_SETUP_REQUIRED\&quot;&#x60; (required).</param>
        public UserCustomPassword(string version = default(string), string seed = default(string), List<OverrideAccounts> overrideAccounts = default(List<OverrideAccounts>), MFA mfa = default(MFA), string recaptcha = default(string), string forceError = default(string)) : base()
        {
            // to ensure "seed" is required (not null)
            if (seed == null)
            {
                throw new ArgumentNullException("seed is a required property for UserCustomPassword and cannot be null");
            }
            this.Seed = seed;
            // to ensure "overrideAccounts" is required (not null)
            if (overrideAccounts == null)
            {
                throw new ArgumentNullException("overrideAccounts is a required property for UserCustomPassword and cannot be null");
            }
            this.OverrideAccounts = overrideAccounts;
            // to ensure "mfa" is required (not null)
            if (mfa == null)
            {
                throw new ArgumentNullException("mfa is a required property for UserCustomPassword and cannot be null");
            }
            this.Mfa = mfa;
            // to ensure "recaptcha" is required (not null)
            if (recaptcha == null)
            {
                throw new ArgumentNullException("recaptcha is a required property for UserCustomPassword and cannot be null");
            }
            this.Recaptcha = recaptcha;
            // to ensure "forceError" is required (not null)
            if (forceError == null)
            {
                throw new ArgumentNullException("forceError is a required property for UserCustomPassword and cannot be null");
            }
            this.ForceError = forceError;
            this._Version = version;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The version of the password schema to use, possible values are 1 or 2. The default value is 2. You should only specify 1 if you know it is necessary for your test suite.
        /// </summary>
        /// <value>The version of the password schema to use, possible values are 1 or 2. The default value is 2. You should only specify 1 if you know it is necessary for your test suite.</value>
        [DataMember(Name = "version", EmitDefaultValue = true)]
        public string _Version { get; set; }

        /// <summary>
        /// A seed, in the form of a string, that will be used to randomly generate account and transaction data, if this data is not specified using the &#x60;override_accounts&#x60; argument. If no seed is specified, the randomly generated data will be different each time.  Note that transactions data is generated relative to the Item&#39;s creation date. Different Items created on different dates with the same seed for transactions data will have different dates for the transactions. The number of days between each transaction and the Item creation will remain constant. For example, an Item created on December 15 might show a transaction on December 14. An Item created on December 20, using the same seed, would show that same transaction occurring on December 19.
        /// </summary>
        /// <value>A seed, in the form of a string, that will be used to randomly generate account and transaction data, if this data is not specified using the &#x60;override_accounts&#x60; argument. If no seed is specified, the randomly generated data will be different each time.  Note that transactions data is generated relative to the Item&#39;s creation date. Different Items created on different dates with the same seed for transactions data will have different dates for the transactions. The number of days between each transaction and the Item creation will remain constant. For example, an Item created on December 15 might show a transaction on December 14. An Item created on December 20, using the same seed, would show that same transaction occurring on December 19.</value>
        [DataMember(Name = "seed", IsRequired = true, EmitDefaultValue = false)]
        public string Seed { get; set; }

        /// <summary>
        /// An array of account overrides to configure the accounts for the Item. By default, if no override is specified, transactions and account data will be randomly generated based on the account type and subtype, and other products will have fixed or empty data.
        /// </summary>
        /// <value>An array of account overrides to configure the accounts for the Item. By default, if no override is specified, transactions and account data will be randomly generated based on the account type and subtype, and other products will have fixed or empty data.</value>
        [DataMember(Name = "override_accounts", IsRequired = true, EmitDefaultValue = false)]
        public List<OverrideAccounts> OverrideAccounts { get; set; }

        /// <summary>
        /// Gets or Sets Mfa
        /// </summary>
        [DataMember(Name = "mfa", IsRequired = true, EmitDefaultValue = false)]
        public MFA Mfa { get; set; }

        /// <summary>
        /// You may trigger a reCAPTCHA in Plaid Link in the Sandbox environment by using the recaptcha field. Possible values are &#x60;good&#x60; or &#x60;bad&#x60;. A value of &#x60;good&#x60; will result in successful Item creation and &#x60;bad&#x60; will result in a &#x60;RECAPTCHA_BAD&#x60; error to simulate a failed reCAPTCHA. Both values require the reCAPTCHA to be manually solved within Plaid Link.
        /// </summary>
        /// <value>You may trigger a reCAPTCHA in Plaid Link in the Sandbox environment by using the recaptcha field. Possible values are &#x60;good&#x60; or &#x60;bad&#x60;. A value of &#x60;good&#x60; will result in successful Item creation and &#x60;bad&#x60; will result in a &#x60;RECAPTCHA_BAD&#x60; error to simulate a failed reCAPTCHA. Both values require the reCAPTCHA to be manually solved within Plaid Link.</value>
        [DataMember(Name = "recaptcha", IsRequired = true, EmitDefaultValue = false)]
        public string Recaptcha { get; set; }

        /// <summary>
        /// An error code to force on Item creation. Possible values are:  &#x60;\&quot;INSTITUTION_NOT_RESPONDING\&quot;&#x60; &#x60;\&quot;INSTITUTION_NO_LONGER_SUPPORTED\&quot;&#x60; &#x60;\&quot;INVALID_CREDENTIALS\&quot;&#x60; &#x60;\&quot;INVALID_MFA\&quot;&#x60; &#x60;\&quot;ITEM_LOCKED\&quot;&#x60; &#x60;\&quot;ITEM_LOGIN_REQUIRED\&quot;&#x60; &#x60;\&quot;ITEM_NOT_SUPPORTED\&quot;&#x60; &#x60;\&quot;INVALID_LINK_TOKEN\&quot;&#x60; &#x60;\&quot;MFA_NOT_SUPPORTED\&quot;&#x60; &#x60;\&quot;NO_ACCOUNTS\&quot;&#x60; &#x60;\&quot;PLAID_ERROR\&quot;&#x60; &#x60;\&quot;PRODUCTS_NOT_SUPPORTED\&quot;&#x60; &#x60;\&quot;USER_SETUP_REQUIRED\&quot;&#x60;
        /// </summary>
        /// <value>An error code to force on Item creation. Possible values are:  &#x60;\&quot;INSTITUTION_NOT_RESPONDING\&quot;&#x60; &#x60;\&quot;INSTITUTION_NO_LONGER_SUPPORTED\&quot;&#x60; &#x60;\&quot;INVALID_CREDENTIALS\&quot;&#x60; &#x60;\&quot;INVALID_MFA\&quot;&#x60; &#x60;\&quot;ITEM_LOCKED\&quot;&#x60; &#x60;\&quot;ITEM_LOGIN_REQUIRED\&quot;&#x60; &#x60;\&quot;ITEM_NOT_SUPPORTED\&quot;&#x60; &#x60;\&quot;INVALID_LINK_TOKEN\&quot;&#x60; &#x60;\&quot;MFA_NOT_SUPPORTED\&quot;&#x60; &#x60;\&quot;NO_ACCOUNTS\&quot;&#x60; &#x60;\&quot;PLAID_ERROR\&quot;&#x60; &#x60;\&quot;PRODUCTS_NOT_SUPPORTED\&quot;&#x60; &#x60;\&quot;USER_SETUP_REQUIRED\&quot;&#x60;</value>
        [DataMember(Name = "force_error", IsRequired = true, EmitDefaultValue = false)]
        public string ForceError { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserCustomPassword {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  Seed: ").Append(Seed).Append("\n");
            sb.Append("  OverrideAccounts: ").Append(OverrideAccounts).Append("\n");
            sb.Append("  Mfa: ").Append(Mfa).Append("\n");
            sb.Append("  Recaptcha: ").Append(Recaptcha).Append("\n");
            sb.Append("  ForceError: ").Append(ForceError).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserCustomPassword);
        }

        /// <summary>
        /// Returns true if UserCustomPassword instances are equal
        /// </summary>
        /// <param name="input">Instance of UserCustomPassword to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserCustomPassword input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this._Version == input._Version ||
                    (this._Version != null &&
                    this._Version.Equals(input._Version))
                ) && base.Equals(input) && 
                (
                    this.Seed == input.Seed ||
                    (this.Seed != null &&
                    this.Seed.Equals(input.Seed))
                ) && base.Equals(input) && 
                (
                    this.OverrideAccounts == input.OverrideAccounts ||
                    this.OverrideAccounts != null &&
                    input.OverrideAccounts != null &&
                    this.OverrideAccounts.SequenceEqual(input.OverrideAccounts)
                ) && base.Equals(input) && 
                (
                    this.Mfa == input.Mfa ||
                    (this.Mfa != null &&
                    this.Mfa.Equals(input.Mfa))
                ) && base.Equals(input) && 
                (
                    this.Recaptcha == input.Recaptcha ||
                    (this.Recaptcha != null &&
                    this.Recaptcha.Equals(input.Recaptcha))
                ) && base.Equals(input) && 
                (
                    this.ForceError == input.ForceError ||
                    (this.ForceError != null &&
                    this.ForceError.Equals(input.ForceError))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this._Version != null)
                {
                    hashCode = (hashCode * 59) + this._Version.GetHashCode();
                }
                if (this.Seed != null)
                {
                    hashCode = (hashCode * 59) + this.Seed.GetHashCode();
                }
                if (this.OverrideAccounts != null)
                {
                    hashCode = (hashCode * 59) + this.OverrideAccounts.GetHashCode();
                }
                if (this.Mfa != null)
                {
                    hashCode = (hashCode * 59) + this.Mfa.GetHashCode();
                }
                if (this.Recaptcha != null)
                {
                    hashCode = (hashCode * 59) + this.Recaptcha.GetHashCode();
                }
                if (this.ForceError != null)
                {
                    hashCode = (hashCode * 59) + this.ForceError.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
