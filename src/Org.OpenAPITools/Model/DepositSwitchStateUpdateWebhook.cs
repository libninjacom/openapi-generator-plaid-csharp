/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Fired when the status of a deposit switch request has changed.
    /// </summary>
    [DataContract(Name = "DepositSwitchStateUpdateWebhook")]
    public partial class DepositSwitchStateUpdateWebhook : IEquatable<DepositSwitchStateUpdateWebhook>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DepositSwitchStateUpdateWebhook" /> class.
        /// </summary>
        /// <param name="webhookType">&#x60;\&quot;DEPOSIT_SWITCH\&quot;&#x60;.</param>
        /// <param name="webhookCode">&#x60;\&quot;SWITCH_STATE_UPDATE\&quot;&#x60;.</param>
        /// <param name="state"> The state, or status, of the deposit switch.  &#x60;initialized&#x60;: The deposit switch has been initialized with the user entering the information required to submit the deposit switch request.  &#x60;processing&#x60;: The deposit switch request has been submitted and is being processed.  &#x60;completed&#x60;: The user&#39;s employer has fulfilled and completed the deposit switch request.  &#x60;error&#x60;: There was an error processing the deposit switch request.  For more information, see the [Deposit Switch API reference](/docs/deposit-switch/reference#deposit_switchget)..</param>
        /// <param name="depositSwitchId">The ID of the deposit switch..</param>
        public DepositSwitchStateUpdateWebhook(string webhookType = default(string), string webhookCode = default(string), string state = default(string), string depositSwitchId = default(string))
        {
            this.WebhookType = webhookType;
            this.WebhookCode = webhookCode;
            this.State = state;
            this.DepositSwitchId = depositSwitchId;
        }

        /// <summary>
        /// &#x60;\&quot;DEPOSIT_SWITCH\&quot;&#x60;
        /// </summary>
        /// <value>&#x60;\&quot;DEPOSIT_SWITCH\&quot;&#x60;</value>
        [DataMember(Name = "webhook_type", EmitDefaultValue = false)]
        public string WebhookType { get; set; }

        /// <summary>
        /// &#x60;\&quot;SWITCH_STATE_UPDATE\&quot;&#x60;
        /// </summary>
        /// <value>&#x60;\&quot;SWITCH_STATE_UPDATE\&quot;&#x60;</value>
        [DataMember(Name = "webhook_code", EmitDefaultValue = false)]
        public string WebhookCode { get; set; }

        /// <summary>
        ///  The state, or status, of the deposit switch.  &#x60;initialized&#x60;: The deposit switch has been initialized with the user entering the information required to submit the deposit switch request.  &#x60;processing&#x60;: The deposit switch request has been submitted and is being processed.  &#x60;completed&#x60;: The user&#39;s employer has fulfilled and completed the deposit switch request.  &#x60;error&#x60;: There was an error processing the deposit switch request.  For more information, see the [Deposit Switch API reference](/docs/deposit-switch/reference#deposit_switchget).
        /// </summary>
        /// <value> The state, or status, of the deposit switch.  &#x60;initialized&#x60;: The deposit switch has been initialized with the user entering the information required to submit the deposit switch request.  &#x60;processing&#x60;: The deposit switch request has been submitted and is being processed.  &#x60;completed&#x60;: The user&#39;s employer has fulfilled and completed the deposit switch request.  &#x60;error&#x60;: There was an error processing the deposit switch request.  For more information, see the [Deposit Switch API reference](/docs/deposit-switch/reference#deposit_switchget).</value>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// The ID of the deposit switch.
        /// </summary>
        /// <value>The ID of the deposit switch.</value>
        [DataMember(Name = "deposit_switch_id", EmitDefaultValue = false)]
        public string DepositSwitchId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DepositSwitchStateUpdateWebhook {\n");
            sb.Append("  WebhookType: ").Append(WebhookType).Append("\n");
            sb.Append("  WebhookCode: ").Append(WebhookCode).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  DepositSwitchId: ").Append(DepositSwitchId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DepositSwitchStateUpdateWebhook);
        }

        /// <summary>
        /// Returns true if DepositSwitchStateUpdateWebhook instances are equal
        /// </summary>
        /// <param name="input">Instance of DepositSwitchStateUpdateWebhook to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DepositSwitchStateUpdateWebhook input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.WebhookType == input.WebhookType ||
                    (this.WebhookType != null &&
                    this.WebhookType.Equals(input.WebhookType))
                ) && 
                (
                    this.WebhookCode == input.WebhookCode ||
                    (this.WebhookCode != null &&
                    this.WebhookCode.Equals(input.WebhookCode))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.DepositSwitchId == input.DepositSwitchId ||
                    (this.DepositSwitchId != null &&
                    this.DepositSwitchId.Equals(input.DepositSwitchId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WebhookType != null)
                {
                    hashCode = (hashCode * 59) + this.WebhookType.GetHashCode();
                }
                if (this.WebhookCode != null)
                {
                    hashCode = (hashCode * 59) + this.WebhookCode.GetHashCode();
                }
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                if (this.DepositSwitchId != null)
                {
                    hashCode = (hashCode * 59) + this.DepositSwitchId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
