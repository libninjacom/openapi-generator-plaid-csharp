/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AccountAssetsAllOf
    /// </summary>
    [DataContract(Name = "AccountAssets_allOf")]
    public partial class AccountAssetsAllOf : IEquatable<AccountAssetsAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountAssetsAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountAssetsAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountAssetsAllOf" /> class.
        /// </summary>
        /// <param name="daysAvailable">The duration of transaction history available for this Item, typically defined as the time since the date of the earliest transaction in that account. Only returned by Assets endpoints. (required).</param>
        /// <param name="transactions">Transaction history associated with the account. Only returned by Assets endpoints. Transaction history returned by endpoints such as &#x60;/transactions/get&#x60; or &#x60;/investments/transactions/get&#x60; will be returned in the top-level &#x60;transactions&#x60; field instead. (required).</param>
        /// <param name="owners">Data returned by the financial institution about the account owner or owners. Only returned by Identity or Assets endpoints. For business accounts, the name reported may be either the name of the individual or the name of the business, depending on the institution. Multiple owners on a single account will be represented in the same &#x60;owner&#x60; object, not in multiple owner objects within the array. In API versions 2018-05-22 and earlier, the &#x60;owners&#x60; object is not returned, and instead identity information is returned in the top level &#x60;identity&#x60; object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29) (required).</param>
        /// <param name="historicalBalances">Calculated data about the historical balances on the account. Only returned by Assets endpoints and currently not supported by &#x60;brokerage&#x60; or &#x60;investment&#x60; accounts. (required).</param>
        public AccountAssetsAllOf(decimal daysAvailable = default(decimal), List<AssetReportTransaction> transactions = default(List<AssetReportTransaction>), List<Owner> owners = default(List<Owner>), List<HistoricalBalance> historicalBalances = default(List<HistoricalBalance>))
        {
            this.DaysAvailable = daysAvailable;
            // to ensure "transactions" is required (not null)
            if (transactions == null)
            {
                throw new ArgumentNullException("transactions is a required property for AccountAssetsAllOf and cannot be null");
            }
            this.Transactions = transactions;
            // to ensure "owners" is required (not null)
            if (owners == null)
            {
                throw new ArgumentNullException("owners is a required property for AccountAssetsAllOf and cannot be null");
            }
            this.Owners = owners;
            // to ensure "historicalBalances" is required (not null)
            if (historicalBalances == null)
            {
                throw new ArgumentNullException("historicalBalances is a required property for AccountAssetsAllOf and cannot be null");
            }
            this.HistoricalBalances = historicalBalances;
        }

        /// <summary>
        /// The duration of transaction history available for this Item, typically defined as the time since the date of the earliest transaction in that account. Only returned by Assets endpoints.
        /// </summary>
        /// <value>The duration of transaction history available for this Item, typically defined as the time since the date of the earliest transaction in that account. Only returned by Assets endpoints.</value>
        [DataMember(Name = "days_available", IsRequired = true, EmitDefaultValue = false)]
        public decimal DaysAvailable { get; set; }

        /// <summary>
        /// Transaction history associated with the account. Only returned by Assets endpoints. Transaction history returned by endpoints such as &#x60;/transactions/get&#x60; or &#x60;/investments/transactions/get&#x60; will be returned in the top-level &#x60;transactions&#x60; field instead.
        /// </summary>
        /// <value>Transaction history associated with the account. Only returned by Assets endpoints. Transaction history returned by endpoints such as &#x60;/transactions/get&#x60; or &#x60;/investments/transactions/get&#x60; will be returned in the top-level &#x60;transactions&#x60; field instead.</value>
        [DataMember(Name = "transactions", IsRequired = true, EmitDefaultValue = false)]
        public List<AssetReportTransaction> Transactions { get; set; }

        /// <summary>
        /// Data returned by the financial institution about the account owner or owners. Only returned by Identity or Assets endpoints. For business accounts, the name reported may be either the name of the individual or the name of the business, depending on the institution. Multiple owners on a single account will be represented in the same &#x60;owner&#x60; object, not in multiple owner objects within the array. In API versions 2018-05-22 and earlier, the &#x60;owners&#x60; object is not returned, and instead identity information is returned in the top level &#x60;identity&#x60; object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29)
        /// </summary>
        /// <value>Data returned by the financial institution about the account owner or owners. Only returned by Identity or Assets endpoints. For business accounts, the name reported may be either the name of the individual or the name of the business, depending on the institution. Multiple owners on a single account will be represented in the same &#x60;owner&#x60; object, not in multiple owner objects within the array. In API versions 2018-05-22 and earlier, the &#x60;owners&#x60; object is not returned, and instead identity information is returned in the top level &#x60;identity&#x60; object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29)</value>
        [DataMember(Name = "owners", IsRequired = true, EmitDefaultValue = false)]
        public List<Owner> Owners { get; set; }

        /// <summary>
        /// Calculated data about the historical balances on the account. Only returned by Assets endpoints and currently not supported by &#x60;brokerage&#x60; or &#x60;investment&#x60; accounts.
        /// </summary>
        /// <value>Calculated data about the historical balances on the account. Only returned by Assets endpoints and currently not supported by &#x60;brokerage&#x60; or &#x60;investment&#x60; accounts.</value>
        [DataMember(Name = "historical_balances", IsRequired = true, EmitDefaultValue = false)]
        public List<HistoricalBalance> HistoricalBalances { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountAssetsAllOf {\n");
            sb.Append("  DaysAvailable: ").Append(DaysAvailable).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("  Owners: ").Append(Owners).Append("\n");
            sb.Append("  HistoricalBalances: ").Append(HistoricalBalances).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountAssetsAllOf);
        }

        /// <summary>
        /// Returns true if AccountAssetsAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountAssetsAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountAssetsAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DaysAvailable == input.DaysAvailable ||
                    this.DaysAvailable.Equals(input.DaysAvailable)
                ) && 
                (
                    this.Transactions == input.Transactions ||
                    this.Transactions != null &&
                    input.Transactions != null &&
                    this.Transactions.SequenceEqual(input.Transactions)
                ) && 
                (
                    this.Owners == input.Owners ||
                    this.Owners != null &&
                    input.Owners != null &&
                    this.Owners.SequenceEqual(input.Owners)
                ) && 
                (
                    this.HistoricalBalances == input.HistoricalBalances ||
                    this.HistoricalBalances != null &&
                    input.HistoricalBalances != null &&
                    this.HistoricalBalances.SequenceEqual(input.HistoricalBalances)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.DaysAvailable.GetHashCode();
                if (this.Transactions != null)
                {
                    hashCode = (hashCode * 59) + this.Transactions.GetHashCode();
                }
                if (this.Owners != null)
                {
                    hashCode = (hashCode * 59) + this.Owners.GetHashCode();
                }
                if (this.HistoricalBalances != null)
                {
                    hashCode = (hashCode * 59) + this.HistoricalBalances.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
