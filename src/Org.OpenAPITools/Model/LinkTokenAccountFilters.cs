/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// By default, Link will provide limited account filtering: it will only display Institutions that are compatible with all products supplied in the &#x60;products&#x60; parameter of &#x60;/link/token/create&#x60;, and, if &#x60;auth&#x60; is specified in the &#x60;products&#x60; array, will also filter out accounts other than &#x60;checking&#x60; and &#x60;savings&#x60; accounts on the Account Select pane. You can further limit the accounts shown in Link by using &#x60;account_filters&#x60; to specify the account subtypes to be shown in Link. Only the specified subtypes will be shown. This filtering applies to both the Account Select view (if enabled) and the Institution Select view. Institutions that do not support the selected subtypes will be omitted from Link. To indicate that all subtypes should be shown, use the value &#x60;\&quot;all\&quot;&#x60;. If the &#x60;account_filters&#x60; filter is used, any account type for which a filter is not specified will be entirely omitted from Link. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).  For institutions using OAuth, the filter will not affect the list of accounts shown by the bank in the OAuth window. 
    /// </summary>
    [DataContract(Name = "LinkTokenAccountFilters")]
    public partial class LinkTokenAccountFilters : Dictionary<String, Object>, IEquatable<LinkTokenAccountFilters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkTokenAccountFilters" /> class.
        /// </summary>
        /// <param name="depository">depository.</param>
        /// <param name="credit">credit.</param>
        /// <param name="loan">loan.</param>
        /// <param name="investment">investment.</param>
        public LinkTokenAccountFilters(DepositoryFilter depository = default(DepositoryFilter), CreditFilter credit = default(CreditFilter), LoanFilter loan = default(LoanFilter), InvestmentFilter investment = default(InvestmentFilter)) : base()
        {
            this.Depository = depository;
            this.Credit = credit;
            this.Loan = loan;
            this.Investment = investment;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets Depository
        /// </summary>
        [DataMember(Name = "depository", EmitDefaultValue = false)]
        public DepositoryFilter Depository { get; set; }

        /// <summary>
        /// Gets or Sets Credit
        /// </summary>
        [DataMember(Name = "credit", EmitDefaultValue = false)]
        public CreditFilter Credit { get; set; }

        /// <summary>
        /// Gets or Sets Loan
        /// </summary>
        [DataMember(Name = "loan", EmitDefaultValue = false)]
        public LoanFilter Loan { get; set; }

        /// <summary>
        /// Gets or Sets Investment
        /// </summary>
        [DataMember(Name = "investment", EmitDefaultValue = false)]
        public InvestmentFilter Investment { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LinkTokenAccountFilters {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Depository: ").Append(Depository).Append("\n");
            sb.Append("  Credit: ").Append(Credit).Append("\n");
            sb.Append("  Loan: ").Append(Loan).Append("\n");
            sb.Append("  Investment: ").Append(Investment).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LinkTokenAccountFilters);
        }

        /// <summary>
        /// Returns true if LinkTokenAccountFilters instances are equal
        /// </summary>
        /// <param name="input">Instance of LinkTokenAccountFilters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LinkTokenAccountFilters input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Depository == input.Depository ||
                    (this.Depository != null &&
                    this.Depository.Equals(input.Depository))
                ) && base.Equals(input) && 
                (
                    this.Credit == input.Credit ||
                    (this.Credit != null &&
                    this.Credit.Equals(input.Credit))
                ) && base.Equals(input) && 
                (
                    this.Loan == input.Loan ||
                    (this.Loan != null &&
                    this.Loan.Equals(input.Loan))
                ) && base.Equals(input) && 
                (
                    this.Investment == input.Investment ||
                    (this.Investment != null &&
                    this.Investment.Equals(input.Investment))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Depository != null)
                {
                    hashCode = (hashCode * 59) + this.Depository.GetHashCode();
                }
                if (this.Credit != null)
                {
                    hashCode = (hashCode * 59) + this.Credit.GetHashCode();
                }
                if (this.Loan != null)
                {
                    hashCode = (hashCode * 59) + this.Loan.GetHashCode();
                }
                if (this.Investment != null)
                {
                    hashCode = (hashCode * 59) + this.Investment.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
