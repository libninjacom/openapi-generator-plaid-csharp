/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Specify the list of investments transactions on the account.
    /// </summary>
    [DataContract(Name = "Investments_TransactionsOverride")]
    public partial class InvestmentsTransactionsOverride : IEquatable<InvestmentsTransactionsOverride>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvestmentsTransactionsOverride" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InvestmentsTransactionsOverride() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvestmentsTransactionsOverride" /> class.
        /// </summary>
        /// <param name="date">Posting date for the transaction. Must be formatted as an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date. (required).</param>
        /// <param name="name">The institution&#39;s description of the transaction. (required).</param>
        /// <param name="quantity">The number of units of the security involved in this transaction. Must be positive if the type is a buy and negative if the type is a sell. (required).</param>
        /// <param name="price">The price of the security at which this transaction occurred. (required).</param>
        /// <param name="fees">The combined value of all fees applied to this transaction..</param>
        /// <param name="type">The type of the investment transaction. Possible values are: &#x60;buy&#x60;: Buying an investment &#x60;sell&#x60;: Selling an investment &#x60;cash&#x60;: Activity that modifies a cash position &#x60;fee&#x60;: A fee on the account &#x60;transfer&#x60;: Activity that modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer (required).</param>
        /// <param name="currency">Either a valid &#x60;iso_currency_code&#x60; or &#x60;unofficial_currency_code&#x60; (required).</param>
        /// <param name="security">security.</param>
        public InvestmentsTransactionsOverride(DateTime date = default(DateTime), string name = default(string), decimal quantity = default(decimal), decimal price = default(decimal), decimal fees = default(decimal), string type = default(string), string currency = default(string), SecurityOverride security = default(SecurityOverride))
        {
            this.Date = date;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for InvestmentsTransactionsOverride and cannot be null");
            }
            this.Name = name;
            this.Quantity = quantity;
            this.Price = price;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for InvestmentsTransactionsOverride and cannot be null");
            }
            this.Type = type;
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new ArgumentNullException("currency is a required property for InvestmentsTransactionsOverride and cannot be null");
            }
            this.Currency = currency;
            this.Fees = fees;
            this.Security = security;
        }

        /// <summary>
        /// Posting date for the transaction. Must be formatted as an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date.
        /// </summary>
        /// <value>Posting date for the transaction. Must be formatted as an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date.</value>
        [DataMember(Name = "date", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime Date { get; set; }

        /// <summary>
        /// The institution&#39;s description of the transaction.
        /// </summary>
        /// <value>The institution&#39;s description of the transaction.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The number of units of the security involved in this transaction. Must be positive if the type is a buy and negative if the type is a sell.
        /// </summary>
        /// <value>The number of units of the security involved in this transaction. Must be positive if the type is a buy and negative if the type is a sell.</value>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = false)]
        public decimal Quantity { get; set; }

        /// <summary>
        /// The price of the security at which this transaction occurred.
        /// </summary>
        /// <value>The price of the security at which this transaction occurred.</value>
        [DataMember(Name = "price", IsRequired = true, EmitDefaultValue = false)]
        public decimal Price { get; set; }

        /// <summary>
        /// The combined value of all fees applied to this transaction.
        /// </summary>
        /// <value>The combined value of all fees applied to this transaction.</value>
        [DataMember(Name = "fees", EmitDefaultValue = false)]
        public decimal Fees { get; set; }

        /// <summary>
        /// The type of the investment transaction. Possible values are: &#x60;buy&#x60;: Buying an investment &#x60;sell&#x60;: Selling an investment &#x60;cash&#x60;: Activity that modifies a cash position &#x60;fee&#x60;: A fee on the account &#x60;transfer&#x60;: Activity that modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer
        /// </summary>
        /// <value>The type of the investment transaction. Possible values are: &#x60;buy&#x60;: Buying an investment &#x60;sell&#x60;: Selling an investment &#x60;cash&#x60;: Activity that modifies a cash position &#x60;fee&#x60;: A fee on the account &#x60;transfer&#x60;: Activity that modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Either a valid &#x60;iso_currency_code&#x60; or &#x60;unofficial_currency_code&#x60;
        /// </summary>
        /// <value>Either a valid &#x60;iso_currency_code&#x60; or &#x60;unofficial_currency_code&#x60;</value>
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Security
        /// </summary>
        [DataMember(Name = "security", EmitDefaultValue = false)]
        public SecurityOverride Security { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InvestmentsTransactionsOverride {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Fees: ").Append(Fees).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Security: ").Append(Security).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvestmentsTransactionsOverride);
        }

        /// <summary>
        /// Returns true if InvestmentsTransactionsOverride instances are equal
        /// </summary>
        /// <param name="input">Instance of InvestmentsTransactionsOverride to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvestmentsTransactionsOverride input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.Fees == input.Fees ||
                    this.Fees.Equals(input.Fees)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Security == input.Security ||
                    (this.Security != null &&
                    this.Security.Equals(input.Security))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                hashCode = (hashCode * 59) + this.Price.GetHashCode();
                hashCode = (hashCode * 59) + this.Fees.GetHashCode();
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.Security != null)
                {
                    hashCode = (hashCode * 59) + this.Security.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
