/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Contains details about a security
    /// </summary>
    [DataContract(Name = "Security")]
    public partial class Security : Dictionary<String, Object>, IEquatable<Security>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Security" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Security()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Security" /> class.
        /// </summary>
        /// <param name="securityId">A unique, Plaid-specific identifier for the security, used to associate securities with holdings. Like all Plaid identifiers, the &#x60;security_id&#x60; is case sensitive. (required).</param>
        /// <param name="isin">12-character ISIN, a globally unique securities identifier. (required).</param>
        /// <param name="cusip">9-character CUSIP, an identifier assigned to North American securities. (required).</param>
        /// <param name="sedol">7-character SEDOL, an identifier assigned to securities in the UK. (required).</param>
        /// <param name="institutionSecurityId">An identifier given to the security by the institution (required).</param>
        /// <param name="institutionId">If &#x60;institution_security_id&#x60; is present, this field indicates the Plaid &#x60;institution_id&#x60; of the institution to whom the identifier belongs. (required).</param>
        /// <param name="proxySecurityId">In certain cases, Plaid will provide the ID of another security whose performance resembles this security, typically when the original security has low volume, or when a private security can be modeled with a publicly traded security. (required).</param>
        /// <param name="name">A descriptive name for the security, suitable for display. (required).</param>
        /// <param name="tickerSymbol">The securityâ€™s trading symbol for publicly traded securities, and otherwise a short identifier if available. (required).</param>
        /// <param name="isCashEquivalent">Indicates that a security is a highly liquid asset and can be treated like cash. (required).</param>
        /// <param name="type">The security type of the holding. Valid security types are:  &#x60;cash&#x60;: Cash, currency, and money market funds  &#x60;derivative&#x60;: Options, warrants, and other derivative instruments  &#x60;equity&#x60;: Domestic and foreign equities  &#x60;etf&#x60;: Multi-asset exchange-traded investment funds  &#x60;fixed income&#x60;: Bonds and certificates of deposit (CDs)  &#x60;loan&#x60;: Loans and loan receivables.  &#x60;mutual fund&#x60;: Open- and closed-end vehicles pooling funds of multiple investors.  &#x60;other&#x60;: Unknown or other investment types (required).</param>
        /// <param name="closePrice">Price of the security at the close of the previous trading session. &#x60;null&#x60; for non-public securities. If the security is a foreign currency or a cryptocurrency this field will be updated daily and will be priced in USD. (required).</param>
        /// <param name="closePriceAsOf">Date for which &#x60;close_price&#x60; is accurate. Always &#x60;null&#x60; if &#x60;close_price&#x60; is &#x60;null&#x60;. (required).</param>
        /// <param name="isoCurrencyCode">The ISO-4217 currency code of the price given. Always &#x60;null&#x60; if &#x60;unofficial_currency_code&#x60; is non-&#x60;null&#x60;. (required).</param>
        /// <param name="unofficialCurrencyCode">The unofficial currency code associated with the security. Always &#x60;null&#x60; if &#x60;iso_currency_code&#x60; is non-&#x60;null&#x60;. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported &#x60;iso_currency_code&#x60;s. (required).</param>
        public Security(string securityId = default(string), string isin = default(string), string cusip = default(string), string sedol = default(string), string institutionSecurityId = default(string), string institutionId = default(string), string proxySecurityId = default(string), string name = default(string), string tickerSymbol = default(string), bool? isCashEquivalent = default(bool?), string type = default(string), decimal? closePrice = default(decimal?), DateTime? closePriceAsOf = default(DateTime?), string isoCurrencyCode = default(string), string unofficialCurrencyCode = default(string)) : base()
        {
            // to ensure "securityId" is required (not null)
            if (securityId == null)
            {
                throw new ArgumentNullException("securityId is a required property for Security and cannot be null");
            }
            this.SecurityId = securityId;
            // to ensure "isin" is required (not null)
            if (isin == null)
            {
                throw new ArgumentNullException("isin is a required property for Security and cannot be null");
            }
            this.Isin = isin;
            // to ensure "cusip" is required (not null)
            if (cusip == null)
            {
                throw new ArgumentNullException("cusip is a required property for Security and cannot be null");
            }
            this.Cusip = cusip;
            // to ensure "sedol" is required (not null)
            if (sedol == null)
            {
                throw new ArgumentNullException("sedol is a required property for Security and cannot be null");
            }
            this.Sedol = sedol;
            // to ensure "institutionSecurityId" is required (not null)
            if (institutionSecurityId == null)
            {
                throw new ArgumentNullException("institutionSecurityId is a required property for Security and cannot be null");
            }
            this.InstitutionSecurityId = institutionSecurityId;
            // to ensure "institutionId" is required (not null)
            if (institutionId == null)
            {
                throw new ArgumentNullException("institutionId is a required property for Security and cannot be null");
            }
            this.InstitutionId = institutionId;
            // to ensure "proxySecurityId" is required (not null)
            if (proxySecurityId == null)
            {
                throw new ArgumentNullException("proxySecurityId is a required property for Security and cannot be null");
            }
            this.ProxySecurityId = proxySecurityId;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Security and cannot be null");
            }
            this.Name = name;
            // to ensure "tickerSymbol" is required (not null)
            if (tickerSymbol == null)
            {
                throw new ArgumentNullException("tickerSymbol is a required property for Security and cannot be null");
            }
            this.TickerSymbol = tickerSymbol;
            // to ensure "isCashEquivalent" is required (not null)
            if (isCashEquivalent == null)
            {
                throw new ArgumentNullException("isCashEquivalent is a required property for Security and cannot be null");
            }
            this.IsCashEquivalent = isCashEquivalent;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for Security and cannot be null");
            }
            this.Type = type;
            // to ensure "closePrice" is required (not null)
            if (closePrice == null)
            {
                throw new ArgumentNullException("closePrice is a required property for Security and cannot be null");
            }
            this.ClosePrice = closePrice;
            // to ensure "closePriceAsOf" is required (not null)
            if (closePriceAsOf == null)
            {
                throw new ArgumentNullException("closePriceAsOf is a required property for Security and cannot be null");
            }
            this.ClosePriceAsOf = closePriceAsOf;
            // to ensure "isoCurrencyCode" is required (not null)
            if (isoCurrencyCode == null)
            {
                throw new ArgumentNullException("isoCurrencyCode is a required property for Security and cannot be null");
            }
            this.IsoCurrencyCode = isoCurrencyCode;
            // to ensure "unofficialCurrencyCode" is required (not null)
            if (unofficialCurrencyCode == null)
            {
                throw new ArgumentNullException("unofficialCurrencyCode is a required property for Security and cannot be null");
            }
            this.UnofficialCurrencyCode = unofficialCurrencyCode;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// A unique, Plaid-specific identifier for the security, used to associate securities with holdings. Like all Plaid identifiers, the &#x60;security_id&#x60; is case sensitive.
        /// </summary>
        /// <value>A unique, Plaid-specific identifier for the security, used to associate securities with holdings. Like all Plaid identifiers, the &#x60;security_id&#x60; is case sensitive.</value>
        [DataMember(Name = "security_id", IsRequired = true, EmitDefaultValue = false)]
        public string SecurityId { get; set; }

        /// <summary>
        /// 12-character ISIN, a globally unique securities identifier.
        /// </summary>
        /// <value>12-character ISIN, a globally unique securities identifier.</value>
        [DataMember(Name = "isin", IsRequired = true, EmitDefaultValue = true)]
        public string Isin { get; set; }

        /// <summary>
        /// 9-character CUSIP, an identifier assigned to North American securities.
        /// </summary>
        /// <value>9-character CUSIP, an identifier assigned to North American securities.</value>
        [DataMember(Name = "cusip", IsRequired = true, EmitDefaultValue = true)]
        public string Cusip { get; set; }

        /// <summary>
        /// 7-character SEDOL, an identifier assigned to securities in the UK.
        /// </summary>
        /// <value>7-character SEDOL, an identifier assigned to securities in the UK.</value>
        [DataMember(Name = "sedol", IsRequired = true, EmitDefaultValue = true)]
        public string Sedol { get; set; }

        /// <summary>
        /// An identifier given to the security by the institution
        /// </summary>
        /// <value>An identifier given to the security by the institution</value>
        [DataMember(Name = "institution_security_id", IsRequired = true, EmitDefaultValue = true)]
        public string InstitutionSecurityId { get; set; }

        /// <summary>
        /// If &#x60;institution_security_id&#x60; is present, this field indicates the Plaid &#x60;institution_id&#x60; of the institution to whom the identifier belongs.
        /// </summary>
        /// <value>If &#x60;institution_security_id&#x60; is present, this field indicates the Plaid &#x60;institution_id&#x60; of the institution to whom the identifier belongs.</value>
        [DataMember(Name = "institution_id", IsRequired = true, EmitDefaultValue = true)]
        public string InstitutionId { get; set; }

        /// <summary>
        /// In certain cases, Plaid will provide the ID of another security whose performance resembles this security, typically when the original security has low volume, or when a private security can be modeled with a publicly traded security.
        /// </summary>
        /// <value>In certain cases, Plaid will provide the ID of another security whose performance resembles this security, typically when the original security has low volume, or when a private security can be modeled with a publicly traded security.</value>
        [DataMember(Name = "proxy_security_id", IsRequired = true, EmitDefaultValue = true)]
        public string ProxySecurityId { get; set; }

        /// <summary>
        /// A descriptive name for the security, suitable for display.
        /// </summary>
        /// <value>A descriptive name for the security, suitable for display.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The securityâ€™s trading symbol for publicly traded securities, and otherwise a short identifier if available.
        /// </summary>
        /// <value>The securityâ€™s trading symbol for publicly traded securities, and otherwise a short identifier if available.</value>
        [DataMember(Name = "ticker_symbol", IsRequired = true, EmitDefaultValue = true)]
        public string TickerSymbol { get; set; }

        /// <summary>
        /// Indicates that a security is a highly liquid asset and can be treated like cash.
        /// </summary>
        /// <value>Indicates that a security is a highly liquid asset and can be treated like cash.</value>
        [DataMember(Name = "is_cash_equivalent", IsRequired = true, EmitDefaultValue = true)]
        public bool? IsCashEquivalent { get; set; }

        /// <summary>
        /// The security type of the holding. Valid security types are:  &#x60;cash&#x60;: Cash, currency, and money market funds  &#x60;derivative&#x60;: Options, warrants, and other derivative instruments  &#x60;equity&#x60;: Domestic and foreign equities  &#x60;etf&#x60;: Multi-asset exchange-traded investment funds  &#x60;fixed income&#x60;: Bonds and certificates of deposit (CDs)  &#x60;loan&#x60;: Loans and loan receivables.  &#x60;mutual fund&#x60;: Open- and closed-end vehicles pooling funds of multiple investors.  &#x60;other&#x60;: Unknown or other investment types
        /// </summary>
        /// <value>The security type of the holding. Valid security types are:  &#x60;cash&#x60;: Cash, currency, and money market funds  &#x60;derivative&#x60;: Options, warrants, and other derivative instruments  &#x60;equity&#x60;: Domestic and foreign equities  &#x60;etf&#x60;: Multi-asset exchange-traded investment funds  &#x60;fixed income&#x60;: Bonds and certificates of deposit (CDs)  &#x60;loan&#x60;: Loans and loan receivables.  &#x60;mutual fund&#x60;: Open- and closed-end vehicles pooling funds of multiple investors.  &#x60;other&#x60;: Unknown or other investment types</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Price of the security at the close of the previous trading session. &#x60;null&#x60; for non-public securities. If the security is a foreign currency or a cryptocurrency this field will be updated daily and will be priced in USD.
        /// </summary>
        /// <value>Price of the security at the close of the previous trading session. &#x60;null&#x60; for non-public securities. If the security is a foreign currency or a cryptocurrency this field will be updated daily and will be priced in USD.</value>
        [DataMember(Name = "close_price", IsRequired = true, EmitDefaultValue = true)]
        public decimal? ClosePrice { get; set; }

        /// <summary>
        /// Date for which &#x60;close_price&#x60; is accurate. Always &#x60;null&#x60; if &#x60;close_price&#x60; is &#x60;null&#x60;.
        /// </summary>
        /// <value>Date for which &#x60;close_price&#x60; is accurate. Always &#x60;null&#x60; if &#x60;close_price&#x60; is &#x60;null&#x60;.</value>
        [DataMember(Name = "close_price_as_of", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? ClosePriceAsOf { get; set; }

        /// <summary>
        /// The ISO-4217 currency code of the price given. Always &#x60;null&#x60; if &#x60;unofficial_currency_code&#x60; is non-&#x60;null&#x60;.
        /// </summary>
        /// <value>The ISO-4217 currency code of the price given. Always &#x60;null&#x60; if &#x60;unofficial_currency_code&#x60; is non-&#x60;null&#x60;.</value>
        [DataMember(Name = "iso_currency_code", IsRequired = true, EmitDefaultValue = true)]
        public string IsoCurrencyCode { get; set; }

        /// <summary>
        /// The unofficial currency code associated with the security. Always &#x60;null&#x60; if &#x60;iso_currency_code&#x60; is non-&#x60;null&#x60;. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported &#x60;iso_currency_code&#x60;s.
        /// </summary>
        /// <value>The unofficial currency code associated with the security. Always &#x60;null&#x60; if &#x60;iso_currency_code&#x60; is non-&#x60;null&#x60;. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported &#x60;iso_currency_code&#x60;s.</value>
        [DataMember(Name = "unofficial_currency_code", IsRequired = true, EmitDefaultValue = true)]
        public string UnofficialCurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Security {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  SecurityId: ").Append(SecurityId).Append("\n");
            sb.Append("  Isin: ").Append(Isin).Append("\n");
            sb.Append("  Cusip: ").Append(Cusip).Append("\n");
            sb.Append("  Sedol: ").Append(Sedol).Append("\n");
            sb.Append("  InstitutionSecurityId: ").Append(InstitutionSecurityId).Append("\n");
            sb.Append("  InstitutionId: ").Append(InstitutionId).Append("\n");
            sb.Append("  ProxySecurityId: ").Append(ProxySecurityId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TickerSymbol: ").Append(TickerSymbol).Append("\n");
            sb.Append("  IsCashEquivalent: ").Append(IsCashEquivalent).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ClosePrice: ").Append(ClosePrice).Append("\n");
            sb.Append("  ClosePriceAsOf: ").Append(ClosePriceAsOf).Append("\n");
            sb.Append("  IsoCurrencyCode: ").Append(IsoCurrencyCode).Append("\n");
            sb.Append("  UnofficialCurrencyCode: ").Append(UnofficialCurrencyCode).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Security);
        }

        /// <summary>
        /// Returns true if Security instances are equal
        /// </summary>
        /// <param name="input">Instance of Security to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Security input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.SecurityId == input.SecurityId ||
                    (this.SecurityId != null &&
                    this.SecurityId.Equals(input.SecurityId))
                ) && base.Equals(input) && 
                (
                    this.Isin == input.Isin ||
                    (this.Isin != null &&
                    this.Isin.Equals(input.Isin))
                ) && base.Equals(input) && 
                (
                    this.Cusip == input.Cusip ||
                    (this.Cusip != null &&
                    this.Cusip.Equals(input.Cusip))
                ) && base.Equals(input) && 
                (
                    this.Sedol == input.Sedol ||
                    (this.Sedol != null &&
                    this.Sedol.Equals(input.Sedol))
                ) && base.Equals(input) && 
                (
                    this.InstitutionSecurityId == input.InstitutionSecurityId ||
                    (this.InstitutionSecurityId != null &&
                    this.InstitutionSecurityId.Equals(input.InstitutionSecurityId))
                ) && base.Equals(input) && 
                (
                    this.InstitutionId == input.InstitutionId ||
                    (this.InstitutionId != null &&
                    this.InstitutionId.Equals(input.InstitutionId))
                ) && base.Equals(input) && 
                (
                    this.ProxySecurityId == input.ProxySecurityId ||
                    (this.ProxySecurityId != null &&
                    this.ProxySecurityId.Equals(input.ProxySecurityId))
                ) && base.Equals(input) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && base.Equals(input) && 
                (
                    this.TickerSymbol == input.TickerSymbol ||
                    (this.TickerSymbol != null &&
                    this.TickerSymbol.Equals(input.TickerSymbol))
                ) && base.Equals(input) && 
                (
                    this.IsCashEquivalent == input.IsCashEquivalent ||
                    (this.IsCashEquivalent != null &&
                    this.IsCashEquivalent.Equals(input.IsCashEquivalent))
                ) && base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && base.Equals(input) && 
                (
                    this.ClosePrice == input.ClosePrice ||
                    (this.ClosePrice != null &&
                    this.ClosePrice.Equals(input.ClosePrice))
                ) && base.Equals(input) && 
                (
                    this.ClosePriceAsOf == input.ClosePriceAsOf ||
                    (this.ClosePriceAsOf != null &&
                    this.ClosePriceAsOf.Equals(input.ClosePriceAsOf))
                ) && base.Equals(input) && 
                (
                    this.IsoCurrencyCode == input.IsoCurrencyCode ||
                    (this.IsoCurrencyCode != null &&
                    this.IsoCurrencyCode.Equals(input.IsoCurrencyCode))
                ) && base.Equals(input) && 
                (
                    this.UnofficialCurrencyCode == input.UnofficialCurrencyCode ||
                    (this.UnofficialCurrencyCode != null &&
                    this.UnofficialCurrencyCode.Equals(input.UnofficialCurrencyCode))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.SecurityId != null)
                {
                    hashCode = (hashCode * 59) + this.SecurityId.GetHashCode();
                }
                if (this.Isin != null)
                {
                    hashCode = (hashCode * 59) + this.Isin.GetHashCode();
                }
                if (this.Cusip != null)
                {
                    hashCode = (hashCode * 59) + this.Cusip.GetHashCode();
                }
                if (this.Sedol != null)
                {
                    hashCode = (hashCode * 59) + this.Sedol.GetHashCode();
                }
                if (this.InstitutionSecurityId != null)
                {
                    hashCode = (hashCode * 59) + this.InstitutionSecurityId.GetHashCode();
                }
                if (this.InstitutionId != null)
                {
                    hashCode = (hashCode * 59) + this.InstitutionId.GetHashCode();
                }
                if (this.ProxySecurityId != null)
                {
                    hashCode = (hashCode * 59) + this.ProxySecurityId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.TickerSymbol != null)
                {
                    hashCode = (hashCode * 59) + this.TickerSymbol.GetHashCode();
                }
                if (this.IsCashEquivalent != null)
                {
                    hashCode = (hashCode * 59) + this.IsCashEquivalent.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.ClosePrice != null)
                {
                    hashCode = (hashCode * 59) + this.ClosePrice.GetHashCode();
                }
                if (this.ClosePriceAsOf != null)
                {
                    hashCode = (hashCode * 59) + this.ClosePriceAsOf.GetHashCode();
                }
                if (this.IsoCurrencyCode != null)
                {
                    hashCode = (hashCode * 59) + this.IsoCurrencyCode.GetHashCode();
                }
                if (this.UnofficialCurrencyCode != null)
                {
                    hashCode = (hashCode * 59) + this.UnofficialCurrencyCode.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
